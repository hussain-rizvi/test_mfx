
mfx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c74  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  08010f28  08010f28  00011f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011738  08011738  00012738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011740  08011740  00012740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011744  08011744  00012744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000c8  24000000  08011748  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002088  240000c8  08011810  000130c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24002150  08011810  00013150  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000130c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024497  00000000  00000000  000130f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004c46  00000000  00000000  0003758d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001900  00000000  00000000  0003c1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001348  00000000  00000000  0003dad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035400  00000000  00000000  0003ee20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021b97  00000000  00000000  00074220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014280e  00000000  00000000  00095db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d85c5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007264  00000000  00000000  001d8608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  001df86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000c8 	.word	0x240000c8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08010f0c 	.word	0x08010f0c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000cc 	.word	0x240000cc
 80002ec:	08010f0c 	.word	0x08010f0c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b988 	b.w	8000a30 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	468e      	mov	lr, r1
 8000740:	4604      	mov	r4, r0
 8000742:	4688      	mov	r8, r1
 8000744:	2b00      	cmp	r3, #0
 8000746:	d14a      	bne.n	80007de <__udivmoddi4+0xa6>
 8000748:	428a      	cmp	r2, r1
 800074a:	4617      	mov	r7, r2
 800074c:	d962      	bls.n	8000814 <__udivmoddi4+0xdc>
 800074e:	fab2 f682 	clz	r6, r2
 8000752:	b14e      	cbz	r6, 8000768 <__udivmoddi4+0x30>
 8000754:	f1c6 0320 	rsb	r3, r6, #32
 8000758:	fa01 f806 	lsl.w	r8, r1, r6
 800075c:	fa20 f303 	lsr.w	r3, r0, r3
 8000760:	40b7      	lsls	r7, r6
 8000762:	ea43 0808 	orr.w	r8, r3, r8
 8000766:	40b4      	lsls	r4, r6
 8000768:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800076c:	fa1f fc87 	uxth.w	ip, r7
 8000770:	fbb8 f1fe 	udiv	r1, r8, lr
 8000774:	0c23      	lsrs	r3, r4, #16
 8000776:	fb0e 8811 	mls	r8, lr, r1, r8
 800077a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800077e:	fb01 f20c 	mul.w	r2, r1, ip
 8000782:	429a      	cmp	r2, r3
 8000784:	d909      	bls.n	800079a <__udivmoddi4+0x62>
 8000786:	18fb      	adds	r3, r7, r3
 8000788:	f101 30ff 	add.w	r0, r1, #4294967295
 800078c:	f080 80ea 	bcs.w	8000964 <__udivmoddi4+0x22c>
 8000790:	429a      	cmp	r2, r3
 8000792:	f240 80e7 	bls.w	8000964 <__udivmoddi4+0x22c>
 8000796:	3902      	subs	r1, #2
 8000798:	443b      	add	r3, r7
 800079a:	1a9a      	subs	r2, r3, r2
 800079c:	b2a3      	uxth	r3, r4
 800079e:	fbb2 f0fe 	udiv	r0, r2, lr
 80007a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007aa:	fb00 fc0c 	mul.w	ip, r0, ip
 80007ae:	459c      	cmp	ip, r3
 80007b0:	d909      	bls.n	80007c6 <__udivmoddi4+0x8e>
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007b8:	f080 80d6 	bcs.w	8000968 <__udivmoddi4+0x230>
 80007bc:	459c      	cmp	ip, r3
 80007be:	f240 80d3 	bls.w	8000968 <__udivmoddi4+0x230>
 80007c2:	443b      	add	r3, r7
 80007c4:	3802      	subs	r0, #2
 80007c6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007ca:	eba3 030c 	sub.w	r3, r3, ip
 80007ce:	2100      	movs	r1, #0
 80007d0:	b11d      	cbz	r5, 80007da <__udivmoddi4+0xa2>
 80007d2:	40f3      	lsrs	r3, r6
 80007d4:	2200      	movs	r2, #0
 80007d6:	e9c5 3200 	strd	r3, r2, [r5]
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	428b      	cmp	r3, r1
 80007e0:	d905      	bls.n	80007ee <__udivmoddi4+0xb6>
 80007e2:	b10d      	cbz	r5, 80007e8 <__udivmoddi4+0xb0>
 80007e4:	e9c5 0100 	strd	r0, r1, [r5]
 80007e8:	2100      	movs	r1, #0
 80007ea:	4608      	mov	r0, r1
 80007ec:	e7f5      	b.n	80007da <__udivmoddi4+0xa2>
 80007ee:	fab3 f183 	clz	r1, r3
 80007f2:	2900      	cmp	r1, #0
 80007f4:	d146      	bne.n	8000884 <__udivmoddi4+0x14c>
 80007f6:	4573      	cmp	r3, lr
 80007f8:	d302      	bcc.n	8000800 <__udivmoddi4+0xc8>
 80007fa:	4282      	cmp	r2, r0
 80007fc:	f200 8105 	bhi.w	8000a0a <__udivmoddi4+0x2d2>
 8000800:	1a84      	subs	r4, r0, r2
 8000802:	eb6e 0203 	sbc.w	r2, lr, r3
 8000806:	2001      	movs	r0, #1
 8000808:	4690      	mov	r8, r2
 800080a:	2d00      	cmp	r5, #0
 800080c:	d0e5      	beq.n	80007da <__udivmoddi4+0xa2>
 800080e:	e9c5 4800 	strd	r4, r8, [r5]
 8000812:	e7e2      	b.n	80007da <__udivmoddi4+0xa2>
 8000814:	2a00      	cmp	r2, #0
 8000816:	f000 8090 	beq.w	800093a <__udivmoddi4+0x202>
 800081a:	fab2 f682 	clz	r6, r2
 800081e:	2e00      	cmp	r6, #0
 8000820:	f040 80a4 	bne.w	800096c <__udivmoddi4+0x234>
 8000824:	1a8a      	subs	r2, r1, r2
 8000826:	0c03      	lsrs	r3, r0, #16
 8000828:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800082c:	b280      	uxth	r0, r0
 800082e:	b2bc      	uxth	r4, r7
 8000830:	2101      	movs	r1, #1
 8000832:	fbb2 fcfe 	udiv	ip, r2, lr
 8000836:	fb0e 221c 	mls	r2, lr, ip, r2
 800083a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800083e:	fb04 f20c 	mul.w	r2, r4, ip
 8000842:	429a      	cmp	r2, r3
 8000844:	d907      	bls.n	8000856 <__udivmoddi4+0x11e>
 8000846:	18fb      	adds	r3, r7, r3
 8000848:	f10c 38ff 	add.w	r8, ip, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x11c>
 800084e:	429a      	cmp	r2, r3
 8000850:	f200 80e0 	bhi.w	8000a14 <__udivmoddi4+0x2dc>
 8000854:	46c4      	mov	ip, r8
 8000856:	1a9b      	subs	r3, r3, r2
 8000858:	fbb3 f2fe 	udiv	r2, r3, lr
 800085c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000860:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000864:	fb02 f404 	mul.w	r4, r2, r4
 8000868:	429c      	cmp	r4, r3
 800086a:	d907      	bls.n	800087c <__udivmoddi4+0x144>
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000872:	d202      	bcs.n	800087a <__udivmoddi4+0x142>
 8000874:	429c      	cmp	r4, r3
 8000876:	f200 80ca 	bhi.w	8000a0e <__udivmoddi4+0x2d6>
 800087a:	4602      	mov	r2, r0
 800087c:	1b1b      	subs	r3, r3, r4
 800087e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000882:	e7a5      	b.n	80007d0 <__udivmoddi4+0x98>
 8000884:	f1c1 0620 	rsb	r6, r1, #32
 8000888:	408b      	lsls	r3, r1
 800088a:	fa22 f706 	lsr.w	r7, r2, r6
 800088e:	431f      	orrs	r7, r3
 8000890:	fa0e f401 	lsl.w	r4, lr, r1
 8000894:	fa20 f306 	lsr.w	r3, r0, r6
 8000898:	fa2e fe06 	lsr.w	lr, lr, r6
 800089c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008a0:	4323      	orrs	r3, r4
 80008a2:	fa00 f801 	lsl.w	r8, r0, r1
 80008a6:	fa1f fc87 	uxth.w	ip, r7
 80008aa:	fbbe f0f9 	udiv	r0, lr, r9
 80008ae:	0c1c      	lsrs	r4, r3, #16
 80008b0:	fb09 ee10 	mls	lr, r9, r0, lr
 80008b4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80008b8:	fb00 fe0c 	mul.w	lr, r0, ip
 80008bc:	45a6      	cmp	lr, r4
 80008be:	fa02 f201 	lsl.w	r2, r2, r1
 80008c2:	d909      	bls.n	80008d8 <__udivmoddi4+0x1a0>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f100 3aff 	add.w	sl, r0, #4294967295
 80008ca:	f080 809c 	bcs.w	8000a06 <__udivmoddi4+0x2ce>
 80008ce:	45a6      	cmp	lr, r4
 80008d0:	f240 8099 	bls.w	8000a06 <__udivmoddi4+0x2ce>
 80008d4:	3802      	subs	r0, #2
 80008d6:	443c      	add	r4, r7
 80008d8:	eba4 040e 	sub.w	r4, r4, lr
 80008dc:	fa1f fe83 	uxth.w	lr, r3
 80008e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008e4:	fb09 4413 	mls	r4, r9, r3, r4
 80008e8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008ec:	fb03 fc0c 	mul.w	ip, r3, ip
 80008f0:	45a4      	cmp	ip, r4
 80008f2:	d908      	bls.n	8000906 <__udivmoddi4+0x1ce>
 80008f4:	193c      	adds	r4, r7, r4
 80008f6:	f103 3eff 	add.w	lr, r3, #4294967295
 80008fa:	f080 8082 	bcs.w	8000a02 <__udivmoddi4+0x2ca>
 80008fe:	45a4      	cmp	ip, r4
 8000900:	d97f      	bls.n	8000a02 <__udivmoddi4+0x2ca>
 8000902:	3b02      	subs	r3, #2
 8000904:	443c      	add	r4, r7
 8000906:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800090a:	eba4 040c 	sub.w	r4, r4, ip
 800090e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000912:	4564      	cmp	r4, ip
 8000914:	4673      	mov	r3, lr
 8000916:	46e1      	mov	r9, ip
 8000918:	d362      	bcc.n	80009e0 <__udivmoddi4+0x2a8>
 800091a:	d05f      	beq.n	80009dc <__udivmoddi4+0x2a4>
 800091c:	b15d      	cbz	r5, 8000936 <__udivmoddi4+0x1fe>
 800091e:	ebb8 0203 	subs.w	r2, r8, r3
 8000922:	eb64 0409 	sbc.w	r4, r4, r9
 8000926:	fa04 f606 	lsl.w	r6, r4, r6
 800092a:	fa22 f301 	lsr.w	r3, r2, r1
 800092e:	431e      	orrs	r6, r3
 8000930:	40cc      	lsrs	r4, r1
 8000932:	e9c5 6400 	strd	r6, r4, [r5]
 8000936:	2100      	movs	r1, #0
 8000938:	e74f      	b.n	80007da <__udivmoddi4+0xa2>
 800093a:	fbb1 fcf2 	udiv	ip, r1, r2
 800093e:	0c01      	lsrs	r1, r0, #16
 8000940:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000944:	b280      	uxth	r0, r0
 8000946:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800094a:	463b      	mov	r3, r7
 800094c:	4638      	mov	r0, r7
 800094e:	463c      	mov	r4, r7
 8000950:	46b8      	mov	r8, r7
 8000952:	46be      	mov	lr, r7
 8000954:	2620      	movs	r6, #32
 8000956:	fbb1 f1f7 	udiv	r1, r1, r7
 800095a:	eba2 0208 	sub.w	r2, r2, r8
 800095e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000962:	e766      	b.n	8000832 <__udivmoddi4+0xfa>
 8000964:	4601      	mov	r1, r0
 8000966:	e718      	b.n	800079a <__udivmoddi4+0x62>
 8000968:	4610      	mov	r0, r2
 800096a:	e72c      	b.n	80007c6 <__udivmoddi4+0x8e>
 800096c:	f1c6 0220 	rsb	r2, r6, #32
 8000970:	fa2e f302 	lsr.w	r3, lr, r2
 8000974:	40b7      	lsls	r7, r6
 8000976:	40b1      	lsls	r1, r6
 8000978:	fa20 f202 	lsr.w	r2, r0, r2
 800097c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000980:	430a      	orrs	r2, r1
 8000982:	fbb3 f8fe 	udiv	r8, r3, lr
 8000986:	b2bc      	uxth	r4, r7
 8000988:	fb0e 3318 	mls	r3, lr, r8, r3
 800098c:	0c11      	lsrs	r1, r2, #16
 800098e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000992:	fb08 f904 	mul.w	r9, r8, r4
 8000996:	40b0      	lsls	r0, r6
 8000998:	4589      	cmp	r9, r1
 800099a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800099e:	b280      	uxth	r0, r0
 80009a0:	d93e      	bls.n	8000a20 <__udivmoddi4+0x2e8>
 80009a2:	1879      	adds	r1, r7, r1
 80009a4:	f108 3cff 	add.w	ip, r8, #4294967295
 80009a8:	d201      	bcs.n	80009ae <__udivmoddi4+0x276>
 80009aa:	4589      	cmp	r9, r1
 80009ac:	d81f      	bhi.n	80009ee <__udivmoddi4+0x2b6>
 80009ae:	eba1 0109 	sub.w	r1, r1, r9
 80009b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009b6:	fb09 f804 	mul.w	r8, r9, r4
 80009ba:	fb0e 1119 	mls	r1, lr, r9, r1
 80009be:	b292      	uxth	r2, r2
 80009c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009c4:	4542      	cmp	r2, r8
 80009c6:	d229      	bcs.n	8000a1c <__udivmoddi4+0x2e4>
 80009c8:	18ba      	adds	r2, r7, r2
 80009ca:	f109 31ff 	add.w	r1, r9, #4294967295
 80009ce:	d2c4      	bcs.n	800095a <__udivmoddi4+0x222>
 80009d0:	4542      	cmp	r2, r8
 80009d2:	d2c2      	bcs.n	800095a <__udivmoddi4+0x222>
 80009d4:	f1a9 0102 	sub.w	r1, r9, #2
 80009d8:	443a      	add	r2, r7
 80009da:	e7be      	b.n	800095a <__udivmoddi4+0x222>
 80009dc:	45f0      	cmp	r8, lr
 80009de:	d29d      	bcs.n	800091c <__udivmoddi4+0x1e4>
 80009e0:	ebbe 0302 	subs.w	r3, lr, r2
 80009e4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009e8:	3801      	subs	r0, #1
 80009ea:	46e1      	mov	r9, ip
 80009ec:	e796      	b.n	800091c <__udivmoddi4+0x1e4>
 80009ee:	eba7 0909 	sub.w	r9, r7, r9
 80009f2:	4449      	add	r1, r9
 80009f4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009fc:	fb09 f804 	mul.w	r8, r9, r4
 8000a00:	e7db      	b.n	80009ba <__udivmoddi4+0x282>
 8000a02:	4673      	mov	r3, lr
 8000a04:	e77f      	b.n	8000906 <__udivmoddi4+0x1ce>
 8000a06:	4650      	mov	r0, sl
 8000a08:	e766      	b.n	80008d8 <__udivmoddi4+0x1a0>
 8000a0a:	4608      	mov	r0, r1
 8000a0c:	e6fd      	b.n	800080a <__udivmoddi4+0xd2>
 8000a0e:	443b      	add	r3, r7
 8000a10:	3a02      	subs	r2, #2
 8000a12:	e733      	b.n	800087c <__udivmoddi4+0x144>
 8000a14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a18:	443b      	add	r3, r7
 8000a1a:	e71c      	b.n	8000856 <__udivmoddi4+0x11e>
 8000a1c:	4649      	mov	r1, r9
 8000a1e:	e79c      	b.n	800095a <__udivmoddi4+0x222>
 8000a20:	eba1 0109 	sub.w	r1, r1, r9
 8000a24:	46c4      	mov	ip, r8
 8000a26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a2a:	fb09 f804 	mul.w	r8, r9, r4
 8000a2e:	e7c4      	b.n	80009ba <__udivmoddi4+0x282>

08000a30 <__aeabi_idiv0>:
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop

08000a34 <GenerateTestTone>:
  * @brief Generate a sine wave test tone
  * @param buffer: pointer to audio buffer
  * @param buffer_size: size of buffer in bytes
  */
void GenerateTestTone(uint8_t *buffer, uint32_t buffer_size)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	@ 0x30
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  uint16_t *samples = (uint16_t *)buffer;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t num_samples = buffer_size / (sizeof(uint16_t) * CHANNELS);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	089b      	lsrs	r3, r3, #2
 8000a46:	623b      	str	r3, [r7, #32]
  
  // Phase increment per sample for the desired frequency
  static float phase_increment = 0;
  if (phase_increment == 0)
 8000a48:	4b3a      	ldr	r3, [pc, #232]	@ (8000b34 <GenerateTestTone+0x100>)
 8000a4a:	edd3 7a00 	vldr	s15, [r3]
 8000a4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a56:	d102      	bne.n	8000a5e <GenerateTestTone+0x2a>
  {
    phase_increment = (2.0f * M_PI * TONE_FREQUENCY) / SAMPLE_RATE;
 8000a58:	4b36      	ldr	r3, [pc, #216]	@ (8000b34 <GenerateTestTone+0x100>)
 8000a5a:	4a37      	ldr	r2, [pc, #220]	@ (8000b38 <GenerateTestTone+0x104>)
 8000a5c:	601a      	str	r2, [r3, #0]
  }
  
  // Create rhythmic pattern: beep pattern
  // Each beep is 0.2 seconds (9600 samples at 48kHz)
  // Pattern: beep(on 0.2s) - silence(off 0.2s) - repeat
  uint32_t beep_duration = SAMPLE_RATE / 5;  // 0.2 seconds on
 8000a5e:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000a62:	61fb      	str	r3, [r7, #28]
  uint32_t cycle_duration = beep_duration * 2;  // 0.4 seconds total cycle
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	61bb      	str	r3, [r7, #24]
  uint32_t position_in_cycle = tone_phase % cycle_duration;
 8000a6a:	4b34      	ldr	r3, [pc, #208]	@ (8000b3c <GenerateTestTone+0x108>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a74:	69b9      	ldr	r1, [r7, #24]
 8000a76:	fb01 f202 	mul.w	r2, r1, r2
 8000a7a:	1a9b      	subs	r3, r3, r2
 8000a7c:	617b      	str	r3, [r7, #20]
  float envelope = 1.0f;
 8000a7e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  // Apply envelope for rhythmic pattern
  if (position_in_cycle < beep_duration)
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d203      	bcs.n	8000a94 <GenerateTestTone+0x60>
  {
    envelope = 1.0f;  // On (beep)
 8000a8c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a92:	e002      	b.n	8000a9a <GenerateTestTone+0x66>
  }
  else
  {
    envelope = 0.0f;  // Off (silence)
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  
  for (uint32_t i = 0; i < num_samples; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a9e:	e03f      	b.n	8000b20 <GenerateTestTone+0xec>
  {
    // Generate sine wave sample using accumulated phase
    float phase = tone_phase * phase_increment;
 8000aa0:	4b26      	ldr	r3, [pc, #152]	@ (8000b3c <GenerateTestTone+0x108>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	ee07 3a90 	vmov	s15, r3
 8000aa8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000aac:	4b21      	ldr	r3, [pc, #132]	@ (8000b34 <GenerateTestTone+0x100>)
 8000aae:	edd3 7a00 	vldr	s15, [r3]
 8000ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ab6:	edc7 7a04 	vstr	s15, [r7, #16]
    float sample = sinf(phase);
 8000aba:	ed97 0a04 	vldr	s0, [r7, #16]
 8000abe:	f010 f96f 	bl	8010da0 <sinf>
 8000ac2:	ed87 0a03 	vstr	s0, [r7, #12]
    
    int16_t sample_value = (int16_t)(sample * 8000.0f * envelope);
 8000ac6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aca:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000b40 <GenerateTestTone+0x10c>
 8000ace:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ad2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ada:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ade:	ee17 3a90 	vmov	r3, s15
 8000ae2:	817b      	strh	r3, [r7, #10]
    
    // Interleave stereo samples
    samples[i * CHANNELS] = sample_value;     // Left channel
 8000ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aea:	4413      	add	r3, r2
 8000aec:	897a      	ldrh	r2, [r7, #10]
 8000aee:	801a      	strh	r2, [r3, #0]
    samples[i * CHANNELS + 1] = sample_value; // Right channel
 8000af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	3302      	adds	r3, #2
 8000af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000af8:	4413      	add	r3, r2
 8000afa:	897a      	ldrh	r2, [r7, #10]
 8000afc:	801a      	strh	r2, [r3, #0]
    
    tone_phase++;
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <GenerateTestTone+0x108>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	4a0d      	ldr	r2, [pc, #52]	@ (8000b3c <GenerateTestTone+0x108>)
 8000b06:	6013      	str	r3, [r2, #0]
    // Wrap phase to prevent overflow (2π wraps naturally in sin())
    if (tone_phase >= 0xFFFFFFFF / 4)  // Reset before overflow
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <GenerateTestTone+0x108>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d302      	bcc.n	8000b1a <GenerateTestTone+0xe6>
    {
      tone_phase = 0;
 8000b14:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <GenerateTestTone+0x108>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < num_samples; i++)
 8000b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d3bb      	bcc.n	8000aa0 <GenerateTestTone+0x6c>
    }
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	3730      	adds	r7, #48	@ 0x30
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	24000900 	.word	0x24000900
 8000b38:	3d6be9a4 	.word	0x3d6be9a4
 8000b3c:	240008f8 	.word	0x240008f8
 8000b40:	45fa0000 	.word	0x45fa0000

08000b44 <StartTestTone>:

/**
  * @brief Start playing test tone when USB audio device is ready
  */
void StartTestTone(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
  static uint8_t freq_set_attempted = 0;
  
  if (Appli_state == APPLICATION_READY && !test_tone_started)
 8000b4a:	4b24      	ldr	r3, [pc, #144]	@ (8000bdc <StartTestTone+0x98>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d13f      	bne.n	8000bd2 <StartTestTone+0x8e>
 8000b52:	4b23      	ldr	r3, [pc, #140]	@ (8000be0 <StartTestTone+0x9c>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d13b      	bne.n	8000bd2 <StartTestTone+0x8e>
  {
    if (!freq_set_attempted)
 8000b5a:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <StartTestTone+0xa0>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d114      	bne.n	8000b8c <StartTestTone+0x48>
    {
      USBH_StatusTypeDef freq_status = USBH_AUDIO_SetFrequency(&hUsbHostHS, 
 8000b62:	2310      	movs	r3, #16
 8000b64:	2202      	movs	r2, #2
 8000b66:	f64b 3180 	movw	r1, #48000	@ 0xbb80
 8000b6a:	481f      	ldr	r0, [pc, #124]	@ (8000be8 <StartTestTone+0xa4>)
 8000b6c:	f00c fd46 	bl	800d5fc <USBH_AUDIO_SetFrequency>
 8000b70:	4603      	mov	r3, r0
 8000b72:	71fb      	strb	r3, [r7, #7]
                                                                  SAMPLE_RATE, 
                                                                  CHANNELS, 
                                                                  BITS_PER_SAMPLE);
      freq_set_attempted = 1;
 8000b74:	4b1b      	ldr	r3, [pc, #108]	@ (8000be4 <StartTestTone+0xa0>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
      frequency_set_complete = 0;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <StartTestTone+0xa8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
      
      if (freq_status == USBH_BUSY)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d102      	bne.n	8000b8c <StartTestTone+0x48>
      {
        freq_set_attempted = 0;  // Retry on next loop
 8000b86:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <StartTestTone+0xa0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
      }
    }
    
    if (frequency_set_complete && !test_tone_started)
 8000b8c:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <StartTestTone+0xa8>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d01e      	beq.n	8000bd2 <StartTestTone+0x8e>
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <StartTestTone+0x9c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d11a      	bne.n	8000bd2 <StartTestTone+0x8e>
    {
      tone_phase = 0;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <StartTestTone+0xac>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
      GenerateTestTone(audio_buffer, sizeof(audio_buffer));
 8000ba2:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 8000ba6:	4813      	ldr	r0, [pc, #76]	@ (8000bf4 <StartTestTone+0xb0>)
 8000ba8:	f7ff ff44 	bl	8000a34 <GenerateTestTone>
      
      if (USBH_AUDIO_Play(&hUsbHostHS, audio_buffer, sizeof(audio_buffer)) == USBH_OK)
 8000bac:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 8000bb0:	4910      	ldr	r1, [pc, #64]	@ (8000bf4 <StartTestTone+0xb0>)
 8000bb2:	480d      	ldr	r0, [pc, #52]	@ (8000be8 <StartTestTone+0xa4>)
 8000bb4:	f00c fe22 	bl	800d7fc <USBH_AUDIO_Play>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d106      	bne.n	8000bcc <StartTestTone+0x88>
      {
        test_tone_started = 1;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <StartTestTone+0x9c>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
        BSP_LED_On(LED1);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f001 f875 	bl	8001cb4 <BSP_LED_On>
      {
        test_tone_started = 1;  // Prevent endless retries
      }
    }
  }
}
 8000bca:	e002      	b.n	8000bd2 <StartTestTone+0x8e>
        test_tone_started = 1;  // Prevent endless retries
 8000bcc:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <StartTestTone+0x9c>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24001c20 	.word	0x24001c20
 8000be0:	240008fc 	.word	0x240008fc
 8000be4:	24000904 	.word	0x24000904
 8000be8:	240013ac 	.word	0x240013ac
 8000bec:	240008fd 	.word	0x240008fd
 8000bf0:	240008f8 	.word	0x240008f8
 8000bf4:	24000178 	.word	0x24000178

08000bf8 <USBH_AUDIO_BufferEmptyCallback>:
/**
  * @brief Callback called when audio buffer is empty (user needs to provide next buffer)
  * @param phost: USB Host handle
  */
void USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  UNUSED(phost);
  GenerateTestTone(audio_buffer, sizeof(audio_buffer));
 8000c00:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 8000c04:	4807      	ldr	r0, [pc, #28]	@ (8000c24 <USBH_AUDIO_BufferEmptyCallback+0x2c>)
 8000c06:	f7ff ff15 	bl	8000a34 <GenerateTestTone>
  USBH_AUDIO_Play(&hUsbHostHS, audio_buffer, sizeof(audio_buffer));
 8000c0a:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 8000c0e:	4905      	ldr	r1, [pc, #20]	@ (8000c24 <USBH_AUDIO_BufferEmptyCallback+0x2c>)
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <USBH_AUDIO_BufferEmptyCallback+0x30>)
 8000c12:	f00c fdf3 	bl	800d7fc <USBH_AUDIO_Play>
  BSP_LED_Toggle(LED3);
 8000c16:	2002      	movs	r0, #2
 8000c18:	f001 f878 	bl	8001d0c <BSP_LED_Toggle>
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	24000178 	.word	0x24000178
 8000c28:	240013ac 	.word	0x240013ac

08000c2c <USBH_AUDIO_FrequencySet>:
/**
  * @brief Frequency set callback
  * @param phost: USB Host handle
  */
void USBH_AUDIO_FrequencySetCallback(USBH_HandleTypeDef *phost)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  UNUSED(phost);
  frequency_set_complete = 1;
 8000c34:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <USBH_AUDIO_FrequencySet+0x1c>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
  BSP_LED_On(LED2);
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f001 f83a 	bl	8001cb4 <BSP_LED_On>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	240008fd 	.word	0x240008fd

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c52:	f000 f955 	bl	8000f00 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c56:	4b40      	ldr	r3, [pc, #256]	@ (8000d58 <main+0x10c>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d11b      	bne.n	8000c9a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c62:	f3bf 8f4f 	dsb	sy
}
 8000c66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c68:	f3bf 8f6f 	isb	sy
}
 8000c6c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c6e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d58 <main+0x10c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c76:	f3bf 8f4f 	dsb	sy
}
 8000c7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c7c:	f3bf 8f6f 	isb	sy
}
 8000c80:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c82:	4b35      	ldr	r3, [pc, #212]	@ (8000d58 <main+0x10c>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	4a34      	ldr	r2, [pc, #208]	@ (8000d58 <main+0x10c>)
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c8c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c8e:	f3bf 8f4f 	dsb	sy
}
 8000c92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c94:	f3bf 8f6f 	isb	sy
}
 8000c98:	e000      	b.n	8000c9c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c9a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d58 <main+0x10c>)
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d138      	bne.n	8000d1a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d58 <main+0x10c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb0:	f3bf 8f4f 	dsb	sy
}
 8000cb4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000cb6:	4b28      	ldr	r3, [pc, #160]	@ (8000d58 <main+0x10c>)
 8000cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cbc:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	0b5b      	lsrs	r3, r3, #13
 8000cc2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000cc6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	08db      	lsrs	r3, r3, #3
 8000ccc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cd0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	015a      	lsls	r2, r3, #5
 8000cd6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000cda:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ce0:	491d      	ldr	r1, [pc, #116]	@ (8000d58 <main+0x10c>)
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	1e5a      	subs	r2, r3, #1
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1ef      	bne.n	8000cd2 <main+0x86>
    } while(sets-- != 0U);
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1e5a      	subs	r2, r3, #1
 8000cf6:	60ba      	str	r2, [r7, #8]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1e5      	bne.n	8000cc8 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000cfc:	f3bf 8f4f 	dsb	sy
}
 8000d00:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <main+0x10c>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	4a14      	ldr	r2, [pc, #80]	@ (8000d58 <main+0x10c>)
 8000d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d0c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d0e:	f3bf 8f4f 	dsb	sy
}
 8000d12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d14:	f3bf 8f6f 	isb	sy
}
 8000d18:	e000      	b.n	8000d1c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000d1a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1c:	f003 fa22 	bl	8004164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d20:	f000 f81c 	bl	8000d5c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Configure the application hardware resources */
  BSP_LED_Init(LED1);
 8000d24:	2000      	movs	r0, #0
 8000d26:	f000 ff59 	bl	8001bdc <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f000 ff56 	bl	8001bdc <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000d30:	2002      	movs	r0, #2
 8000d32:	f000 ff53 	bl	8001bdc <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8000d36:	2003      	movs	r0, #3
 8000d38:	f000 ff50 	bl	8001bdc <BSP_LED_Init>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3c:	f000 f8b4 	bl	8000ea8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d40:	f000 f888 	bl	8000e54 <MX_USART1_UART_Init>

  HAL_PWREx_EnableUSBVoltageDetector();
 8000d44:	f006 ff04 	bl	8007b50 <HAL_PWREx_EnableUSBVoltageDetector>
  MX_USB_HOST_Init();
 8000d48:	f00e fd0a 	bl	800f760 <MX_USB_HOST_Init>
  /* Infinite loop */

  while (1)
  {
    /* USER CODE BEGIN WHILE */
    MX_USB_HOST_Process();
 8000d4c:	f00e fd30 	bl	800f7b0 <MX_USB_HOST_Process>
    StartTestTone();
 8000d50:	f7ff fef8 	bl	8000b44 <StartTestTone>
    MX_USB_HOST_Process();
 8000d54:	bf00      	nop
 8000d56:	e7f9      	b.n	8000d4c <main+0x100>
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <SystemClock_Config>:
  *            Flash Latency(WS)              = 6
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b09e      	sub	sp, #120	@ 0x78
 8000d60:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d62:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d66:	2220      	movs	r2, #32
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f00f fa43 	bl	80101f6 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	224c      	movs	r2, #76	@ 0x4c
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f00f fa3c 	bl	80101f6 <memset>
  HAL_StatusTypeDef ret = HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  /* The voltage scaling allows optimizing the power consumption when the device is
  clocked below the maximum system frequency, to update the voltage scaling value
  regarding system frequency refer to product datasheet.
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	4b31      	ldr	r3, [pc, #196]	@ (8000e50 <SystemClock_Config+0xf4>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a30      	ldr	r2, [pc, #192]	@ (8000e50 <SystemClock_Config+0xf4>)
 8000d8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b2e      	ldr	r3, [pc, #184]	@ (8000e50 <SystemClock_Config+0xf4>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000da0:	bf00      	nop
 8000da2:	4b2b      	ldr	r3, [pc, #172]	@ (8000e50 <SystemClock_Config+0xf4>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000daa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dae:	d1f8      	bne.n	8000da2 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000db0:	2301      	movs	r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000db8:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	633b      	str	r3, [r7, #48]	@ 0x30

  RCC_OscInitStruct.PLL.PLLM = 12;
 8000dca:	230c      	movs	r3, #12
 8000dcc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 280;
 8000dce:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000de0:	2302      	movs	r3, #2
 8000de2:	643b      	str	r3, [r7, #64]	@ 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000de8:	2304      	movs	r3, #4
 8000dea:	64bb      	str	r3, [r7, #72]	@ 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000dec:	f107 0308 	add.w	r3, r7, #8
 8000df0:	4618      	mov	r0, r3
 8000df2:	f006 febd 	bl	8007b70 <HAL_RCC_OscConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 8000dfc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e04:	f000 f8db 	bl	8000fbe <Error_Handler>
  }

  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000e08:	233f      	movs	r3, #63	@ 0x3f
 8000e0a:	657b      	str	r3, [r7, #84]	@ 0x54
    RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.SYSCLKDivider  = RCC_SYSCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_HCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e18:	2340      	movs	r3, #64	@ 0x40
 8000e1a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e1c:	2340      	movs	r3, #64	@ 0x40
 8000e1e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e24:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e26:	2340      	movs	r3, #64	@ 0x40
 8000e28:	673b      	str	r3, [r7, #112]	@ 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
 8000e2a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e2e:	2106      	movs	r1, #6
 8000e30:	4618      	mov	r0, r3
 8000e32:	f007 facf 	bl	80083d4 <HAL_RCC_ClockConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 8000e3c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000e44:	f000 f8bb 	bl	8000fbe <Error_Handler>

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;

  HAL_EnableCompensationCell();
  */
}
 8000e48:	bf00      	nop
 8000e4a:	3778      	adds	r7, #120	@ 0x78
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	58024800 	.word	0x58024800

08000e54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
      - Stop Bit    = One Stop bit
      - Parity      = None
      - BaudRate    = 1152000 baud
      - Hardware flow control disabled (RTS and CTS signals) */

  UartHandle.Instance        = USARTx;
 8000e58:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ea4 <MX_USART1_UART_Init+0x50>)
 8000e5c:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate   = 115200;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e64:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000e78:	4b09      	ldr	r3, [pc, #36]	@ (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e80:	220c      	movs	r2, #12
 8000e82:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]

  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8000e8a:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e8c:	f001 ffff 	bl	8002e8e <HAL_UART_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USART1_UART_Init+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 8000e96:	f000 f892 	bl	8000fbe <Error_Handler>
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	240000e4 	.word	0x240000e4
 8000ea4:	40011000 	.word	0x40011000

08000ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <MX_GPIO_Init+0x30>)
 8000eb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000eb4:	4a08      	ldr	r2, [pc, #32]	@ (8000ed8 <MX_GPIO_Init+0x30>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ebe:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <MX_GPIO_Init+0x30>)
 8000ec0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]

}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	58024400 	.word	0x58024400

08000edc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
UART_DISPLAY
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 8000ee4:	1d39      	adds	r1, r7, #4
 8000ee6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000eea:	2201      	movs	r2, #1
 8000eec:	4803      	ldr	r0, [pc, #12]	@ (8000efc <__io_putchar+0x20>)
 8000eee:	f002 f81e 	bl	8002f2e <HAL_UART_Transmit>

  return ch;
 8000ef2:	687b      	ldr	r3, [r7, #4]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	240000e4 	.word	0x240000e4

08000f00 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
void MPU_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f12:	f003 faed 	bl	80044f0 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f16:	2301      	movs	r3, #1
 8000f18:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f1e:	231f      	movs	r3, #31
 8000f20:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f22:	2300      	movs	r3, #0
 8000f24:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000f3a:	2387      	movs	r3, #135	@ 0x87
 8000f3c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f42:	463b      	mov	r3, r7
 8000f44:	4618      	mov	r0, r3
 8000f46:	f003 fb0b 	bl	8004560 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32B;
 8000f52:	2304      	movs	r3, #4
 8000f54:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f72:	463b      	mov	r3, r7
 8000f74:	4618      	mov	r0, r3
 8000f76:	f003 faf3 	bl	8004560 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Normal Non Cacheable for SRAM1 */

  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000f7e:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000f82:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000f84:	2312      	movs	r3, #18
 8000f86:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 fad8 	bl	8004560 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000fb0:	2004      	movs	r0, #4
 8000fb2:	f003 fab5 	bl	8004520 <HAL_MPU_Enable>

}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  BSP_LED_On(LED2);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f000 fe76 	bl	8001cb4 <BSP_LED_On>
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <Error_Handler+0xa>

08000fcc <MFXSTM32L152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_Init(MFXSTM32L152_Object_t *pObj)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 0U)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d11c      	bne.n	800101c <MFXSTM32L152_Init+0x50>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4798      	blx	r3

    if (MFXSTM32L152_SetIrqOutPinPolarity(pObj, MFXSTM32L152_OUT_PIN_POLARITY_HIGH) != MFXSTM32L152_OK)
 8000fe8:	2102      	movs	r1, #2
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 f8d6 	bl	800119c <MFXSTM32L152_SetIrqOutPinPolarity>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <MFXSTM32L152_Init+0x32>
    {
      ret = MFXSTM32L152_ERROR;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	e00e      	b.n	800101c <MFXSTM32L152_Init+0x50>
    }
    else if (MFXSTM32L152_SetIrqOutPinType(pObj, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL) != MFXSTM32L152_OK)
 8000ffe:	2101      	movs	r1, #1
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f901 	bl	8001208 <MFXSTM32L152_SetIrqOutPinType>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <MFXSTM32L152_Init+0x48>
    {
      ret = MFXSTM32L152_ERROR;
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	e003      	b.n	800101c <MFXSTM32L152_Init+0x50>
    }
    else
    {
      pObj->IsInitialized = 1U;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
  }

  return ret;
 800101c:	68fb      	ldr	r3, [r7, #12]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <MFXSTM32L152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_DeInit(MFXSTM32L152_Object_t *pObj)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001034:	2b01      	cmp	r3, #1
 8001036:	d106      	bne.n	8001046 <MFXSTM32L152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    pObj->IO.DeInit();
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	4798      	blx	r3
    pObj->IsInitialized = 0U;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  return MFXSTM32L152_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <MFXSTM32L152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_Reset(MFXSTM32L152_Object_t *pObj)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  uint8_t tmp = MFXSTM32L152_SWRST;
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	72fb      	strb	r3, [r7, #11]

  /* Soft Reset */
  if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &tmp, 1) != MFXSTM32L152_OK)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f103 0018 	add.w	r0, r3, #24
 8001066:	f107 020b 	add.w	r2, r7, #11
 800106a:	2301      	movs	r3, #1
 800106c:	2140      	movs	r1, #64	@ 0x40
 800106e:	f000 fd9d 	bl	8001bac <mfxstm32l152_write_reg>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <MFXSTM32L152_Reset+0x2e>
  {
    ret = MFXSTM32L152_ERROR;
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <MFXSTM32L152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  pObj   Pointer to component object.
  * @retval The Device ID (two bytes).
  */
int32_t MFXSTM32L152_ReadID(MFXSTM32L152_Object_t *pObj, uint32_t *Id)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
  uint8_t id;

  /* Initialize IO BUS layer */
  pObj->IO.Init();
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4798      	blx	r3

  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_ID, &id, 1) != MFXSTM32L152_OK)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f103 0018 	add.w	r0, r3, #24
 80010a2:	f107 020b 	add.w	r2, r7, #11
 80010a6:	2301      	movs	r3, #1
 80010a8:	2100      	movs	r1, #0
 80010aa:	f000 fd68 	bl	8001b7e <mfxstm32l152_read_reg>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <MFXSTM32L152_ReadID+0x34>
  {
    ret = MFXSTM32L152_ERROR;
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	e003      	b.n	80010c4 <MFXSTM32L152_ReadID+0x3c>
  }
  else
  {
    /* Store the device ID value */
    *Id = id;
 80010bc:	7afb      	ldrb	r3, [r7, #11]
 80010be:	461a      	mov	r2, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80010c4:	68fb      	ldr	r3, [r7, #12]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <MFXSTM32L152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval Component status
  */
int32_t MFXSTM32L152_EnableITSource(MFXSTM32L152_Object_t *pObj, uint8_t Source)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current value of the INT_EN register */
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f103 0018 	add.w	r0, r3, #24
 80010e4:	f107 020b 	add.w	r2, r7, #11
 80010e8:	2301      	movs	r3, #1
 80010ea:	2142      	movs	r1, #66	@ 0x42
 80010ec:	f000 fd47 	bl	8001b7e <mfxstm32l152_read_reg>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <MFXSTM32L152_EnableITSource+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	e013      	b.n	8001126 <MFXSTM32L152_EnableITSource+0x58>
  }
  else
  {
    /* Set the interrupts to be Enabled */
    tmp |= Source;
 80010fe:	7afa      	ldrb	r2, [r7, #11]
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	4313      	orrs	r3, r2
 8001104:	b2db      	uxtb	r3, r3
 8001106:	72fb      	strb	r3, [r7, #11]

    /* Set the register */
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f103 0018 	add.w	r0, r3, #24
 800110e:	f107 020b 	add.w	r2, r7, #11
 8001112:	2301      	movs	r3, #1
 8001114:	2142      	movs	r1, #66	@ 0x42
 8001116:	f000 fd49 	bl	8001bac <mfxstm32l152_write_reg>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <MFXSTM32L152_EnableITSource+0x58>
    {
      ret = MFXSTM32L152_ERROR;
 8001120:	f04f 33ff 	mov.w	r3, #4294967295
 8001124:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <MFXSTM32L152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval Component status
  */
int32_t MFXSTM32L152_DisableITSource(MFXSTM32L152_Object_t *pObj, uint8_t Source)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current value of the INT_EN register */
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f103 0018 	add.w	r0, r3, #24
 8001146:	f107 020b 	add.w	r2, r7, #11
 800114a:	2301      	movs	r3, #1
 800114c:	2142      	movs	r1, #66	@ 0x42
 800114e:	f000 fd16 	bl	8001b7e <mfxstm32l152_read_reg>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <MFXSTM32L152_DisableITSource+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	e018      	b.n	8001192 <MFXSTM32L152_DisableITSource+0x62>
  }
  else
  {
    /* Set the interrupts to be Enabled */
    tmp &= ~Source;
 8001160:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001164:	43db      	mvns	r3, r3
 8001166:	b25a      	sxtb	r2, r3
 8001168:	7afb      	ldrb	r3, [r7, #11]
 800116a:	b25b      	sxtb	r3, r3
 800116c:	4013      	ands	r3, r2
 800116e:	b25b      	sxtb	r3, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	72fb      	strb	r3, [r7, #11]

    /* Set the register */
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, &tmp, 1) != MFXSTM32L152_OK)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f103 0018 	add.w	r0, r3, #24
 800117a:	f107 020b 	add.w	r2, r7, #11
 800117e:	2301      	movs	r3, #1
 8001180:	2142      	movs	r1, #66	@ 0x42
 8001182:	f000 fd13 	bl	8001bac <mfxstm32l152_write_reg>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d002      	beq.n	8001192 <MFXSTM32L152_DisableITSource+0x62>
    {
      ret = MFXSTM32L152_ERROR;
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001192:	68fb      	ldr	r3, [r7, #12]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <MFXSTM32L152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval Component status
  */
int32_t MFXSTM32L152_SetIrqOutPinPolarity(MFXSTM32L152_Object_t *pObj, uint8_t Polarity)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current register value */
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f103 0018 	add.w	r0, r3, #24
 80011b2:	f107 020b 	add.w	r2, r7, #11
 80011b6:	2301      	movs	r3, #1
 80011b8:	2141      	movs	r1, #65	@ 0x41
 80011ba:	f000 fce0 	bl	8001b7e <mfxstm32l152_read_reg>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <MFXSTM32L152_SetIrqOutPinPolarity+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	e018      	b.n	80011fe <MFXSTM32L152_SetIrqOutPinPolarity+0x62>
  }
  else
  {
    /* Mask the polarity bits */
    tmp &= ~(uint8_t)0x02;
 80011cc:	7afb      	ldrb	r3, [r7, #11]
 80011ce:	f023 0302 	bic.w	r3, r3, #2
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	72fb      	strb	r3, [r7, #11]

    /* Modify the Interrupt Output line configuration */
    tmp |= Polarity;
 80011d6:	7afa      	ldrb	r2, [r7, #11]
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	4313      	orrs	r3, r2
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	72fb      	strb	r3, [r7, #11]

    /* Set the new register value */
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f103 0018 	add.w	r0, r3, #24
 80011e6:	f107 020b 	add.w	r2, r7, #11
 80011ea:	2301      	movs	r3, #1
 80011ec:	2141      	movs	r1, #65	@ 0x41
 80011ee:	f000 fcdd 	bl	8001bac <mfxstm32l152_write_reg>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <MFXSTM32L152_SetIrqOutPinPolarity+0x62>
    {
      ret = MFXSTM32L152_ERROR;
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <MFXSTM32L152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval Component status
  */
int32_t MFXSTM32L152_SetIrqOutPinType(MFXSTM32L152_Object_t *pObj, uint8_t Type)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MFXSTM32L152_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Get the current register value */
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f103 0018 	add.w	r0, r3, #24
 800121e:	f107 020b 	add.w	r2, r7, #11
 8001222:	2301      	movs	r3, #1
 8001224:	2141      	movs	r1, #65	@ 0x41
 8001226:	f000 fcaa 	bl	8001b7e <mfxstm32l152_read_reg>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <MFXSTM32L152_SetIrqOutPinType+0x30>
  {
    ret = MFXSTM32L152_ERROR;
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	e018      	b.n	800126a <MFXSTM32L152_SetIrqOutPinType+0x62>
  }
  else
  {
    /* Mask the type bits */
    tmp &= ~(uint8_t)0x01;
 8001238:	7afb      	ldrb	r3, [r7, #11]
 800123a:	f023 0301 	bic.w	r3, r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	72fb      	strb	r3, [r7, #11]

    /* Modify the Interrupt Output line configuration */
    tmp |= Type;
 8001242:	7afa      	ldrb	r2, [r7, #11]
 8001244:	78fb      	ldrb	r3, [r7, #3]
 8001246:	4313      	orrs	r3, r2
 8001248:	b2db      	uxtb	r3, r3
 800124a:	72fb      	strb	r3, [r7, #11]

    /* Set the new register value */
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, &tmp, 1) != MFXSTM32L152_OK)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f103 0018 	add.w	r0, r3, #24
 8001252:	f107 020b 	add.w	r2, r7, #11
 8001256:	2301      	movs	r3, #1
 8001258:	2141      	movs	r1, #65	@ 0x41
 800125a:	f000 fca7 	bl	8001bac <mfxstm32l152_write_reg>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <MFXSTM32L152_SetIrqOutPinType+0x62>
    {
      ret = MFXSTM32L152_ERROR;
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800126a:	68fb      	ldr	r3, [r7, #12]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <MFXSTM32L152_IO_Start>:
  * @param  pObj   Pointer to component object.
  * @param  IO_Pin IO pin
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_Start(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  uint8_t mode;

  /* Get the current register value */
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f103 0018 	add.w	r0, r3, #24
 8001288:	f107 020b 	add.w	r2, r7, #11
 800128c:	2301      	movs	r3, #1
 800128e:	2140      	movs	r1, #64	@ 0x40
 8001290:	f000 fc75 	bl	8001b7e <mfxstm32l152_read_reg>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <MFXSTM32L152_IO_Start+0x2e>
  {
    ret = MFXSTM32L152_ERROR;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	e022      	b.n	80012e8 <MFXSTM32L152_IO_Start+0x74>
  }
  else
  {
    /* Set the IO Functionalities to be Enabled */
    mode |= MFXSTM32L152_GPIO_EN;
 80012a2:	7afb      	ldrb	r3, [r7, #11]
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	72fb      	strb	r3, [r7, #11]
    /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
    /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
    /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
    /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
    /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
    if (IO_Pin > 0xFFFFU)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012b2:	d305      	bcc.n	80012c0 <MFXSTM32L152_IO_Start+0x4c>
    {
      mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	72fb      	strb	r3, [r7, #11]
 80012be:	e004      	b.n	80012ca <MFXSTM32L152_IO_Start+0x56>
    }
    else
    {
      mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 80012c0:	7afb      	ldrb	r3, [r7, #11]
 80012c2:	f023 0308 	bic.w	r3, r3, #8
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	72fb      	strb	r3, [r7, #11]
    }

    /* Write the new register value */
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_SYS_CTRL, &mode, 1) != MFXSTM32L152_OK)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f103 0018 	add.w	r0, r3, #24
 80012d0:	f107 020b 	add.w	r2, r7, #11
 80012d4:	2301      	movs	r3, #1
 80012d6:	2140      	movs	r1, #64	@ 0x40
 80012d8:	f000 fc68 	bl	8001bac <mfxstm32l152_write_reg>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <MFXSTM32L152_IO_Start+0x74>
    {
      ret = MFXSTM32L152_ERROR;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80012e8:	68fb      	ldr	r3, [r7, #12]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <MFXSTM32L152_IO_Init>:
  * @param  IoInit Pointer to a BSP_IO_Init_t structure that contains
  *         the configuration information for the specified IO pin.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_Init(MFXSTM32L152_Object_t *pObj, MFXSTM32L152_IO_Init_t *IoInit)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]

  /* IT enable/disable */
  switch (IoInit->Mode)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b04      	cmp	r3, #4
 8001308:	d903      	bls.n	8001312 <MFXSTM32L152_IO_Init+0x1e>
 800130a:	3b05      	subs	r3, #5
 800130c:	2b03      	cmp	r3, #3
 800130e:	d813      	bhi.n	8001338 <MFXSTM32L152_IO_Init+0x44>
 8001310:	e00a      	b.n	8001328 <MFXSTM32L152_IO_Init+0x34>
    case MFXSTM32L152_GPIO_MODE_OFF:
    case MFXSTM32L152_GPIO_MODE_ANALOG:
    case MFXSTM32L152_GPIO_MODE_INPUT:
    case MFXSTM32L152_GPIO_MODE_OUTPUT_OD:
    case MFXSTM32L152_GPIO_MODE_OUTPUT_PP:
      ret += MFXSTM32L152_IO_DisablePinIT(pObj, IoInit->Pin); /* first disable IT */
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4619      	mov	r1, r3
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 fa53 	bl	80017c4 <MFXSTM32L152_IO_DisablePinIT>
 800131e:	4602      	mov	r2, r0
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
      break;
 8001326:	e008      	b.n	800133a <MFXSTM32L152_IO_Init+0x46>

    case MFXSTM32L152_GPIO_MODE_IT_RISING_EDGE:
    case MFXSTM32L152_GPIO_MODE_IT_FALLING_EDGE:
    case MFXSTM32L152_GPIO_MODE_IT_LOW_LEVEL:
    case MFXSTM32L152_GPIO_MODE_IT_HIGH_LEVEL:
      ret += MFXSTM32L152_IO_EnableIT(pObj); /* first enable IT */
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 fa09 	bl	8001740 <MFXSTM32L152_IO_EnableIT>
 800132e:	4602      	mov	r2, r0
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
      break;
 8001336:	e000      	b.n	800133a <MFXSTM32L152_IO_Init+0x46>
    default:
      break;
 8001338:	bf00      	nop
  }

  /* Set direction IN/OUT */
  if ((IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_PP) || (IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_OD))
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b04      	cmp	r3, #4
 8001340:	d003      	beq.n	800134a <MFXSTM32L152_IO_Init+0x56>
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b03      	cmp	r3, #3
 8001348:	d10b      	bne.n	8001362 <MFXSTM32L152_IO_Init+0x6e>
  {
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2201      	movs	r2, #1
 8001350:	4619      	mov	r1, r3
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 f936 	bl	80015c4 <MFXSTM32L152_IO_InitPin>
 8001358:	4602      	mov	r2, r0
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4413      	add	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	e00a      	b.n	8001378 <MFXSTM32L152_IO_Init+0x84>
  }
  else
  {
    ret += MFXSTM32L152_IO_InitPin(pObj, IoInit->Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2200      	movs	r2, #0
 8001368:	4619      	mov	r1, r3
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f92a 	bl	80015c4 <MFXSTM32L152_IO_InitPin>
 8001370:	4602      	mov	r2, r0
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4413      	add	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]
  }

  /* Set Push-Pull type */
  switch (IoInit->Pull)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <MFXSTM32L152_IO_Init+0x94>
 8001380:	3b01      	subs	r3, #1
 8001382:	2b01      	cmp	r3, #1
 8001384:	d818      	bhi.n	80013b8 <MFXSTM32L152_IO_Init+0xc4>
 8001386:	e00b      	b.n	80013a0 <MFXSTM32L152_IO_Init+0xac>
  {
    case MFXSTM32L152_GPIO_NOPULL:
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin,
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	2300      	movs	r3, #0
 800138e:	2164      	movs	r1, #100	@ 0x64
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 fb05 	bl	80019a0 <MFXSTM32L152_reg24_setPinValue>
 8001396:	4602      	mov	r2, r0
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4413      	add	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
                                            MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
      break;
 800139e:	e00c      	b.n	80013ba <MFXSTM32L152_IO_Init+0xc6>
    case MFXSTM32L152_GPIO_PULLUP:
    case MFXSTM32L152_GPIO_PULLDOWN:
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin,
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	2301      	movs	r3, #1
 80013a6:	2164      	movs	r1, #100	@ 0x64
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 faf9 	bl	80019a0 <MFXSTM32L152_reg24_setPinValue>
 80013ae:	4602      	mov	r2, r0
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
                                            MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
      break;
 80013b6:	e000      	b.n	80013ba <MFXSTM32L152_IO_Init+0xc6>
    default:
      break;
 80013b8:	bf00      	nop
  }

  if (IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_PP)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d10a      	bne.n	80013d8 <MFXSTM32L152_IO_Init+0xe4>
  {
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin,
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	2300      	movs	r3, #0
 80013c8:	2164      	movs	r1, #100	@ 0x64
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 fae8 	bl	80019a0 <MFXSTM32L152_reg24_setPinValue>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]
                                          MFXSTM32L152_GPO_PUSH_PULL);
  }

  if (IoInit->Mode == MFXSTM32L152_GPIO_MODE_OUTPUT_OD)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d10a      	bne.n	80013f6 <MFXSTM32L152_IO_Init+0x102>
  {
    ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IoInit->Pin,
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2301      	movs	r3, #1
 80013e6:	2164      	movs	r1, #100	@ 0x64
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 fad9 	bl	80019a0 <MFXSTM32L152_reg24_setPinValue>
 80013ee:	4602      	mov	r2, r0
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
                                          MFXSTM32L152_GPO_OPEN_DRAIN);
  }

  /* Set Pullup-Pulldown */
  switch (IoInit->Pull)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d033      	beq.n	8001466 <MFXSTM32L152_IO_Init+0x172>
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d83d      	bhi.n	800147e <MFXSTM32L152_IO_Init+0x18a>
 8001402:	2b00      	cmp	r3, #0
 8001404:	d002      	beq.n	800140c <MFXSTM32L152_IO_Init+0x118>
 8001406:	2b01      	cmp	r3, #1
 8001408:	d021      	beq.n	800144e <MFXSTM32L152_IO_Init+0x15a>
    case MFXSTM32L152_GPIO_PULLDOWN:
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin,
                                            MFXSTM32L152_GPIO_PULL_DOWN);
      break;
    default:
      break;
 800140a:	e038      	b.n	800147e <MFXSTM32L152_IO_Init+0x18a>
      if ((IoInit->Mode == MFXSTM32L152_GPIO_MODE_INPUT) || (IoInit->Mode == MFXSTM32L152_GPIO_MODE_ANALOG))
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d003      	beq.n	800141c <MFXSTM32L152_IO_Init+0x128>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d10c      	bne.n	8001436 <MFXSTM32L152_IO_Init+0x142>
        ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin,
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2300      	movs	r3, #0
 8001422:	2168      	movs	r1, #104	@ 0x68
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 fabb 	bl	80019a0 <MFXSTM32L152_reg24_setPinValue>
 800142a:	4602      	mov	r2, r0
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4413      	add	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
                                              MFXSTM32L152_GPIO_PULL_DOWN);
 8001432:	bf00      	nop
      break;
 8001434:	e024      	b.n	8001480 <MFXSTM32L152_IO_Init+0x18c>
        ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin,
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	2301      	movs	r3, #1
 800143c:	2168      	movs	r1, #104	@ 0x68
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 faae 	bl	80019a0 <MFXSTM32L152_reg24_setPinValue>
 8001444:	4602      	mov	r2, r0
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4413      	add	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]
      break;
 800144c:	e018      	b.n	8001480 <MFXSTM32L152_IO_Init+0x18c>
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin,
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	2301      	movs	r3, #1
 8001454:	2168      	movs	r1, #104	@ 0x68
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 faa2 	bl	80019a0 <MFXSTM32L152_reg24_setPinValue>
 800145c:	4602      	mov	r2, r0
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4413      	add	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
      break;
 8001464:	e00c      	b.n	8001480 <MFXSTM32L152_IO_Init+0x18c>
      ret += MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IoInit->Pin,
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	2300      	movs	r3, #0
 800146c:	2168      	movs	r1, #104	@ 0x68
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 fa96 	bl	80019a0 <MFXSTM32L152_reg24_setPinValue>
 8001474:	4602      	mov	r2, r0
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4413      	add	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
      break;
 800147c:	e000      	b.n	8001480 <MFXSTM32L152_IO_Init+0x18c>
      break;
 800147e:	bf00      	nop
  }

  /* Set Irq event and type mode */
  switch (IoInit->Mode)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	3b05      	subs	r3, #5
 8001486:	2b03      	cmp	r3, #3
 8001488:	f200 8090 	bhi.w	80015ac <MFXSTM32L152_IO_Init+0x2b8>
 800148c:	a201      	add	r2, pc, #4	@ (adr r2, 8001494 <MFXSTM32L152_IO_Init+0x1a0>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	080014a5 	.word	0x080014a5
 8001498:	080014e7 	.word	0x080014e7
 800149c:	0800156b 	.word	0x0800156b
 80014a0:	08001529 	.word	0x08001529
  {
    case MFXSTM32L152_GPIO_MODE_IT_RISING_EDGE:
      ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2201      	movs	r2, #1
 80014aa:	4619      	mov	r1, r3
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 f8a3 	bl	80015f8 <MFXSTM32L152_IO_SetIrqEvtMode>
 80014b2:	4602      	mov	r2, r0
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2201      	movs	r2, #1
 80014c0:	4619      	mov	r1, r3
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 f8b2 	bl	800162c <MFXSTM32L152_IO_SetIrqTypeMode>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4413      	add	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f95c 	bl	8001794 <MFXSTM32L152_IO_EnablePinIT>
 80014dc:	4602      	mov	r2, r0
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4413      	add	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]
      break;
 80014e4:	e063      	b.n	80015ae <MFXSTM32L152_IO_Init+0x2ba>
    case MFXSTM32L152_GPIO_MODE_IT_FALLING_EDGE:
      ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2201      	movs	r2, #1
 80014ec:	4619      	mov	r1, r3
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f882 	bl	80015f8 <MFXSTM32L152_IO_SetIrqEvtMode>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4413      	add	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2200      	movs	r2, #0
 8001502:	4619      	mov	r1, r3
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f891 	bl	800162c <MFXSTM32L152_IO_SetIrqTypeMode>
 800150a:	4602      	mov	r2, r0
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4619      	mov	r1, r3
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f93b 	bl	8001794 <MFXSTM32L152_IO_EnablePinIT>
 800151e:	4602      	mov	r2, r0
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
      break;
 8001526:	e042      	b.n	80015ae <MFXSTM32L152_IO_Init+0x2ba>
    case MFXSTM32L152_GPIO_MODE_IT_HIGH_LEVEL:
      ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2200      	movs	r2, #0
 800152e:	4619      	mov	r1, r3
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f861 	bl	80015f8 <MFXSTM32L152_IO_SetIrqEvtMode>
 8001536:	4602      	mov	r2, r0
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4413      	add	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2201      	movs	r2, #1
 8001544:	4619      	mov	r1, r3
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f870 	bl	800162c <MFXSTM32L152_IO_SetIrqTypeMode>
 800154c:	4602      	mov	r2, r0
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4413      	add	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f91a 	bl	8001794 <MFXSTM32L152_IO_EnablePinIT>
 8001560:	4602      	mov	r2, r0
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4413      	add	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
      break;
 8001568:	e021      	b.n	80015ae <MFXSTM32L152_IO_Init+0x2ba>
    case MFXSTM32L152_GPIO_MODE_IT_LOW_LEVEL:
      ret += MFXSTM32L152_IO_SetIrqEvtMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	4619      	mov	r1, r3
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f840 	bl	80015f8 <MFXSTM32L152_IO_SetIrqEvtMode>
 8001578:	4602      	mov	r2, r0
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4413      	add	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_SetIrqTypeMode(pObj, IoInit->Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2200      	movs	r2, #0
 8001586:	4619      	mov	r1, r3
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f84f 	bl	800162c <MFXSTM32L152_IO_SetIrqTypeMode>
 800158e:	4602      	mov	r2, r0
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
      ret += MFXSTM32L152_IO_EnablePinIT(pObj, IoInit->Pin);  /* last to do: enable IT */
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4619      	mov	r1, r3
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 f8f9 	bl	8001794 <MFXSTM32L152_IO_EnablePinIT>
 80015a2:	4602      	mov	r2, r0
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
      break;
 80015aa:	e000      	b.n	80015ae <MFXSTM32L152_IO_Init+0x2ba>
    default:
      break;
 80015ac:	bf00      	nop
  }

  if (ret != MFXSTM32L152_OK)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <MFXSTM32L152_IO_Init+0x2c6>
  {
    ret = MFXSTM32L152_ERROR;
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <MFXSTM32L152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_InitPin(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t Direction)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	4613      	mov	r3, r2
 80015d0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]

  if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction) != MFXSTM32L152_OK)
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	2160      	movs	r1, #96	@ 0x60
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f000 f9df 	bl	80019a0 <MFXSTM32L152_reg24_setPinValue>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <MFXSTM32L152_IO_InitPin+0x2a>
  {
    ret = MFXSTM32L152_ERROR;
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ec:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80015ee:	697b      	ldr	r3, [r7, #20]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <MFXSTM32L152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_SetIrqEvtMode(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t Evt)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	4613      	mov	r3, r2
 8001604:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]

  if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt) != MFXSTM32L152_OK)
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	214c      	movs	r1, #76	@ 0x4c
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f000 f9c5 	bl	80019a0 <MFXSTM32L152_reg24_setPinValue>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <MFXSTM32L152_IO_SetIrqEvtMode+0x2a>
  {
    ret = MFXSTM32L152_ERROR;
 800161c:	f04f 33ff 	mov.w	r3, #4294967295
 8001620:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001622:	697b      	ldr	r3, [r7, #20]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <MFXSTM32L152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_SetIrqTypeMode(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t Type)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	4613      	mov	r3, r2
 8001638:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]

  if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type) != MFXSTM32L152_OK)
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	2150      	movs	r1, #80	@ 0x50
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 f9ab 	bl	80019a0 <MFXSTM32L152_reg24_setPinValue>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <MFXSTM32L152_IO_SetIrqTypeMode+0x2a>
  {
    ret = MFXSTM32L152_ERROR;
 8001650:	f04f 33ff 	mov.w	r3, #4294967295
 8001654:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001656:	697b      	ldr	r3, [r7, #20]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <MFXSTM32L152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_WritePin(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin, uint8_t PinState)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	4613      	mov	r3, r2
 800166c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MFXSTM32L152_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]

  /* Apply the bit value to the selected pin */
  if (PinState != 0U)
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00c      	beq.n	8001692 <MFXSTM32L152_IO_WritePin+0x32>
  {
    /* Set the SET register */
    if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1) != MFXSTM32L152_OK)
 8001678:	2301      	movs	r3, #1
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	216c      	movs	r1, #108	@ 0x6c
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f000 f98e 	bl	80019a0 <MFXSTM32L152_reg24_setPinValue>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00f      	beq.n	80016aa <MFXSTM32L152_IO_WritePin+0x4a>
    {
      ret = MFXSTM32L152_ERROR;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	e00b      	b.n	80016aa <MFXSTM32L152_IO_WritePin+0x4a>
    }
  }
  else
  {
    /* Set the CLEAR register */
    if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1) != MFXSTM32L152_OK)
 8001692:	2301      	movs	r3, #1
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	2170      	movs	r1, #112	@ 0x70
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f000 f981 	bl	80019a0 <MFXSTM32L152_reg24_setPinValue>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <MFXSTM32L152_IO_WritePin+0x4a>
    {
      ret = MFXSTM32L152_ERROR;
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
 80016a8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80016aa:	697b      	ldr	r3, [r7, #20]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <MFXSTM32L152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
int32_t MFXSTM32L152_IO_ReadPin(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint8_t tmpreg[3];
  uint32_t tmp;

  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f103 0018 	add.w	r0, r3, #24
 80016c4:	f107 0208 	add.w	r2, r7, #8
 80016c8:	2301      	movs	r3, #1
 80016ca:	2110      	movs	r1, #16
 80016cc:	f000 fa57 	bl	8001b7e <mfxstm32l152_read_reg>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <MFXSTM32L152_IO_ReadPin+0x28>
  {
    return MFXSTM32L152_ERROR;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	e02d      	b.n	8001738 <MFXSTM32L152_IO_ReadPin+0x84>
  }
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE2, &tmpreg[1], 1) != MFXSTM32L152_OK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f103 0018 	add.w	r0, r3, #24
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	2301      	movs	r3, #1
 80016ea:	2111      	movs	r1, #17
 80016ec:	f000 fa47 	bl	8001b7e <mfxstm32l152_read_reg>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <MFXSTM32L152_IO_ReadPin+0x48>
  {
    return MFXSTM32L152_ERROR;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	e01d      	b.n	8001738 <MFXSTM32L152_IO_ReadPin+0x84>
  }
  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_GPIO_STATE3, &tmpreg[2], 1) != MFXSTM32L152_OK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f103 0018 	add.w	r0, r3, #24
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	1c9a      	adds	r2, r3, #2
 8001708:	2301      	movs	r3, #1
 800170a:	2112      	movs	r1, #18
 800170c:	f000 fa37 	bl	8001b7e <mfxstm32l152_read_reg>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <MFXSTM32L152_IO_ReadPin+0x68>
  {
    return MFXSTM32L152_ERROR;
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
 800171a:	e00d      	b.n	8001738 <MFXSTM32L152_IO_ReadPin+0x84>
  }
  tmp = ((uint32_t)tmpreg[0] + ((uint32_t)tmpreg[1] << 8) + ((uint32_t)tmpreg[2] << 16));
 800171c:	7a3b      	ldrb	r3, [r7, #8]
 800171e:	461a      	mov	r2, r3
 8001720:	7a7b      	ldrb	r3, [r7, #9]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	441a      	add	r2, r3
 8001726:	7abb      	ldrb	r3, [r7, #10]
 8001728:	041b      	lsls	r3, r3, #16
 800172a:	4413      	add	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
  tmp &= IO_Pin;
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	4013      	ands	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]

  return (int32_t)(tmp);
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <MFXSTM32L152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_EnableIT(MFXSTM32L152_Object_t *pObj)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]

  /* Enable global IO IT source */
  if (MFXSTM32L152_EnableITSource(pObj, MFXSTM32L152_IRQ_GPIO) != MFXSTM32L152_OK)
 800174c:	2101      	movs	r1, #1
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fcbd 	bl	80010ce <MFXSTM32L152_EnableITSource>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <MFXSTM32L152_IO_EnableIT+0x20>
  {
    ret = MFXSTM32L152_ERROR;
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001760:	68fb      	ldr	r3, [r7, #12]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <MFXSTM32L152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  pObj   Pointer to component object.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_DisableIT(MFXSTM32L152_Object_t *pObj)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  int32_t ret = MFXSTM32L152_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]

  /* Disable global IO IT source */
  if (MFXSTM32L152_DisableITSource(pObj, MFXSTM32L152_IRQ_GPIO) != MFXSTM32L152_OK)
 8001776:	2101      	movs	r1, #1
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fcd9 	bl	8001130 <MFXSTM32L152_DisableITSource>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <MFXSTM32L152_IO_DisableIT+0x20>
  {
    ret = MFXSTM32L152_ERROR;
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <MFXSTM32L152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_EnablePinIT(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]

  if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1) != MFXSTM32L152_OK)
 80017a2:	2301      	movs	r3, #1
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	2148      	movs	r1, #72	@ 0x48
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f8f9 	bl	80019a0 <MFXSTM32L152_reg24_setPinValue>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <MFXSTM32L152_IO_EnablePinIT+0x26>
  {
    ret = MFXSTM32L152_ERROR;
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <MFXSTM32L152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_DisablePinIT(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  int32_t ret = MFXSTM32L152_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]

  if (MFXSTM32L152_reg24_setPinValue(pObj, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0) != MFXSTM32L152_OK)
 80017d2:	2300      	movs	r3, #0
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	2148      	movs	r1, #72	@ 0x48
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f8e1 	bl	80019a0 <MFXSTM32L152_reg24_setPinValue>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <MFXSTM32L152_IO_DisablePinIT+0x26>
  {
    ret = MFXSTM32L152_ERROR;
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
 80017e8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80017ea:	68fb      	ldr	r3, [r7, #12]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <MFXSTM32L152_IO_ITStatus>:
  * @param  IO_Pin The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
int32_t MFXSTM32L152_IO_ITStatus(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  /* Get the Interrupt status */
  uint8_t tmpreg[3];
  uint32_t tmp;

  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1, &tmpreg[0], 1) != MFXSTM32L152_OK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f103 0018 	add.w	r0, r3, #24
 8001804:	f107 0208 	add.w	r2, r7, #8
 8001808:	2301      	movs	r3, #1
 800180a:	210c      	movs	r1, #12
 800180c:	f000 f9b7 	bl	8001b7e <mfxstm32l152_read_reg>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <MFXSTM32L152_IO_ITStatus+0x28>
  {
    return MFXSTM32L152_ERROR;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	e02d      	b.n	8001878 <MFXSTM32L152_IO_ITStatus+0x84>
  }

  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2, &tmpreg[1], 1) != MFXSTM32L152_OK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f103 0018 	add.w	r0, r3, #24
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	2301      	movs	r3, #1
 800182a:	210d      	movs	r1, #13
 800182c:	f000 f9a7 	bl	8001b7e <mfxstm32l152_read_reg>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <MFXSTM32L152_IO_ITStatus+0x48>
  {
    return MFXSTM32L152_ERROR;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	e01d      	b.n	8001878 <MFXSTM32L152_IO_ITStatus+0x84>
  }

  if (mfxstm32l152_read_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3, &tmpreg[2], 1) != MFXSTM32L152_OK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f103 0018 	add.w	r0, r3, #24
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	1c9a      	adds	r2, r3, #2
 8001848:	2301      	movs	r3, #1
 800184a:	210e      	movs	r1, #14
 800184c:	f000 f997 	bl	8001b7e <mfxstm32l152_read_reg>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <MFXSTM32L152_IO_ITStatus+0x68>
  {
    return MFXSTM32L152_ERROR;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e00d      	b.n	8001878 <MFXSTM32L152_IO_ITStatus+0x84>
  }

  tmp = (uint32_t)tmpreg[0] + ((uint32_t)tmpreg[1] << 8) + ((uint32_t)tmpreg[2] << 16);
 800185c:	7a3b      	ldrb	r3, [r7, #8]
 800185e:	461a      	mov	r2, r3
 8001860:	7a7b      	ldrb	r3, [r7, #9]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	441a      	add	r2, r3
 8001866:	7abb      	ldrb	r3, [r7, #10]
 8001868:	041b      	lsls	r3, r3, #16
 800186a:	4413      	add	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  tmp &= IO_Pin;
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	4013      	ands	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]

  return (int32_t)tmp;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <MFXSTM32L152_IO_ClearIT>:
  * @param  IO_Pin the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval Component status
  */
int32_t MFXSTM32L152_IO_ClearIT(MFXSTM32L152_Object_t *pObj, uint32_t IO_Pin)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  /* normally this function is called under interrupt */
  uint8_t pin_0_7;
  uint8_t pin_8_15;
  uint8_t pin_16_23;

  pin_0_7   = (uint8_t)(IO_Pin & 0x0000ffU);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = (uint8_t)(IO_Pin >> 8);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	0a1b      	lsrs	r3, r3, #8
 8001894:	b2db      	uxtb	r3, r3
 8001896:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = (uint8_t)(pin_8_15 & 0x00ffU);
 8001898:	7bbb      	ldrb	r3, [r7, #14]
 800189a:	73bb      	strb	r3, [r7, #14]
  pin_16_23 = (uint8_t)(IO_Pin >> 16);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	0c1b      	lsrs	r3, r3, #16
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	737b      	strb	r3, [r7, #13]

  if (pin_0_7 != 0U)
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00e      	beq.n	80018c8 <MFXSTM32L152_IO_ClearIT+0x48>
  {
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, &pin_0_7, 1) != MFXSTM32L152_OK)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f103 0018 	add.w	r0, r3, #24
 80018b0:	f107 020f 	add.w	r2, r7, #15
 80018b4:	2301      	movs	r3, #1
 80018b6:	2154      	movs	r1, #84	@ 0x54
 80018b8:	f000 f978 	bl	8001bac <mfxstm32l152_write_reg>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <MFXSTM32L152_IO_ClearIT+0x48>
    {
      return MFXSTM32L152_ERROR;
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
 80018c6:	e024      	b.n	8001912 <MFXSTM32L152_IO_ClearIT+0x92>
    }
  }
  if (pin_8_15 != 0U)
 80018c8:	7bbb      	ldrb	r3, [r7, #14]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00e      	beq.n	80018ec <MFXSTM32L152_IO_ClearIT+0x6c>
  {
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, &pin_8_15, 1) != MFXSTM32L152_OK)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f103 0018 	add.w	r0, r3, #24
 80018d4:	f107 020e 	add.w	r2, r7, #14
 80018d8:	2301      	movs	r3, #1
 80018da:	2155      	movs	r1, #85	@ 0x55
 80018dc:	f000 f966 	bl	8001bac <mfxstm32l152_write_reg>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <MFXSTM32L152_IO_ClearIT+0x6c>
    {
      return MFXSTM32L152_ERROR;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	e012      	b.n	8001912 <MFXSTM32L152_IO_ClearIT+0x92>
    }
  }
  if (pin_16_23 != 0U)
 80018ec:	7b7b      	ldrb	r3, [r7, #13]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00e      	beq.n	8001910 <MFXSTM32L152_IO_ClearIT+0x90>
  {
    if (mfxstm32l152_write_reg(&pObj->Ctx, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, &pin_16_23, 1) != MFXSTM32L152_OK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f103 0018 	add.w	r0, r3, #24
 80018f8:	f107 020d 	add.w	r2, r7, #13
 80018fc:	2301      	movs	r3, #1
 80018fe:	2156      	movs	r1, #86	@ 0x56
 8001900:	f000 f954 	bl	8001bac <mfxstm32l152_write_reg>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <MFXSTM32L152_IO_ClearIT+0x90>
    {
      return MFXSTM32L152_ERROR;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
 800190e:	e000      	b.n	8001912 <MFXSTM32L152_IO_ClearIT+0x92>
    }
  }

  return MFXSTM32L152_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <MFXSTM32L152_RegisterBusIO>:
  * @brief  Register Bus Io to component
  * @param  Component object pointer
  * @retval Component status
  */
int32_t MFXSTM32L152_RegisterBusIO(MFXSTM32L152_Object_t *pObj, MFXSTM32L152_IO_t *pIO)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d103      	bne.n	8001934 <MFXSTM32L152_RegisterBusIO+0x18>
  {
    ret = MFXSTM32L152_ERROR;
 800192c:	f04f 33ff 	mov.w	r3, #4294967295
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	e02c      	b.n	800198e <MFXSTM32L152_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	891a      	ldrh	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	695a      	ldr	r2, [r3, #20]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = MFXSTM32L152_ReadRegWrap;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a0c      	ldr	r2, [pc, #48]	@ (8001998 <MFXSTM32L152_RegisterBusIO+0x7c>)
 8001968:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = MFXSTM32L152_WriteRegWrap;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a0b      	ldr	r2, [pc, #44]	@ (800199c <MFXSTM32L152_RegisterBusIO+0x80>)
 800196e:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d004      	beq.n	8001988 <MFXSTM32L152_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4798      	blx	r3
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	e002      	b.n	800198e <MFXSTM32L152_RegisterBusIO+0x72>
    }
    else
    {
      ret = MFXSTM32L152_ERROR;
 8001988:	f04f 33ff 	mov.w	r3, #4294967295
 800198c:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	08001b1b 	.word	0x08001b1b
 800199c:	08001b4d 	.word	0x08001b4d

080019a0 <MFXSTM32L152_reg24_setPinValue>:
  * @param  PinValue: 0/1
  * @retval Component status
  */
static int32_t MFXSTM32L152_reg24_setPinValue(MFXSTM32L152_Object_t *pObj, uint8_t RegisterAddr, uint32_t PinPosition,
                                              uint8_t PinValue)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	461a      	mov	r2, r3
 80019ac:	460b      	mov	r3, r1
 80019ae:	72fb      	strb	r3, [r7, #11]
 80019b0:	4613      	mov	r3, r2
 80019b2:	72bb      	strb	r3, [r7, #10]
  int32_t ret = MFXSTM32L152_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  uint8_t tmp;
  uint8_t pin_0_7;
  uint8_t pin_8_15;
  uint8_t pin_16_23;

  pin_0_7   = (uint8_t)(PinPosition & 0x0000ffU);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	74fb      	strb	r3, [r7, #19]
  pin_8_15  = (uint8_t)(PinPosition >> 8);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	0a1b      	lsrs	r3, r3, #8
 80019c0:	74bb      	strb	r3, [r7, #18]
  pin_8_15  = (uint8_t)(pin_8_15 & 0x00ffU);
  pin_16_23 = (uint8_t)(PinPosition >> 16);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	0c1b      	lsrs	r3, r3, #16
 80019c6:	747b      	strb	r3, [r7, #17]

  if (pin_0_7 != 0U)
 80019c8:	7cfb      	ldrb	r3, [r7, #19]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d02e      	beq.n	8001a2c <MFXSTM32L152_reg24_setPinValue+0x8c>
  {
    /* Get the current register value */
    ret += mfxstm32l152_read_reg(&pObj->Ctx, RegisterAddr, &tmp, 1);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f103 0018 	add.w	r0, r3, #24
 80019d4:	7afb      	ldrb	r3, [r7, #11]
 80019d6:	b299      	uxth	r1, r3
 80019d8:	f107 0210 	add.w	r2, r7, #16
 80019dc:	2301      	movs	r3, #1
 80019de:	f000 f8ce 	bl	8001b7e <mfxstm32l152_read_reg>
 80019e2:	4602      	mov	r2, r0
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	4413      	add	r3, r2
 80019e8:	617b      	str	r3, [r7, #20]

    /* Set the selected pin direction */
    if (PinValue != 0U)
 80019ea:	7abb      	ldrb	r3, [r7, #10]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <MFXSTM32L152_reg24_setPinValue+0x5c>
    {
      tmp |= (uint8_t)pin_0_7;
 80019f0:	7c3a      	ldrb	r2, [r7, #16]
 80019f2:	7cfb      	ldrb	r3, [r7, #19]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	743b      	strb	r3, [r7, #16]
 80019fa:	e009      	b.n	8001a10 <MFXSTM32L152_reg24_setPinValue+0x70>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 80019fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	b25a      	sxtb	r2, r3
 8001a04:	7c3b      	ldrb	r3, [r7, #16]
 8001a06:	b25b      	sxtb	r3, r3
 8001a08:	4013      	ands	r3, r2
 8001a0a:	b25b      	sxtb	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	743b      	strb	r3, [r7, #16]
    }

    /* Set the new register value */
    ret += mfxstm32l152_write_reg(&pObj->Ctx, RegisterAddr, &tmp, 1);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f103 0018 	add.w	r0, r3, #24
 8001a16:	7afb      	ldrb	r3, [r7, #11]
 8001a18:	b299      	uxth	r1, r3
 8001a1a:	f107 0210 	add.w	r2, r7, #16
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f000 f8c4 	bl	8001bac <mfxstm32l152_write_reg>
 8001a24:	4602      	mov	r2, r0
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	4413      	add	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]
  }

  if (pin_8_15 != 0U)
 8001a2c:	7cbb      	ldrb	r3, [r7, #18]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d032      	beq.n	8001a98 <MFXSTM32L152_reg24_setPinValue+0xf8>
  {
    /* Get the current register value */
    ret += mfxstm32l152_read_reg(&pObj->Ctx, ((uint16_t)RegisterAddr + 1U), &tmp, 1);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f103 0018 	add.w	r0, r3, #24
 8001a38:	7afb      	ldrb	r3, [r7, #11]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	b299      	uxth	r1, r3
 8001a40:	f107 0210 	add.w	r2, r7, #16
 8001a44:	2301      	movs	r3, #1
 8001a46:	f000 f89a 	bl	8001b7e <mfxstm32l152_read_reg>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	4413      	add	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]

    /* Set the selected pin direction */
    if (PinValue != 0U)
 8001a52:	7abb      	ldrb	r3, [r7, #10]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <MFXSTM32L152_reg24_setPinValue+0xc4>
    {
      tmp |= (uint8_t)pin_8_15;
 8001a58:	7c3a      	ldrb	r2, [r7, #16]
 8001a5a:	7cbb      	ldrb	r3, [r7, #18]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	743b      	strb	r3, [r7, #16]
 8001a62:	e009      	b.n	8001a78 <MFXSTM32L152_reg24_setPinValue+0xd8>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8001a64:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	b25a      	sxtb	r2, r3
 8001a6c:	7c3b      	ldrb	r3, [r7, #16]
 8001a6e:	b25b      	sxtb	r3, r3
 8001a70:	4013      	ands	r3, r2
 8001a72:	b25b      	sxtb	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	743b      	strb	r3, [r7, #16]
    }

    /* Set the new register value */
    ret += mfxstm32l152_write_reg(&pObj->Ctx, ((uint16_t)RegisterAddr + 1U), &tmp, 1);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f103 0018 	add.w	r0, r3, #24
 8001a7e:	7afb      	ldrb	r3, [r7, #11]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	b299      	uxth	r1, r3
 8001a86:	f107 0210 	add.w	r2, r7, #16
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f000 f88e 	bl	8001bac <mfxstm32l152_write_reg>
 8001a90:	4602      	mov	r2, r0
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	4413      	add	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]
  }

  if (pin_16_23 != 0U)
 8001a98:	7c7b      	ldrb	r3, [r7, #17]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d032      	beq.n	8001b04 <MFXSTM32L152_reg24_setPinValue+0x164>
  {
    /* Get the current register value */
    ret += mfxstm32l152_read_reg(&pObj->Ctx, ((uint16_t)RegisterAddr + 2U), &tmp, 1);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f103 0018 	add.w	r0, r3, #24
 8001aa4:	7afb      	ldrb	r3, [r7, #11]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	b299      	uxth	r1, r3
 8001aac:	f107 0210 	add.w	r2, r7, #16
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f000 f864 	bl	8001b7e <mfxstm32l152_read_reg>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	4413      	add	r3, r2
 8001abc:	617b      	str	r3, [r7, #20]

    /* Set the selected pin direction */
    if (PinValue != 0U)
 8001abe:	7abb      	ldrb	r3, [r7, #10]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <MFXSTM32L152_reg24_setPinValue+0x130>
    {
      tmp |= (uint8_t)pin_16_23;
 8001ac4:	7c3a      	ldrb	r2, [r7, #16]
 8001ac6:	7c7b      	ldrb	r3, [r7, #17]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	743b      	strb	r3, [r7, #16]
 8001ace:	e009      	b.n	8001ae4 <MFXSTM32L152_reg24_setPinValue+0x144>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8001ad0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	b25a      	sxtb	r2, r3
 8001ad8:	7c3b      	ldrb	r3, [r7, #16]
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	4013      	ands	r3, r2
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	743b      	strb	r3, [r7, #16]
    }

    /* Set the new register value */
    ret += mfxstm32l152_write_reg(&pObj->Ctx, ((uint16_t)RegisterAddr + 2U), &tmp, 1);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f103 0018 	add.w	r0, r3, #24
 8001aea:	7afb      	ldrb	r3, [r7, #11]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	3302      	adds	r3, #2
 8001af0:	b299      	uxth	r1, r3
 8001af2:	f107 0210 	add.w	r2, r7, #16
 8001af6:	2301      	movs	r3, #1
 8001af8:	f000 f858 	bl	8001bac <mfxstm32l152_write_reg>
 8001afc:	4602      	mov	r2, r0
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	4413      	add	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]
  }

  if (ret != MFXSTM32L152_OK)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <MFXSTM32L152_reg24_setPinValue+0x170>
  {
    ret = MFXSTM32L152_ERROR;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001b10:	697b      	ldr	r3, [r7, #20]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <MFXSTM32L152_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t MFXSTM32L152_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001b1a:	b590      	push	{r4, r7, lr}
 8001b1c:	b087      	sub	sp, #28
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	461a      	mov	r2, r3
 8001b26:	460b      	mov	r3, r1
 8001b28:	817b      	strh	r3, [r7, #10]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	813b      	strh	r3, [r7, #8]
  MFXSTM32L152_Object_t *pObj = (MFXSTM32L152_Object_t *)handle;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	691c      	ldr	r4, [r3, #16]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	8918      	ldrh	r0, [r3, #8]
 8001b3a:	893b      	ldrh	r3, [r7, #8]
 8001b3c:	8979      	ldrh	r1, [r7, #10]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	47a0      	blx	r4
 8001b42:	4603      	mov	r3, r0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd90      	pop	{r4, r7, pc}

08001b4c <MFXSTM32L152_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t MFXSTM32L152_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	461a      	mov	r2, r3
 8001b58:	460b      	mov	r3, r1
 8001b5a:	817b      	strh	r3, [r7, #10]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	813b      	strh	r3, [r7, #8]
  MFXSTM32L152_Object_t *pObj = (MFXSTM32L152_Object_t *)handle;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	68dc      	ldr	r4, [r3, #12]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	8918      	ldrh	r0, [r3, #8]
 8001b6c:	893b      	ldrh	r3, [r7, #8]
 8001b6e:	8979      	ldrh	r1, [r7, #10]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	47a0      	blx	r4
 8001b74:	4603      	mov	r3, r0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	371c      	adds	r7, #28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd90      	pop	{r4, r7, pc}

08001b7e <mfxstm32l152_read_reg>:
  *                 I2C or SPI reading functions
  * Input         : Register Address, length of buffer
  * Output        : Data Read
  *******************************************************************************/
int32_t mfxstm32l152_read_reg(mfxstm32l152_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8001b7e:	b590      	push	{r4, r7, lr}
 8001b80:	b085      	sub	sp, #20
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	817b      	strh	r3, [r7, #10]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, data, length);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	685c      	ldr	r4, [r3, #4]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6898      	ldr	r0, [r3, #8]
 8001b9a:	893b      	ldrh	r3, [r7, #8]
 8001b9c:	8979      	ldrh	r1, [r7, #10]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	47a0      	blx	r4
 8001ba2:	4603      	mov	r3, r0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd90      	pop	{r4, r7, pc}

08001bac <mfxstm32l152_write_reg>:
  *                 I2C or SPI writing function
  * Input         : Register Address, Data to be written, length of buffer
  * Output        : None
  *******************************************************************************/
int32_t mfxstm32l152_write_reg(mfxstm32l152_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	460b      	mov	r3, r1
 8001bba:	817b      	strh	r3, [r7, #10]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681c      	ldr	r4, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6898      	ldr	r0, [r3, #8]
 8001bc8:	893b      	ldrh	r3, [r7, #8]
 8001bca:	8979      	ldrh	r1, [r7, #10]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	47a0      	blx	r4
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd90      	pop	{r4, r7, pc}
	...

08001bdc <BSP_LED_Init>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08c      	sub	sp, #48	@ 0x30
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /* (USE_BSP_IO_CLASS > 0) */
  GPIO_InitTypeDef  gpio_init_structure;

  if (Led == LED1)
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d131      	bne.n	8001c54 <BSP_LED_Init+0x78>
  {
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 8001bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca8 <BSP_LED_Init+0xcc>)
 8001bf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8001ca8 <BSP_LED_Init+0xcc>)
 8001bf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bfc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001c00:	4b29      	ldr	r3, [pc, #164]	@ (8001ca8 <BSP_LED_Init+0xcc>)
 8001c02:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c16:	2302      	movs	r3, #2
 8001c18:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Pin = LED_PIN [Led];
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	4a23      	ldr	r2, [pc, #140]	@ (8001cac <BSP_LED_Init+0xd0>)
 8001c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c22:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	4a22      	ldr	r2, [pc, #136]	@ (8001cb0 <BSP_LED_Init+0xd4>)
 8001c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2c:	f107 020c 	add.w	r2, r7, #12
 8001c30:	4611      	mov	r1, r2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f002 fd08 	bl	8004648 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb0 <BSP_LED_Init+0xd4>)
 8001c3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	4a1a      	ldr	r2, [pc, #104]	@ (8001cac <BSP_LED_Init+0xd0>)
 8001c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f002 ffb5 	bl	8004bbc <HAL_GPIO_WritePin>
 8001c52:	e024      	b.n	8001c9e <BSP_LED_Init+0xc2>
  }
  else
  {
#if (USE_BSP_IO_CLASS > 0)

    io_init_structure.Pin  = LED_PIN[Led];
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	4a15      	ldr	r2, [pc, #84]	@ (8001cac <BSP_LED_Init+0xd0>)
 8001c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5c:	623b      	str	r3, [r7, #32]
    io_init_structure.Pull = IO_PULLUP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	62bb      	str	r3, [r7, #40]	@ 0x28
    io_init_structure.Mode = IO_MODE_OUTPUT_PP;
 8001c62:	2304      	movs	r3, #4
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Initialize IO expander */
    if (BSP_IO_Init(0, &io_init_structure) != BSP_ERROR_NONE)
 8001c66:	f107 0320 	add.w	r3, r7, #32
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f000 fd03 	bl	8002678 <BSP_IO_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <BSP_LED_Init+0xa4>
    {
      ret = BSP_ERROR_NO_INIT;
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c7e:	e00e      	b.n	8001c9e <BSP_LED_Init+0xc2>
    }
    else
    {
      if (BSP_IO_WritePin(0, LED_PIN[Led], IO_PIN_SET) != BSP_ERROR_NONE)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	4a0a      	ldr	r2, [pc, #40]	@ (8001cac <BSP_LED_Init+0xd0>)
 8001c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f000 fd53 	bl	8002738 <BSP_IO_WritePin>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <BSP_LED_Init+0xc2>
      {
        ret = BSP_ERROR_NO_INIT;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
    }
#endif /* (USE_BSP_IO_CLASS > 0) */
  }

  return ret;
 8001c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3730      	adds	r7, #48	@ 0x30
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	58024400 	.word	0x58024400
 8001cac:	08011508 	.word	0x08011508
 8001cb0:	2400002c 	.word	0x2400002c

08001cb4 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if (Led == LED1)
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10f      	bne.n	8001ce4 <BSP_LED_On+0x30>
  {
    HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8001d04 <BSP_LED_On+0x50>)
 8001cc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	4a0e      	ldr	r2, [pc, #56]	@ (8001d08 <BSP_LED_On+0x54>)
 8001cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f002 ff6f 	bl	8004bbc <HAL_GPIO_WritePin>
    ret = BSP_ERROR_NONE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	e009      	b.n	8001cf8 <BSP_LED_On+0x44>
  }
  else
  {
#if (USE_BSP_IO_CLASS > 0)
    ret = BSP_IO_WritePin(0, LED_PIN[Led], IO_PIN_RESET);
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	4a08      	ldr	r2, [pc, #32]	@ (8001d08 <BSP_LED_On+0x54>)
 8001ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cec:	2200      	movs	r2, #0
 8001cee:	4619      	mov	r1, r3
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f000 fd21 	bl	8002738 <BSP_IO_WritePin>
 8001cf6:	60f8      	str	r0, [r7, #12]
#else
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
#endif /* (USE_BSP_IO_CLASS > 0) */
  }
  return ret;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2400002c 	.word	0x2400002c
 8001d08:	08011508 	.word	0x08011508

08001d0c <BSP_LED_Toggle>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  if (Led == LED1)
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10f      	bne.n	8001d3c <BSP_LED_Toggle+0x30>
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d58 <BSP_LED_Toggle+0x4c>)
 8001d20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	490d      	ldr	r1, [pc, #52]	@ (8001d5c <BSP_LED_Toggle+0x50>)
 8001d28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4610      	mov	r0, r2
 8001d32:	f002 ff5c 	bl	8004bee <HAL_GPIO_TogglePin>
    ret = BSP_ERROR_NONE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	e008      	b.n	8001d4e <BSP_LED_Toggle+0x42>
  }
  else
  {
#if (USE_BSP_IO_CLASS > 0)
    ret = BSP_IO_TogglePin(0, LED_PIN[Led]);
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	4a07      	ldr	r2, [pc, #28]	@ (8001d5c <BSP_LED_Toggle+0x50>)
 8001d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d44:	4619      	mov	r1, r3
 8001d46:	2000      	movs	r0, #0
 8001d48:	f000 fd28 	bl	800279c <BSP_IO_TogglePin>
 8001d4c:	60f8      	str	r0, [r7, #12]
#else
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
#endif /* (USE_BSP_IO_CLASS > 0) */
  }
  return ret;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	2400002c 	.word	0x2400002c
 8001d5c:	08011508 	.word	0x08011508

08001d60 <BSP_I2C2_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 8001d6a:	4b16      	ldr	r3, [pc, #88]	@ (8001dc4 <BSP_I2C2_Init+0x64>)
 8001d6c:	4a16      	ldr	r2, [pc, #88]	@ (8001dc8 <BSP_I2C2_Init+0x68>)
 8001d6e:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 8001d70:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <BSP_I2C2_Init+0x6c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d11f      	bne.n	8001db8 <BSP_I2C2_Init+0x58>
  {
    I2c2InitCounter++;
 8001d78:	4b14      	ldr	r3, [pc, #80]	@ (8001dcc <BSP_I2C2_Init+0x6c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	4a13      	ldr	r2, [pc, #76]	@ (8001dcc <BSP_I2C2_Init+0x6c>)
 8001d80:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 8001d82:	4810      	ldr	r0, [pc, #64]	@ (8001dc4 <BSP_I2C2_Init+0x64>)
 8001d84:	f005 fb70 	bl	8007468 <HAL_I2C_GetState>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d114      	bne.n	8001db8 <BSP_I2C2_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C2 Msp */
      I2C2_MspInit(&hbus_i2c2);
 8001d8e:	480d      	ldr	r0, [pc, #52]	@ (8001dc4 <BSP_I2C2_Init+0x64>)
 8001d90:	f000 fb60 	bl	8002454 <I2C2_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C2_FREQUENCY)) != HAL_OK)
 8001d94:	f006 fe7e 	bl	8008a94 <HAL_RCC_GetPCLK1Freq>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	490d      	ldr	r1, [pc, #52]	@ (8001dd0 <BSP_I2C2_Init+0x70>)
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 f8e3 	bl	8001f68 <I2C_GetTiming>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4619      	mov	r1, r3
 8001da6:	4807      	ldr	r0, [pc, #28]	@ (8001dc4 <BSP_I2C2_Init+0x64>)
 8001da8:	f000 f838 	bl	8001e1c <MX_I2C2_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <BSP_I2C2_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001db2:	f06f 0307 	mvn.w	r3, #7
 8001db6:	607b      	str	r3, [r7, #4]
    }
#endif
  }
}

return ret;
 8001db8:	687b      	ldr	r3, [r7, #4]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	24001310 	.word	0x24001310
 8001dc8:	40005800 	.word	0x40005800
 8001dcc:	24000908 	.word	0x24000908
 8001dd0:	000186a0 	.word	0x000186a0

08001dd4 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]

  I2c2InitCounter--;
 8001dde:	4b0d      	ldr	r3, [pc, #52]	@ (8001e14 <BSP_I2C2_DeInit+0x40>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	4a0b      	ldr	r2, [pc, #44]	@ (8001e14 <BSP_I2C2_DeInit+0x40>)
 8001de6:	6013      	str	r3, [r2, #0]

  if (I2c2InitCounter == 0U)
 8001de8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <BSP_I2C2_DeInit+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10b      	bne.n	8001e08 <BSP_I2C2_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C2_MspDeInit(&hbus_i2c2);
 8001df0:	4809      	ldr	r0, [pc, #36]	@ (8001e18 <BSP_I2C2_DeInit+0x44>)
 8001df2:	f000 fb99 	bl	8002528 <I2C2_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 8001df6:	4808      	ldr	r0, [pc, #32]	@ (8001e18 <BSP_I2C2_DeInit+0x44>)
 8001df8:	f005 f8c4 	bl	8006f84 <HAL_I2C_DeInit>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <BSP_I2C2_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8001e02:	f06f 0307 	mvn.w	r3, #7
 8001e06:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8001e08:	687b      	ldr	r3, [r7, #4]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	24000908 	.word	0x24000908
 8001e18:	24001310 	.word	0x24001310

08001e1c <MX_I2C2_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f004 fff6 	bl	8006e4c <HAL_I2C_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <MX_I2C2_Init+0x50>
  {
    status = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
 8001e6a:	e014      	b.n	8001e96 <MX_I2C2_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f005 fdd4 	bl	8007a20 <HAL_I2CEx_ConfigAnalogFilter>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <MX_I2C2_Init+0x68>
    {
      status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	73fb      	strb	r3, [r7, #15]
 8001e82:	e008      	b.n	8001e96 <MX_I2C2_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8001e84:	2100      	movs	r1, #0
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f005 fe15 	bl	8007ab6 <HAL_I2CEx_ConfigDigitalFilter>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_I2C2_Init+0x7a>
      {
        status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <BSP_I2C2_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	60ba      	str	r2, [r7, #8]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4603      	mov	r3, r0
 8001eac:	81fb      	strh	r3, [r7, #14]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	81bb      	strh	r3, [r7, #12]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if (I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8001eb6:	89b9      	ldrh	r1, [r7, #12]
 8001eb8:	89f8      	ldrh	r0, [r7, #14]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f000 fb53 	bl	800256c <I2C2_WriteReg>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <BSP_I2C2_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	e00c      	b.n	8001eec <BSP_I2C2_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8001ed2:	4809      	ldr	r0, [pc, #36]	@ (8001ef8 <BSP_I2C2_WriteReg+0x58>)
 8001ed4:	f005 fad6 	bl	8007484 <HAL_I2C_GetError>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d103      	bne.n	8001ee6 <BSP_I2C2_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001ede:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	e002      	b.n	8001eec <BSP_I2C2_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001ee6:	f06f 0303 	mvn.w	r3, #3
 8001eea:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8001eec:	697b      	ldr	r3, [r7, #20]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	24001310 	.word	0x24001310

08001efc <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af02      	add	r7, sp, #8
 8001f02:	60ba      	str	r2, [r7, #8]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4603      	mov	r3, r0
 8001f08:	81fb      	strh	r3, [r7, #14]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	81bb      	strh	r3, [r7, #12]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if (I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8001f12:	89b9      	ldrh	r1, [r7, #12]
 8001f14:	89f8      	ldrh	r0, [r7, #14]
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f000 fb4b 	bl	80025b8 <I2C2_ReadReg>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d102      	bne.n	8001f2e <BSP_I2C2_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	e00c      	b.n	8001f48 <BSP_I2C2_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8001f2e:	4809      	ldr	r0, [pc, #36]	@ (8001f54 <BSP_I2C2_ReadReg+0x58>)
 8001f30:	f005 faa8 	bl	8007484 <HAL_I2C_GetError>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d103      	bne.n	8001f42 <BSP_I2C2_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001f3a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	e002      	b.n	8001f48 <BSP_I2C2_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001f42:	f06f 0303 	mvn.w	r3, #3
 8001f46:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8001f48:	697b      	ldr	r3, [r7, #20]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	24001310 	.word	0x24001310

08001f58 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8001f5c:	f002 f988 	bl	8004270 <HAL_GetTick>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d06b      	beq.n	8002054 <I2C_GetTiming+0xec>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d068      	beq.n	8002054 <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	e060      	b.n	800204a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8001f88:	4a35      	ldr	r2, [pc, #212]	@ (8002060 <I2C_GetTiming+0xf8>)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	212c      	movs	r1, #44	@ 0x2c
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	3304      	adds	r3, #4
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d352      	bcc.n	8002044 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8001f9e:	4a30      	ldr	r2, [pc, #192]	@ (8002060 <I2C_GetTiming+0xf8>)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	212c      	movs	r1, #44	@ 0x2c
 8001fa4:	fb01 f303 	mul.w	r3, r1, r3
 8001fa8:	4413      	add	r3, r2
 8001faa:	3308      	adds	r3, #8
 8001fac:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d847      	bhi.n	8002044 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8001fb4:	6939      	ldr	r1, [r7, #16]
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f856 	bl	8002068 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8001fbc:	6939      	ldr	r1, [r7, #16]
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f940 	bl	8002244 <I2C_Compute_SCLL_SCLH>
 8001fc4:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fca:	d842      	bhi.n	8002052 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8001fcc:	4925      	ldr	r1, [pc, #148]	@ (8002064 <I2C_GetTiming+0xfc>)
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8001fde:	4821      	ldr	r0, [pc, #132]	@ (8002064 <I2C_GetTiming+0xfc>)
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4403      	add	r3, r0
 8001fec:	3304      	adds	r3, #4
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	051b      	lsls	r3, r3, #20
 8001ff2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8001ff6:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8001ff8:	481a      	ldr	r0, [pc, #104]	@ (8002064 <I2C_GetTiming+0xfc>)
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4403      	add	r3, r0
 8002006:	3308      	adds	r3, #8
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	041b      	lsls	r3, r3, #16
 800200c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8002010:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 8002012:	4814      	ldr	r0, [pc, #80]	@ (8002064 <I2C_GetTiming+0xfc>)
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4403      	add	r3, r0
 8002020:	330c      	adds	r3, #12
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8002028:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800202a:	480e      	ldr	r0, [pc, #56]	@ (8002064 <I2C_GetTiming+0xfc>)
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4403      	add	r3, r0
 8002038:	3310      	adds	r3, #16
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 800203e:	430b      	orrs	r3, r1
 8002040:	617b      	str	r3, [r7, #20]
        }
        break;
 8002042:	e006      	b.n	8002052 <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	3301      	adds	r3, #1
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d99b      	bls.n	8001f88 <I2C_GetTiming+0x20>
 8002050:	e000      	b.n	8002054 <I2C_GetTiming+0xec>
        break;
 8002052:	bf00      	nop
      }
    }
  }

  return ret;
 8002054:	697b      	ldr	r3, [r7, #20]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	08011518 	.word	0x08011518
 8002064:	2400090c 	.word	0x2400090c

08002068 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002068:	b480      	push	{r7}
 800206a:	b08f      	sub	sp, #60	@ 0x3c
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8002072:	2310      	movs	r3, #16
 8002074:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	085a      	lsrs	r2, r3, #1
 800207a:	4b6e      	ldr	r3, [pc, #440]	@ (8002234 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800207c:	4413      	add	r3, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	fbb3 f3f2 	udiv	r3, r3, r2
 8002084:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002086:	2332      	movs	r3, #50	@ 0x32
 8002088:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800208a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800208e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002090:	4a69      	ldr	r2, [pc, #420]	@ (8002238 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	212c      	movs	r1, #44	@ 0x2c
 8002096:	fb01 f303 	mul.w	r3, r1, r3
 800209a:	4413      	add	r3, r2
 800209c:	3324      	adds	r3, #36	@ 0x24
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	4a65      	ldr	r2, [pc, #404]	@ (8002238 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	212c      	movs	r1, #44	@ 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	330c      	adds	r3, #12
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80020b4:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80020b6:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80020b8:	495f      	ldr	r1, [pc, #380]	@ (8002238 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	202c      	movs	r0, #44	@ 0x2c
 80020be:	fb00 f303 	mul.w	r3, r0, r3
 80020c2:	440b      	add	r3, r1
 80020c4:	3328      	adds	r3, #40	@ 0x28
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	3303      	adds	r3, #3
 80020ca:	69f9      	ldr	r1, [r7, #28]
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80020d4:	4a58      	ldr	r2, [pc, #352]	@ (8002238 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	212c      	movs	r1, #44	@ 0x2c
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4413      	add	r3, r2
 80020e0:	3310      	adds	r3, #16
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	4a54      	ldr	r2, [pc, #336]	@ (8002238 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	212c      	movs	r1, #44	@ 0x2c
 80020ec:	fb01 f303 	mul.w	r3, r1, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	3320      	adds	r3, #32
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80020f8:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80020fa:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80020fc:	494e      	ldr	r1, [pc, #312]	@ (8002238 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	202c      	movs	r0, #44	@ 0x2c
 8002102:	fb00 f303 	mul.w	r3, r0, r3
 8002106:	440b      	add	r3, r1
 8002108:	3328      	adds	r3, #40	@ 0x28
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	3304      	adds	r3, #4
 800210e:	69f9      	ldr	r1, [r7, #28]
 8002110:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8002118:	4a47      	ldr	r2, [pc, #284]	@ (8002238 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	212c      	movs	r1, #44	@ 0x2c
 800211e:	fb01 f303 	mul.w	r3, r1, r3
 8002122:	4413      	add	r3, r2
 8002124:	3320      	adds	r3, #32
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	4a43      	ldr	r2, [pc, #268]	@ (8002238 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	212c      	movs	r1, #44	@ 0x2c
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4413      	add	r3, r2
 8002136:	3314      	adds	r3, #20
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4403      	add	r3, r0
 800213c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800213e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002140:	2b00      	cmp	r3, #0
 8002142:	dc01      	bgt.n	8002148 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 8002148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800214a:	2b00      	cmp	r3, #0
 800214c:	dc01      	bgt.n	8002152 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002152:	2300      	movs	r3, #0
 8002154:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002156:	e062      	b.n	800221e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002158:	2300      	movs	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
 800215c:	e059      	b.n	8002212 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	3301      	adds	r3, #1
 8002162:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002164:	3201      	adds	r2, #1
 8002166:	fb03 f202 	mul.w	r2, r3, r2
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fb02 f303 	mul.w	r3, r2, r3
 8002170:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	429a      	cmp	r2, r3
 8002178:	d348      	bcc.n	800220c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800217a:	2300      	movs	r3, #0
 800217c:	623b      	str	r3, [r7, #32]
 800217e:	e042      	b.n	8002206 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8002180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002182:	3301      	adds	r3, #1
 8002184:	6a3a      	ldr	r2, [r7, #32]
 8002186:	fb03 f202 	mul.w	r2, r3, r2
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fb02 f303 	mul.w	r3, r2, r3
 8002190:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8002192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	429a      	cmp	r2, r3
 8002198:	d332      	bcc.n	8002200 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800219a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d82e      	bhi.n	8002200 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 80021a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d02a      	beq.n	8002200 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80021aa:	4b24      	ldr	r3, [pc, #144]	@ (800223c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	4924      	ldr	r1, [pc, #144]	@ (8002240 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021bc:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80021be:	4b1f      	ldr	r3, [pc, #124]	@ (800223c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	491f      	ldr	r1, [pc, #124]	@ (8002240 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	3304      	adds	r3, #4
 80021d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021d2:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80021d4:	4b19      	ldr	r3, [pc, #100]	@ (800223c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4919      	ldr	r1, [pc, #100]	@ (8002240 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	3308      	adds	r3, #8
 80021e6:	6a3a      	ldr	r2, [r7, #32]
 80021e8:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80021ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ec:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 80021ee:	4b13      	ldr	r3, [pc, #76]	@ (800223c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	3301      	adds	r3, #1
 80021f4:	4a11      	ldr	r2, [pc, #68]	@ (800223c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80021f6:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80021f8:	4b10      	ldr	r3, [pc, #64]	@ (800223c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80021fe:	d812      	bhi.n	8002226 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	3301      	adds	r3, #1
 8002204:	623b      	str	r3, [r7, #32]
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	2b0f      	cmp	r3, #15
 800220a:	d9b9      	bls.n	8002180 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	3301      	adds	r3, #1
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	2b0f      	cmp	r3, #15
 8002216:	d9a2      	bls.n	800215e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221a:	3301      	adds	r3, #1
 800221c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800221e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002220:	2b0f      	cmp	r3, #15
 8002222:	d999      	bls.n	8002158 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8002224:	e000      	b.n	8002228 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8002226:	bf00      	nop
          }
        }
      }
    }
  }
}
 8002228:	373c      	adds	r7, #60	@ 0x3c
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	3b9aca00 	.word	0x3b9aca00
 8002238:	08011518 	.word	0x08011518
 800223c:	2400130c 	.word	0x2400130c
 8002240:	2400090c 	.word	0x2400090c

08002244 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002244:	b480      	push	{r7}
 8002246:	b093      	sub	sp, #76	@ 0x4c
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 800224e:	f04f 33ff 	mov.w	r3, #4294967295
 8002252:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	085a      	lsrs	r2, r3, #1
 8002258:	4b7a      	ldr	r3, [pc, #488]	@ (8002444 <I2C_Compute_SCLL_SCLH+0x200>)
 800225a:	4413      	add	r3, r2
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 8002264:	4a78      	ldr	r2, [pc, #480]	@ (8002448 <I2C_Compute_SCLL_SCLH+0x204>)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	212c      	movs	r1, #44	@ 0x2c
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	085a      	lsrs	r2, r3, #1
 8002274:	4b73      	ldr	r3, [pc, #460]	@ (8002444 <I2C_Compute_SCLL_SCLH+0x200>)
 8002276:	4413      	add	r3, r2
 8002278:	4973      	ldr	r1, [pc, #460]	@ (8002448 <I2C_Compute_SCLL_SCLH+0x204>)
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	202c      	movs	r0, #44	@ 0x2c
 800227e:	fb00 f202 	mul.w	r2, r0, r2
 8002282:	440a      	add	r2, r1
 8002284:	6812      	ldr	r2, [r2, #0]
 8002286:	fbb3 f3f2 	udiv	r3, r3, r2
 800228a:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800228c:	2332      	movs	r3, #50	@ 0x32
 800228e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8002290:	4a6d      	ldr	r2, [pc, #436]	@ (8002448 <I2C_Compute_SCLL_SCLH+0x204>)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	212c      	movs	r1, #44	@ 0x2c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	3328      	adds	r3, #40	@ 0x28
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a2:	fb02 f303 	mul.w	r3, r2, r3
 80022a6:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80022a8:	4a67      	ldr	r2, [pc, #412]	@ (8002448 <I2C_Compute_SCLL_SCLH+0x204>)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	212c      	movs	r1, #44	@ 0x2c
 80022ae:	fb01 f303 	mul.w	r3, r1, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	3304      	adds	r3, #4
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a62      	ldr	r2, [pc, #392]	@ (8002444 <I2C_Compute_SCLL_SCLH+0x200>)
 80022ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80022be:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80022c0:	4a61      	ldr	r2, [pc, #388]	@ (8002448 <I2C_Compute_SCLL_SCLH+0x204>)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	212c      	movs	r1, #44	@ 0x2c
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	3308      	adds	r3, #8
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a5c      	ldr	r2, [pc, #368]	@ (8002444 <I2C_Compute_SCLL_SCLH+0x200>)
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80022d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022da:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80022dc:	2300      	movs	r3, #0
 80022de:	637b      	str	r3, [r7, #52]	@ 0x34
 80022e0:	e0a3      	b.n	800242a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80022e2:	495a      	ldr	r1, [pc, #360]	@ (800244c <I2C_Compute_SCLL_SCLH+0x208>)
 80022e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80022fc:	2300      	movs	r3, #0
 80022fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002300:	e08c      	b.n	800241c <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8002302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	441a      	add	r2, r3
 8002308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800230a:	3301      	adds	r3, #1
 800230c:	6979      	ldr	r1, [r7, #20]
 800230e:	fb03 f101 	mul.w	r1, r3, r1
 8002312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	440b      	add	r3, r1
 8002318:	4413      	add	r3, r2
 800231a:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800231c:	4a4a      	ldr	r2, [pc, #296]	@ (8002448 <I2C_Compute_SCLL_SCLH+0x204>)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	212c      	movs	r1, #44	@ 0x2c
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	3318      	adds	r3, #24
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	429a      	cmp	r2, r3
 8002330:	d971      	bls.n	8002416 <I2C_Compute_SCLL_SCLH+0x1d2>
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002336:	1ad2      	subs	r2, r2, r3
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	089b      	lsrs	r3, r3, #2
 800233e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002340:	429a      	cmp	r2, r3
 8002342:	d268      	bcs.n	8002416 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002344:	2300      	movs	r3, #0
 8002346:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002348:	e062      	b.n	8002410 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800234a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	441a      	add	r2, r3
 8002350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002352:	3301      	adds	r3, #1
 8002354:	6979      	ldr	r1, [r7, #20]
 8002356:	fb03 f101 	mul.w	r1, r3, r1
 800235a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	440b      	add	r3, r1
 8002360:	4413      	add	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	441a      	add	r2, r3
 800236a:	4937      	ldr	r1, [pc, #220]	@ (8002448 <I2C_Compute_SCLL_SCLH+0x204>)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	202c      	movs	r0, #44	@ 0x2c
 8002370:	fb00 f303 	mul.w	r3, r0, r3
 8002374:	440b      	add	r3, r1
 8002376:	3320      	adds	r3, #32
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	441a      	add	r2, r3
 800237c:	4932      	ldr	r1, [pc, #200]	@ (8002448 <I2C_Compute_SCLL_SCLH+0x204>)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	202c      	movs	r0, #44	@ 0x2c
 8002382:	fb00 f303 	mul.w	r3, r0, r3
 8002386:	440b      	add	r3, r1
 8002388:	3324      	adds	r3, #36	@ 0x24
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4413      	add	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	429a      	cmp	r2, r3
 8002396:	d338      	bcc.n	800240a <I2C_Compute_SCLL_SCLH+0x1c6>
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	429a      	cmp	r2, r3
 800239e:	d834      	bhi.n	800240a <I2C_Compute_SCLL_SCLH+0x1c6>
 80023a0:	4a29      	ldr	r2, [pc, #164]	@ (8002448 <I2C_Compute_SCLL_SCLH+0x204>)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	212c      	movs	r1, #44	@ 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	331c      	adds	r3, #28
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d329      	bcc.n	800240a <I2C_Compute_SCLL_SCLH+0x1c6>
 80023b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d225      	bcs.n	800240a <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 80023c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	da02      	bge.n	80023d2 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80023cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ce:	425b      	negs	r3, r3
 80023d0:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80023d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d917      	bls.n	800240a <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80023da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023dc:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 80023de:	491b      	ldr	r1, [pc, #108]	@ (800244c <I2C_Compute_SCLL_SCLH+0x208>)
 80023e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	3310      	adds	r3, #16
 80023ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023f0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80023f2:	4916      	ldr	r1, [pc, #88]	@ (800244c <I2C_Compute_SCLL_SCLH+0x208>)
 80023f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	330c      	adds	r3, #12
 8002402:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002404:	601a      	str	r2, [r3, #0]
              ret = count;
 8002406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002408:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800240a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800240c:	3301      	adds	r3, #1
 800240e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002412:	2bff      	cmp	r3, #255	@ 0xff
 8002414:	d999      	bls.n	800234a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002418:	3301      	adds	r3, #1
 800241a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800241c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800241e:	2bff      	cmp	r3, #255	@ 0xff
 8002420:	f67f af6f 	bls.w	8002302 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002426:	3301      	adds	r3, #1
 8002428:	637b      	str	r3, [r7, #52]	@ 0x34
 800242a:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <I2C_Compute_SCLL_SCLH+0x20c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002430:	429a      	cmp	r2, r3
 8002432:	f4ff af56 	bcc.w	80022e2 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8002436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8002438:	4618      	mov	r0, r3
 800243a:	374c      	adds	r7, #76	@ 0x4c
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	3b9aca00 	.word	0x3b9aca00
 8002448:	08011518 	.word	0x08011518
 800244c:	2400090c 	.word	0x2400090c
 8002450:	2400130c 	.word	0x2400130c

08002454 <I2C2_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hI2c)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	@ 0x28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 800245c:	4b30      	ldr	r3, [pc, #192]	@ (8002520 <I2C2_MspInit+0xcc>)
 800245e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002462:	4a2f      	ldr	r2, [pc, #188]	@ (8002520 <I2C2_MspInit+0xcc>)
 8002464:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002468:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800246c:	4b2c      	ldr	r3, [pc, #176]	@ (8002520 <I2C2_MspInit+0xcc>)
 800246e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 800247a:	4b29      	ldr	r3, [pc, #164]	@ (8002520 <I2C2_MspInit+0xcc>)
 800247c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002480:	4a27      	ldr	r2, [pc, #156]	@ (8002520 <I2C2_MspInit+0xcc>)
 8002482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002486:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800248a:	4b25      	ldr	r3, [pc, #148]	@ (8002520 <I2C2_MspInit+0xcc>)
 800248c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SCL_PIN;
 8002498:	2310      	movs	r3, #16
 800249a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 800249c:	2312      	movs	r3, #18
 800249e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80024a4:	2302      	movs	r3, #2
 80024a6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C2_SCL_AF;
 80024a8:	2304      	movs	r3, #4
 80024aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	4619      	mov	r1, r3
 80024b2:	481c      	ldr	r0, [pc, #112]	@ (8002524 <I2C2_MspInit+0xd0>)
 80024b4:	f002 f8c8 	bl	8004648 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SDA_PIN;
 80024b8:	2320      	movs	r3, #32
 80024ba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 80024bc:	2312      	movs	r3, #18
 80024be:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80024c4:	2302      	movs	r3, #2
 80024c6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C2_SDA_AF;
 80024c8:	2304      	movs	r3, #4
 80024ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	4619      	mov	r1, r3
 80024d2:	4814      	ldr	r0, [pc, #80]	@ (8002524 <I2C2_MspInit+0xd0>)
 80024d4:	f002 f8b8 	bl	8004648 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 80024d8:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <I2C2_MspInit+0xcc>)
 80024da:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80024de:	4a10      	ldr	r2, [pc, #64]	@ (8002520 <I2C2_MspInit+0xcc>)
 80024e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024e4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80024e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002520 <I2C2_MspInit+0xcc>)
 80024ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80024ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 80024f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002520 <I2C2_MspInit+0xcc>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024fc:	4a08      	ldr	r2, [pc, #32]	@ (8002520 <I2C2_MspInit+0xcc>)
 80024fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002502:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 8002506:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <I2C2_MspInit+0xcc>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800250c:	4a04      	ldr	r2, [pc, #16]	@ (8002520 <I2C2_MspInit+0xcc>)
 800250e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002516:	bf00      	nop
 8002518:	3728      	adds	r7, #40	@ 0x28
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	58024400 	.word	0x58024400
 8002524:	58021c00 	.word	0x58021c00

08002528 <I2C2_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C2_SCL_PIN;
 8002530:	2310      	movs	r3, #16
 8002532:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, gpio_init_structure.Pin);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4619      	mov	r1, r3
 8002538:	480a      	ldr	r0, [pc, #40]	@ (8002564 <I2C2_MspDeInit+0x3c>)
 800253a:	f002 fa35 	bl	80049a8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C2_SDA_PIN;
 800253e:	2320      	movs	r3, #32
 8002540:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4619      	mov	r1, r3
 8002546:	4807      	ldr	r0, [pc, #28]	@ (8002564 <I2C2_MspDeInit+0x3c>)
 8002548:	f002 fa2e 	bl	80049a8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 800254c:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <I2C2_MspDeInit+0x40>)
 800254e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002552:	4a05      	ldr	r2, [pc, #20]	@ (8002568 <I2C2_MspDeInit+0x40>)
 8002554:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002558:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
}
 800255c:	bf00      	nop
 800255e:	3720      	adds	r7, #32
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	58021c00 	.word	0x58021c00
 8002568:	58024400 	.word	0x58024400

0800256c <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af04      	add	r7, sp, #16
 8002572:	607b      	str	r3, [r7, #4]
 8002574:	4603      	mov	r3, r0
 8002576:	81fb      	strh	r3, [r7, #14]
 8002578:	460b      	mov	r3, r1
 800257a:	81bb      	strh	r3, [r7, #12]
 800257c:	4613      	mov	r3, r2
 800257e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8002580:	8978      	ldrh	r0, [r7, #10]
 8002582:	89ba      	ldrh	r2, [r7, #12]
 8002584:	89f9      	ldrh	r1, [r7, #14]
 8002586:	f242 7310 	movw	r3, #10000	@ 0x2710
 800258a:	9302      	str	r3, [sp, #8]
 800258c:	8b3b      	ldrh	r3, [r7, #24]
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	4603      	mov	r3, r0
 8002596:	4807      	ldr	r0, [pc, #28]	@ (80025b4 <I2C2_WriteReg+0x48>)
 8002598:	f004 fd38 	bl	800700c <HAL_I2C_Mem_Write>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <I2C2_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e001      	b.n	80025aa <I2C2_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80025a6:	f06f 0307 	mvn.w	r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	24001310 	.word	0x24001310

080025b8 <I2C2_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af04      	add	r7, sp, #16
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	4603      	mov	r3, r0
 80025c2:	81fb      	strh	r3, [r7, #14]
 80025c4:	460b      	mov	r3, r1
 80025c6:	81bb      	strh	r3, [r7, #12]
 80025c8:	4613      	mov	r3, r2
 80025ca:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80025cc:	8978      	ldrh	r0, [r7, #10]
 80025ce:	89ba      	ldrh	r2, [r7, #12]
 80025d0:	89f9      	ldrh	r1, [r7, #14]
 80025d2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80025d6:	9302      	str	r3, [sp, #8]
 80025d8:	8b3b      	ldrh	r3, [r7, #24]
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	4603      	mov	r3, r0
 80025e2:	4807      	ldr	r0, [pc, #28]	@ (8002600 <I2C2_ReadReg+0x48>)
 80025e4:	f004 fe26 	bl	8007234 <HAL_I2C_Mem_Read>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <I2C2_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	e001      	b.n	80025f6 <I2C2_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80025f2:	f06f 0307 	mvn.w	r3, #7
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	24001310 	.word	0x24001310

08002604 <BSP_IOEXPANDER_Init>:
  * @param  Function to be initialized. Could be IOEXPANDER_IO_MODE
  * @note   IOEXPANDER_IDD_MODE and IOEXPANDER_TS_MODE are not used on STM32H7B3I_EVAL board
  * @retval BSP status
  */
int32_t BSP_IOEXPANDER_Init(uint32_t Instance, uint32_t Function)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]

  if ((Instance >= IOEXPANDER_INSTANCES_NBR) || (Function != IOEXPANDER_IO_MODE))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d102      	bne.n	800261e <BSP_IOEXPANDER_Init+0x1a>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d003      	beq.n	8002626 <BSP_IOEXPANDER_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800261e:	f06f 0301 	mvn.w	r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	e01d      	b.n	8002662 <BSP_IOEXPANDER_Init+0x5e>
  }
  else
  {
    if (IO_Ctx[Instance].IsInitialized == 0U)
 8002626:	4a11      	ldr	r2, [pc, #68]	@ (800266c <BSP_IOEXPANDER_Init+0x68>)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10e      	bne.n	8002650 <BSP_IOEXPANDER_Init+0x4c>
    {
      if (MFXSTM32L152_Probe(Instance) != BSP_ERROR_NONE)
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f962 	bl	80028fc <MFXSTM32L152_Probe>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <BSP_IOEXPANDER_Init+0x42>
      {
        ret = BSP_ERROR_NO_INIT;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	e004      	b.n	8002650 <BSP_IOEXPANDER_Init+0x4c>
      }
      else
      {
        IO_Ctx[Instance].IsInitialized = 1;
 8002646:	4a09      	ldr	r2, [pc, #36]	@ (800266c <BSP_IOEXPANDER_Init+0x68>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2101      	movs	r1, #1
 800264c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
      }
    }

    if (IO_Ctx[Instance].IsInitialized == 1U)
 8002650:	4a06      	ldr	r2, [pc, #24]	@ (800266c <BSP_IOEXPANDER_Init+0x68>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d102      	bne.n	8002662 <BSP_IOEXPANDER_Init+0x5e>
    {
      Io_Drv = (IO_Drv_t *) &MFXSTM32L152_IO_Driver;
 800265c:	4b04      	ldr	r3, [pc, #16]	@ (8002670 <BSP_IOEXPANDER_Init+0x6c>)
 800265e:	4a05      	ldr	r2, [pc, #20]	@ (8002674 <BSP_IOEXPANDER_Init+0x70>)
 8002660:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 8002662:	68fb      	ldr	r3, [r7, #12]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	24001364 	.word	0x24001364
 8002670:	2400139c 	.word	0x2400139c
 8002674:	24000000 	.word	0x24000000

08002678 <BSP_IO_Init>:
  * @param  Init     pointer to a BSP_IO_Init_t structure that contains
  *         the configuration information for the specified IO pin.
  * @retval BSP status
  */
int32_t BSP_IO_Init(uint32_t Instance, BSP_IO_Init_t *Init)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]

  if ((Instance >= IOEXPANDER_INSTANCES_NBR) || (Init == NULL))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <BSP_IO_Init+0x1a>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d103      	bne.n	800269a <BSP_IO_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002692:	f06f 0301 	mvn.w	r3, #1
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	e042      	b.n	8002720 <BSP_IO_Init+0xa8>
  }
  else
  {
    if ((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE)
 800269a:	4a24      	ldr	r2, [pc, #144]	@ (800272c <BSP_IO_Init+0xb4>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d124      	bne.n	80026f6 <BSP_IO_Init+0x7e>
    {
      if (BSP_IOEXPANDER_Init(Instance, IOEXPANDER_IO_MODE) != BSP_ERROR_NONE)
 80026ac:	2101      	movs	r1, #1
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ffa8 	bl	8002604 <BSP_IOEXPANDER_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <BSP_IO_Init+0x4a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80026ba:	f06f 0304 	mvn.w	r3, #4
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	e019      	b.n	80026f6 <BSP_IO_Init+0x7e>
      }
      else if (Io_Drv->Start(&Io_CompObj, IO_PIN_ALL) < 0)
 80026c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <BSP_IO_Init+0xb8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80026cc:	4819      	ldr	r0, [pc, #100]	@ (8002734 <BSP_IO_Init+0xbc>)
 80026ce:	4798      	blx	r3
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	da03      	bge.n	80026de <BSP_IO_Init+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80026d6:	f06f 0304 	mvn.w	r3, #4
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	e00b      	b.n	80026f6 <BSP_IO_Init+0x7e>
      }
      else
      {
        IO_Ctx[Instance].Functions |= IOEXPANDER_IO_MODE;
 80026de:	4a13      	ldr	r2, [pc, #76]	@ (800272c <BSP_IO_Init+0xb4>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4413      	add	r3, r2
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	490f      	ldr	r1, [pc, #60]	@ (800272c <BSP_IO_Init+0xb4>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	605a      	str	r2, [r3, #4]
      }
    }

    if (ret == BSP_ERROR_NONE)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d111      	bne.n	8002720 <BSP_IO_Init+0xa8>
    {
      /* If IT mode is selected, configures MFX low level interrupt */
      if (Init->Mode >= IO_MODE_IT_RISING_EDGE)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b04      	cmp	r3, #4
 8002702:	d901      	bls.n	8002708 <BSP_IO_Init+0x90>
      {
        BSP_IOEXPANDER_ITConfig();
 8002704:	f000 f898 	bl	8002838 <BSP_IOEXPANDER_ITConfig>
      }

      /* Initializes IO pin */
      if (Io_Drv->Init(&Io_CompObj, Init) < 0)
 8002708:	4b09      	ldr	r3, [pc, #36]	@ (8002730 <BSP_IO_Init+0xb8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6839      	ldr	r1, [r7, #0]
 8002710:	4808      	ldr	r0, [pc, #32]	@ (8002734 <BSP_IO_Init+0xbc>)
 8002712:	4798      	blx	r3
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	da02      	bge.n	8002720 <BSP_IO_Init+0xa8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800271a:	f06f 0304 	mvn.w	r3, #4
 800271e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002720:	68fb      	ldr	r3, [r7, #12]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	24001364 	.word	0x24001364
 8002730:	2400139c 	.word	0x2400139c
 8002734:	2400136c 	.word	0x2400136c

08002738 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState  New pins state to write
  * @retval BSP status
  */
int32_t BSP_IO_WritePin(uint32_t Instance, uint32_t IoPin, uint32_t PinState)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]

  if ((Instance >= IOEXPANDER_INSTANCES_NBR) || ((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d108      	bne.n	8002760 <BSP_IO_WritePin+0x28>
 800274e:	4a10      	ldr	r2, [pc, #64]	@ (8002790 <BSP_IO_WritePin+0x58>)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d103      	bne.n	8002768 <BSP_IO_WritePin+0x30>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002760:	f06f 0301 	mvn.w	r3, #1
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	e00d      	b.n	8002784 <BSP_IO_WritePin+0x4c>
  }
  else
  {
    /* Set the Pin state */
    if (Io_Drv->WritePin(&Io_CompObj, IoPin, PinState) < 0)
 8002768:	4b0a      	ldr	r3, [pc, #40]	@ (8002794 <BSP_IO_WritePin+0x5c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	4808      	ldr	r0, [pc, #32]	@ (8002798 <BSP_IO_WritePin+0x60>)
 8002776:	4798      	blx	r3
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	da02      	bge.n	8002784 <BSP_IO_WritePin+0x4c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800277e:	f06f 0304 	mvn.w	r3, #4
 8002782:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002784:	697b      	ldr	r3, [r7, #20]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	24001364 	.word	0x24001364
 8002794:	2400139c 	.word	0x2400139c
 8002798:	2400136c 	.word	0x2400136c

0800279c <BSP_IO_TogglePin>:
  *          This parameter can be any combination of the IO pins.
  * @note   This function is only used to toggle one pin in the same time
  * @retval None
  */
int32_t BSP_IO_TogglePin(uint32_t Instance, uint32_t IoPin)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
  int32_t pinState;

  if ((Instance >= IOEXPANDER_INSTANCES_NBR) || ((IO_Ctx[Instance].Functions & IOEXPANDER_IO_MODE) != IOEXPANDER_IO_MODE))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d108      	bne.n	80027c2 <BSP_IO_TogglePin+0x26>
 80027b0:	4a1e      	ldr	r2, [pc, #120]	@ (800282c <BSP_IO_TogglePin+0x90>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d103      	bne.n	80027ca <BSP_IO_TogglePin+0x2e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80027c2:	f06f 0301 	mvn.w	r3, #1
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	e02b      	b.n	8002822 <BSP_IO_TogglePin+0x86>
  }
  else
  {
    /* Toggle the current pin state */
    pinState = Io_Drv->ReadPin(&Io_CompObj, IoPin);
 80027ca:	4b19      	ldr	r3, [pc, #100]	@ (8002830 <BSP_IO_TogglePin+0x94>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	6839      	ldr	r1, [r7, #0]
 80027d2:	4818      	ldr	r0, [pc, #96]	@ (8002834 <BSP_IO_TogglePin+0x98>)
 80027d4:	4798      	blx	r3
 80027d6:	60b8      	str	r0, [r7, #8]
    if (pinState < 0)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	da03      	bge.n	80027e6 <BSP_IO_TogglePin+0x4a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80027de:	f06f 0304 	mvn.w	r3, #4
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e01d      	b.n	8002822 <BSP_IO_TogglePin+0x86>
    }
    else
    {
      if (pinState == 0) /* Reset state */
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10d      	bne.n	8002808 <BSP_IO_TogglePin+0x6c>
      {
        if (Io_Drv->WritePin(&Io_CompObj, IoPin, IO_PIN_SET) < 0)
 80027ec:	4b10      	ldr	r3, [pc, #64]	@ (8002830 <BSP_IO_TogglePin+0x94>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	2201      	movs	r2, #1
 80027f4:	6839      	ldr	r1, [r7, #0]
 80027f6:	480f      	ldr	r0, [pc, #60]	@ (8002834 <BSP_IO_TogglePin+0x98>)
 80027f8:	4798      	blx	r3
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	da10      	bge.n	8002822 <BSP_IO_TogglePin+0x86>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8002800:	f06f 0304 	mvn.w	r3, #4
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	e00c      	b.n	8002822 <BSP_IO_TogglePin+0x86>
        }
      }
      else /* Set state */
      {
        if (Io_Drv->WritePin(&Io_CompObj, IoPin, IO_PIN_RESET) < 0)
 8002808:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <BSP_IO_TogglePin+0x94>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	2200      	movs	r2, #0
 8002810:	6839      	ldr	r1, [r7, #0]
 8002812:	4808      	ldr	r0, [pc, #32]	@ (8002834 <BSP_IO_TogglePin+0x98>)
 8002814:	4798      	blx	r3
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	da02      	bge.n	8002822 <BSP_IO_TogglePin+0x86>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800281c:	f06f 0304 	mvn.w	r3, #4
 8002820:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002822:	68fb      	ldr	r3, [r7, #12]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	24001364 	.word	0x24001364
 8002830:	2400139c 	.word	0x2400139c
 8002834:	2400136c 	.word	0x2400136c

08002838 <BSP_IOEXPANDER_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void BSP_IOEXPANDER_ITConfig(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
  static uint32_t mfx_io_it_enabled = 0U;
  GPIO_InitTypeDef  gpio_init_structure;

  if (mfx_io_it_enabled == 0U)
 800283e:	4b25      	ldr	r3, [pc, #148]	@ (80028d4 <BSP_IOEXPANDER_ITConfig+0x9c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d141      	bne.n	80028ca <BSP_IOEXPANDER_ITConfig+0x92>
  {
    mfx_io_it_enabled = 1U;
 8002846:	4b23      	ldr	r3, [pc, #140]	@ (80028d4 <BSP_IOEXPANDER_ITConfig+0x9c>)
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]
    /* Enable the GPIO EXTI clock */
    MFX_IRQOUT_GPIO_CLK_ENABLE();
 800284c:	4b22      	ldr	r3, [pc, #136]	@ (80028d8 <BSP_IOEXPANDER_ITConfig+0xa0>)
 800284e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002852:	4a21      	ldr	r2, [pc, #132]	@ (80028d8 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8002854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002858:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800285c:	4b1e      	ldr	r3, [pc, #120]	@ (80028d8 <BSP_IOEXPANDER_ITConfig+0xa0>)
 800285e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286a:	4b1b      	ldr	r3, [pc, #108]	@ (80028d8 <BSP_IOEXPANDER_ITConfig+0xa0>)
 800286c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002870:	4a19      	ldr	r2, [pc, #100]	@ (80028d8 <BSP_IOEXPANDER_ITConfig+0xa0>)
 8002872:	f043 0302 	orr.w	r3, r3, #2
 8002876:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800287a:	4b17      	ldr	r3, [pc, #92]	@ (80028d8 <BSP_IOEXPANDER_ITConfig+0xa0>)
 800287c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	687b      	ldr	r3, [r7, #4]

    gpio_init_structure.Pin   = MFX_IRQOUT_PIN;
 8002888:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800288c:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_IT_RISING;
 8002896:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800289a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(MFX_IRQOUT_GPIO_PORT, &gpio_init_structure);
 800289c:	f107 030c 	add.w	r3, r7, #12
 80028a0:	4619      	mov	r1, r3
 80028a2:	480e      	ldr	r0, [pc, #56]	@ (80028dc <BSP_IOEXPANDER_ITConfig+0xa4>)
 80028a4:	f001 fed0 	bl	8004648 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hio_exti, IO_EXTI_LINE);
 80028a8:	2108      	movs	r1, #8
 80028aa:	480d      	ldr	r0, [pc, #52]	@ (80028e0 <BSP_IOEXPANDER_ITConfig+0xa8>)
 80028ac:	f001 feb7 	bl	800461e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hio_exti,  HAL_EXTI_COMMON_CB_ID, IO_EXTI_Callback);
 80028b0:	4a0c      	ldr	r2, [pc, #48]	@ (80028e4 <BSP_IOEXPANDER_ITConfig+0xac>)
 80028b2:	2100      	movs	r1, #0
 80028b4:	480a      	ldr	r0, [pc, #40]	@ (80028e0 <BSP_IOEXPANDER_ITConfig+0xa8>)
 80028b6:	f001 fe93 	bl	80045e0 <HAL_EXTI_RegisterCallback>

    /* Enable and set GPIO EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(MFX_IRQOUT_EXTI_IRQn), BSP_IOEXPANDER_IT_PRIORITY, 0x0F);
 80028ba:	220f      	movs	r2, #15
 80028bc:	210f      	movs	r1, #15
 80028be:	2017      	movs	r0, #23
 80028c0:	f001 fde1 	bl	8004486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_IRQOUT_EXTI_IRQn));
 80028c4:	2017      	movs	r0, #23
 80028c6:	f001 fdf8 	bl	80044ba <HAL_NVIC_EnableIRQ>
  }
}
 80028ca:	bf00      	nop
 80028cc:	3720      	adds	r7, #32
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	240013a0 	.word	0x240013a0
 80028d8:	58024400 	.word	0x58024400
 80028dc:	58022000 	.word	0x58022000
 80028e0:	24001394 	.word	0x24001394
 80028e4:	080029c1 	.word	0x080029c1

080028e8 <BSP_IO_Callback>:
  * @brief  BSP TS Callback.
  * @param  Instance IO instance
  * @retval None.
  */
__weak void BSP_IO_Callback(uint32_t Instance)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on TS touch detection */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <MFXSTM32L152_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t MFXSTM32L152_Probe(uint32_t Instance)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08c      	sub	sp, #48	@ 0x30
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  int32_t              ret = BSP_ERROR_NONE;
 8002904:	2300      	movs	r3, #0
 8002906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MFXSTM32L152_IO_t    IOCtx;
  uint32_t             mfxstm32l152_id, i;
  uint8_t i2c_address[] = {IO_I2C_ADDRESS, IO_I2C_ADDRESS_2};
 8002908:	f248 6384 	movw	r3, #34436	@ 0x8684
 800290c:	813b      	strh	r3, [r7, #8]

  /* Configure the audio driver */
  IOCtx.Init        = BSP_I2C2_Init;
 800290e:	4b26      	ldr	r3, [pc, #152]	@ (80029a8 <MFXSTM32L152_Probe+0xac>)
 8002910:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8002912:	4b26      	ldr	r3, [pc, #152]	@ (80029ac <MFXSTM32L152_Probe+0xb0>)
 8002914:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8002916:	4b26      	ldr	r3, [pc, #152]	@ (80029b0 <MFXSTM32L152_Probe+0xb4>)
 8002918:	623b      	str	r3, [r7, #32]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 800291a:	4b26      	ldr	r3, [pc, #152]	@ (80029b4 <MFXSTM32L152_Probe+0xb8>)
 800291c:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 800291e:	4b26      	ldr	r3, [pc, #152]	@ (80029b8 <MFXSTM32L152_Probe+0xbc>)
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24

  for (i = 0U; i < 2U; i++)
 8002922:	2300      	movs	r3, #0
 8002924:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002926:	e035      	b.n	8002994 <MFXSTM32L152_Probe+0x98>
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8002928:	f107 0208 	add.w	r2, r7, #8
 800292c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292e:	4413      	add	r3, r2
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	833b      	strh	r3, [r7, #24]
    if (MFXSTM32L152_RegisterBusIO(&Io_CompObj, &IOCtx) != MFXSTM32L152_OK)
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	4619      	mov	r1, r3
 800293a:	4820      	ldr	r0, [pc, #128]	@ (80029bc <MFXSTM32L152_Probe+0xc0>)
 800293c:	f7fe ffee 	bl	800191c <MFXSTM32L152_RegisterBusIO>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <MFXSTM32L152_Probe+0x52>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8002946:	f06f 0307 	mvn.w	r3, #7
 800294a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800294c:	e01f      	b.n	800298e <MFXSTM32L152_Probe+0x92>
    }
    else if (MFXSTM32L152_ReadID(&Io_CompObj, &mfxstm32l152_id) != MFXSTM32L152_OK)
 800294e:	f107 030c 	add.w	r3, r7, #12
 8002952:	4619      	mov	r1, r3
 8002954:	4819      	ldr	r0, [pc, #100]	@ (80029bc <MFXSTM32L152_Probe+0xc0>)
 8002956:	f7fe fb97 	bl	8001088 <MFXSTM32L152_ReadID>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <MFXSTM32L152_Probe+0x6c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002960:	f06f 0303 	mvn.w	r3, #3
 8002964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002966:	e012      	b.n	800298e <MFXSTM32L152_Probe+0x92>
    }
    else
    {
      if ((mfxstm32l152_id == MFXSTM32L152_ID) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b7b      	cmp	r3, #123	@ 0x7b
 800296c:	d002      	beq.n	8002974 <MFXSTM32L152_Probe+0x78>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b79      	cmp	r3, #121	@ 0x79
 8002972:	d109      	bne.n	8002988 <MFXSTM32L152_Probe+0x8c>
      {
        if (MFXSTM32L152_Init(&Io_CompObj) != MFXSTM32L152_OK)
 8002974:	4811      	ldr	r0, [pc, #68]	@ (80029bc <MFXSTM32L152_Probe+0xc0>)
 8002976:	f7fe fb29 	bl	8000fcc <MFXSTM32L152_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00d      	beq.n	800299c <MFXSTM32L152_Probe+0xa0>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8002980:	f06f 0304 	mvn.w	r3, #4
 8002984:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8002986:	e009      	b.n	800299c <MFXSTM32L152_Probe+0xa0>
      }
      else
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002988:	f06f 0306 	mvn.w	r3, #6
 800298c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (i = 0U; i < 2U; i++)
 800298e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002990:	3301      	adds	r3, #1
 8002992:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002996:	2b01      	cmp	r3, #1
 8002998:	d9c6      	bls.n	8002928 <MFXSTM32L152_Probe+0x2c>
 800299a:	e000      	b.n	800299e <MFXSTM32L152_Probe+0xa2>
        break;
 800299c:	bf00      	nop
      }
    }
  }

  return ret;
 800299e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3730      	adds	r7, #48	@ 0x30
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	08001d61 	.word	0x08001d61
 80029ac:	08001dd5 	.word	0x08001dd5
 80029b0:	08001efd 	.word	0x08001efd
 80029b4:	08001ea1 	.word	0x08001ea1
 80029b8:	08001f59 	.word	0x08001f59
 80029bc:	2400136c 	.word	0x2400136c

080029c0 <IO_EXTI_Callback>:
/**
  * @brief  IO EXTI touch detection callbacks.
  * @retval None
  */
static void IO_EXTI_Callback(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  BSP_IO_Callback(0);
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7ff ff8f 	bl	80028e8 <BSP_IO_Callback>
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a00 <HAL_MspInit+0x30>)
 80029d8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80029dc:	4a08      	ldr	r2, [pc, #32]	@ (8002a00 <HAL_MspInit+0x30>)
 80029de:	f043 0302 	orr.w	r3, r3, #2
 80029e2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80029e6:	4b06      	ldr	r3, [pc, #24]	@ (8002a00 <HAL_MspInit+0x30>)
 80029e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	58024400 	.word	0x58024400

08002a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b0bc      	sub	sp, #240	@ 0xf0
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002a0c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit = {0};
 8002a1c:	f107 0318 	add.w	r3, r7, #24
 8002a20:	22c0      	movs	r2, #192	@ 0xc0
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f00d fbe6 	bl	80101f6 <memset>

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8002a2a:	4b31      	ldr	r3, [pc, #196]	@ (8002af0 <HAL_UART_MspInit+0xec>)
 8002a2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a30:	4a2f      	ldr	r2, [pc, #188]	@ (8002af0 <HAL_UART_MspInit+0xec>)
 8002a32:	f043 0302 	orr.w	r3, r3, #2
 8002a36:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002a3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002af0 <HAL_UART_MspInit+0xec>)
 8002a3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	697b      	ldr	r3, [r7, #20]
  USARTx_RX_GPIO_CLK_ENABLE();
 8002a48:	4b29      	ldr	r3, [pc, #164]	@ (8002af0 <HAL_UART_MspInit+0xec>)
 8002a4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a4e:	4a28      	ldr	r2, [pc, #160]	@ (8002af0 <HAL_UART_MspInit+0xec>)
 8002a50:	f043 0302 	orr.w	r3, r3, #2
 8002a54:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002a58:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <HAL_UART_MspInit+0xec>)
 8002a5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	693b      	ldr	r3, [r7, #16]

  /* Select SysClk as source of USART1 clocks */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
 8002a66:	f04f 0201 	mov.w	r2, #1
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  RCC_PeriphClkInit.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8002a78:	f107 0318 	add.w	r3, r7, #24
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f006 f835 	bl	8008aec <HAL_RCCEx_PeriphCLKConfig>

  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8002a82:	4b1b      	ldr	r3, [pc, #108]	@ (8002af0 <HAL_UART_MspInit+0xec>)
 8002a84:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002a88:	4a19      	ldr	r2, [pc, #100]	@ (8002af0 <HAL_UART_MspInit+0xec>)
 8002a8a:	f043 0310 	orr.w	r3, r3, #16
 8002a8e:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002a92:	4b17      	ldr	r3, [pc, #92]	@ (8002af0 <HAL_UART_MspInit+0xec>)
 8002a94:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8002aa0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002aa4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002aba:	2304      	movs	r3, #4
 8002abc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8002ac0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	480b      	ldr	r0, [pc, #44]	@ (8002af4 <HAL_UART_MspInit+0xf0>)
 8002ac8:	f001 fdbe 	bl	8004648 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8002acc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ad0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8002ada:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4804      	ldr	r0, [pc, #16]	@ (8002af4 <HAL_UART_MspInit+0xf0>)
 8002ae2:	f001 fdb1 	bl	8004648 <HAL_GPIO_Init>

}
 8002ae6:	bf00      	nop
 8002ae8:	37f0      	adds	r7, #240	@ 0xf0
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	58024400 	.word	0x58024400
 8002af4:	58020400 	.word	0x58020400

08002af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b0a:	bf00      	nop
 8002b0c:	e7fd      	b.n	8002b0a <HardFault_Handler+0x4>

08002b0e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b12:	bf00      	nop
 8002b14:	e7fd      	b.n	8002b12 <MemManage_Handler+0x4>

08002b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1a:	bf00      	nop
 8002b1c:	e7fd      	b.n	8002b1a <BusFault_Handler+0x4>

08002b1e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b22:	bf00      	nop
 8002b24:	e7fd      	b.n	8002b22 <UsageFault_Handler+0x4>

08002b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b54:	f001 fb78 	bl	8004248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <OTG_HS_IRQHandler>:
* @brief  This function handles USB-On-The-Go FS/HS global interrupt request.
* @param  None
* @retval None
*/
void OTG_HS_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002b60:	4802      	ldr	r0, [pc, #8]	@ (8002b6c <OTG_HS_IRQHandler+0x10>)
 8002b62:	f002 fb35 	bl	80051d0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	24001c24 	.word	0x24001c24

08002b70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	e00a      	b.n	8002b98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b82:	f3af 8000 	nop.w
 8002b86:	4601      	mov	r1, r0
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	60ba      	str	r2, [r7, #8]
 8002b8e:	b2ca      	uxtb	r2, r1
 8002b90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3301      	adds	r3, #1
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	dbf0      	blt.n	8002b82 <_read+0x12>
  }

  return len;
 8002ba0:	687b      	ldr	r3, [r7, #4]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b0b8      	sub	sp, #224	@ 0xe0
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;
  char test[200]={0};
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	22c8      	movs	r2, #200	@ 0xc8
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f00d fb19 	bl	80101f6 <memset>
  memcpy(test,ptr,len);
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	f107 0314 	add.w	r3, r7, #20
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f00d fb9e 	bl	801030e <memcpy>
  test[len+1] = 0;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	33e0      	adds	r3, #224	@ 0xe0
 8002bd8:	443b      	add	r3, r7
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f803 2ccc 	strb.w	r2, [r3, #-204]

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be0:	2300      	movs	r3, #0
 8002be2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002be6:	e00b      	b.n	8002c00 <_write+0x56>
  {
    __io_putchar(*ptr++);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	60ba      	str	r2, [r7, #8]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe f973 	bl	8000edc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002c00:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	dbee      	blt.n	8002be8 <_write+0x3e>
  }
  return len;
 8002c0a:	687b      	ldr	r3, [r7, #4]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	37e0      	adds	r7, #224	@ 0xe0
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <_close>:

int _close(int file)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c3c:	605a      	str	r2, [r3, #4]
  return 0;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <_isatty>:

int _isatty(int file)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c54:	2301      	movs	r3, #1
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b085      	sub	sp, #20
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c84:	4a14      	ldr	r2, [pc, #80]	@ (8002cd8 <_sbrk+0x5c>)
 8002c86:	4b15      	ldr	r3, [pc, #84]	@ (8002cdc <_sbrk+0x60>)
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c90:	4b13      	ldr	r3, [pc, #76]	@ (8002ce0 <_sbrk+0x64>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d102      	bne.n	8002c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c98:	4b11      	ldr	r3, [pc, #68]	@ (8002ce0 <_sbrk+0x64>)
 8002c9a:	4a12      	ldr	r2, [pc, #72]	@ (8002ce4 <_sbrk+0x68>)
 8002c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <_sbrk+0x64>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d207      	bcs.n	8002cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cac:	f00d fb02 	bl	80102b4 <__errno>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	220c      	movs	r2, #12
 8002cb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cba:	e009      	b.n	8002cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cbc:	4b08      	ldr	r3, [pc, #32]	@ (8002ce0 <_sbrk+0x64>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cc2:	4b07      	ldr	r3, [pc, #28]	@ (8002ce0 <_sbrk+0x64>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	4a05      	ldr	r2, [pc, #20]	@ (8002ce0 <_sbrk+0x64>)
 8002ccc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cce:	68fb      	ldr	r3, [r7, #12]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	24100000 	.word	0x24100000
 8002cdc:	00000400 	.word	0x00000400
 8002ce0:	240013a4 	.word	0x240013a4
 8002ce4:	24002150 	.word	0x24002150

08002ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002cec:	4b3e      	ldr	r3, [pc, #248]	@ (8002de8 <SystemInit+0x100>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf2:	4a3d      	ldr	r2, [pc, #244]	@ (8002de8 <SystemInit+0x100>)
 8002cf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8002dec <SystemInit+0x104>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d807      	bhi.n	8002d18 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d08:	4b38      	ldr	r3, [pc, #224]	@ (8002dec <SystemInit+0x104>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f023 030f 	bic.w	r3, r3, #15
 8002d10:	4a36      	ldr	r2, [pc, #216]	@ (8002dec <SystemInit+0x104>)
 8002d12:	f043 0303 	orr.w	r3, r3, #3
 8002d16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d18:	4b35      	ldr	r3, [pc, #212]	@ (8002df0 <SystemInit+0x108>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a34      	ldr	r2, [pc, #208]	@ (8002df0 <SystemInit+0x108>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d24:	4b32      	ldr	r3, [pc, #200]	@ (8002df0 <SystemInit+0x108>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002d2a:	4b31      	ldr	r3, [pc, #196]	@ (8002df0 <SystemInit+0x108>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	4930      	ldr	r1, [pc, #192]	@ (8002df0 <SystemInit+0x108>)
 8002d30:	4b30      	ldr	r3, [pc, #192]	@ (8002df4 <SystemInit+0x10c>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d36:	4b2d      	ldr	r3, [pc, #180]	@ (8002dec <SystemInit+0x104>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d007      	beq.n	8002d52 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d42:	4b2a      	ldr	r3, [pc, #168]	@ (8002dec <SystemInit+0x104>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 030f 	bic.w	r3, r3, #15
 8002d4a:	4a28      	ldr	r2, [pc, #160]	@ (8002dec <SystemInit+0x104>)
 8002d4c:	f043 0303 	orr.w	r3, r3, #3
 8002d50:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002d52:	4b27      	ldr	r3, [pc, #156]	@ (8002df0 <SystemInit+0x108>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002d58:	4b25      	ldr	r3, [pc, #148]	@ (8002df0 <SystemInit+0x108>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002d5e:	4b24      	ldr	r3, [pc, #144]	@ (8002df0 <SystemInit+0x108>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002d64:	4b22      	ldr	r3, [pc, #136]	@ (8002df0 <SystemInit+0x108>)
 8002d66:	4a24      	ldr	r2, [pc, #144]	@ (8002df8 <SystemInit+0x110>)
 8002d68:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002d6a:	4b21      	ldr	r3, [pc, #132]	@ (8002df0 <SystemInit+0x108>)
 8002d6c:	4a23      	ldr	r2, [pc, #140]	@ (8002dfc <SystemInit+0x114>)
 8002d6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002d70:	4b1f      	ldr	r3, [pc, #124]	@ (8002df0 <SystemInit+0x108>)
 8002d72:	4a23      	ldr	r2, [pc, #140]	@ (8002e00 <SystemInit+0x118>)
 8002d74:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002d76:	4b1e      	ldr	r3, [pc, #120]	@ (8002df0 <SystemInit+0x108>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002df0 <SystemInit+0x108>)
 8002d7e:	4a20      	ldr	r2, [pc, #128]	@ (8002e00 <SystemInit+0x118>)
 8002d80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002d82:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <SystemInit+0x108>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002d88:	4b19      	ldr	r3, [pc, #100]	@ (8002df0 <SystemInit+0x108>)
 8002d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e00 <SystemInit+0x118>)
 8002d8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002d8e:	4b18      	ldr	r3, [pc, #96]	@ (8002df0 <SystemInit+0x108>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d94:	4b16      	ldr	r3, [pc, #88]	@ (8002df0 <SystemInit+0x108>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a15      	ldr	r2, [pc, #84]	@ (8002df0 <SystemInit+0x108>)
 8002d9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002da0:	4b13      	ldr	r3, [pc, #76]	@ (8002df0 <SystemInit+0x108>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002da6:	4b12      	ldr	r3, [pc, #72]	@ (8002df0 <SystemInit+0x108>)
 8002da8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002dac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d113      	bne.n	8002ddc <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002db4:	4b0e      	ldr	r3, [pc, #56]	@ (8002df0 <SystemInit+0x108>)
 8002db6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002dba:	4a0d      	ldr	r2, [pc, #52]	@ (8002df0 <SystemInit+0x108>)
 8002dbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002dc0:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e04 <SystemInit+0x11c>)
 8002dc6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002dca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002dcc:	4b08      	ldr	r3, [pc, #32]	@ (8002df0 <SystemInit+0x108>)
 8002dce:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002dd2:	4a07      	ldr	r2, [pc, #28]	@ (8002df0 <SystemInit+0x108>)
 8002dd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002dd8:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	e000ed00 	.word	0xe000ed00
 8002dec:	52002000 	.word	0x52002000
 8002df0:	58024400 	.word	0x58024400
 8002df4:	eaf6ed7f 	.word	0xeaf6ed7f
 8002df8:	02020200 	.word	0x02020200
 8002dfc:	01ff0000 	.word	0x01ff0000
 8002e00:	01010280 	.word	0x01010280
 8002e04:	52004000 	.word	0x52004000

08002e08 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8002e0c:	4b09      	ldr	r3, [pc, #36]	@ (8002e34 <ExitRun0Mode+0x2c>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4a08      	ldr	r2, [pc, #32]	@ (8002e34 <ExitRun0Mode+0x2c>)
 8002e12:	f023 0302 	bic.w	r3, r3, #2
 8002e16:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002e18:	bf00      	nop
 8002e1a:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <ExitRun0Mode+0x2c>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f9      	beq.n	8002e1a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002e26:	bf00      	nop
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	58024800 	.word	0x58024800

08002e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e38:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002e74 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002e3c:	f7ff ffe4 	bl	8002e08 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e40:	f7ff ff52 	bl	8002ce8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e44:	480c      	ldr	r0, [pc, #48]	@ (8002e78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e46:	490d      	ldr	r1, [pc, #52]	@ (8002e7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e48:	4a0d      	ldr	r2, [pc, #52]	@ (8002e80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e4c:	e002      	b.n	8002e54 <LoopCopyDataInit>

08002e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e52:	3304      	adds	r3, #4

08002e54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e58:	d3f9      	bcc.n	8002e4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8002e88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e60:	e001      	b.n	8002e66 <LoopFillZerobss>

08002e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e64:	3204      	adds	r2, #4

08002e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e68:	d3fb      	bcc.n	8002e62 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002e6a:	f00d fa29 	bl	80102c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e6e:	f7fd feed 	bl	8000c4c <main>
  bx  lr
 8002e72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e74:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002e78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002e7c:	240000c8 	.word	0x240000c8
  ldr r2, =_sidata
 8002e80:	08011748 	.word	0x08011748
  ldr r2, =_sbss
 8002e84:	240000c8 	.word	0x240000c8
  ldr r4, =_ebss
 8002e88:	24002150 	.word	0x24002150

08002e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e8c:	e7fe      	b.n	8002e8c <ADC_IRQHandler>

08002e8e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e042      	b.n	8002f26 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff fda6 	bl	8002a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2224      	movs	r2, #36	@ 0x24
 8002ebc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 ff23 	bl	8003d24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f8b4 	bl	800304c <UART_SetConfig>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e01b      	b.n	8002f26 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002efc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0201 	orr.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 ffa2 	bl	8003e68 <UART_CheckIdleState>
 8002f24:	4603      	mov	r3, r0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b08a      	sub	sp, #40	@ 0x28
 8002f32:	af02      	add	r7, sp, #8
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	603b      	str	r3, [r7, #0]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d17b      	bne.n	8003040 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <HAL_UART_Transmit+0x26>
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e074      	b.n	8003042 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2221      	movs	r2, #33	@ 0x21
 8002f64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f68:	f001 f982 	bl	8004270 <HAL_GetTick>
 8002f6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	88fa      	ldrh	r2, [r7, #6]
 8002f72:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	88fa      	ldrh	r2, [r7, #6]
 8002f7a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f86:	d108      	bne.n	8002f9a <HAL_UART_Transmit+0x6c>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d104      	bne.n	8002f9a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	61bb      	str	r3, [r7, #24]
 8002f98:	e003      	b.n	8002fa2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fa2:	e030      	b.n	8003006 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2200      	movs	r2, #0
 8002fac:	2180      	movs	r1, #128	@ 0x80
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f001 f804 	bl	8003fbc <UART_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e03d      	b.n	8003042 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10b      	bne.n	8002fe4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fda:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	3302      	adds	r3, #2
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	e007      	b.n	8002ff4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	781a      	ldrb	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1c8      	bne.n	8002fa4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2200      	movs	r2, #0
 800301a:	2140      	movs	r1, #64	@ 0x40
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 ffcd 	bl	8003fbc <UART_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e006      	b.n	8003042 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	e000      	b.n	8003042 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003040:	2302      	movs	r3, #2
  }
}
 8003042:	4618      	mov	r0, r3
 8003044:	3720      	adds	r7, #32
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800304c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003050:	b092      	sub	sp, #72	@ 0x48
 8003052:	af00      	add	r7, sp, #0
 8003054:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	431a      	orrs	r2, r3
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	431a      	orrs	r2, r3
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	4313      	orrs	r3, r2
 8003072:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4bbe      	ldr	r3, [pc, #760]	@ (8003374 <UART_SetConfig+0x328>)
 800307c:	4013      	ands	r3, r2
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003084:	430b      	orrs	r3, r1
 8003086:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4ab3      	ldr	r2, [pc, #716]	@ (8003378 <UART_SetConfig+0x32c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d004      	beq.n	80030b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030b4:	4313      	orrs	r3, r2
 80030b6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	4baf      	ldr	r3, [pc, #700]	@ (800337c <UART_SetConfig+0x330>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d2:	f023 010f 	bic.w	r1, r3, #15
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4aa6      	ldr	r2, [pc, #664]	@ (8003380 <UART_SetConfig+0x334>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d177      	bne.n	80031dc <UART_SetConfig+0x190>
 80030ec:	4ba5      	ldr	r3, [pc, #660]	@ (8003384 <UART_SetConfig+0x338>)
 80030ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030f4:	2b28      	cmp	r3, #40	@ 0x28
 80030f6:	d86d      	bhi.n	80031d4 <UART_SetConfig+0x188>
 80030f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003100 <UART_SetConfig+0xb4>)
 80030fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fe:	bf00      	nop
 8003100:	080031a5 	.word	0x080031a5
 8003104:	080031d5 	.word	0x080031d5
 8003108:	080031d5 	.word	0x080031d5
 800310c:	080031d5 	.word	0x080031d5
 8003110:	080031d5 	.word	0x080031d5
 8003114:	080031d5 	.word	0x080031d5
 8003118:	080031d5 	.word	0x080031d5
 800311c:	080031d5 	.word	0x080031d5
 8003120:	080031ad 	.word	0x080031ad
 8003124:	080031d5 	.word	0x080031d5
 8003128:	080031d5 	.word	0x080031d5
 800312c:	080031d5 	.word	0x080031d5
 8003130:	080031d5 	.word	0x080031d5
 8003134:	080031d5 	.word	0x080031d5
 8003138:	080031d5 	.word	0x080031d5
 800313c:	080031d5 	.word	0x080031d5
 8003140:	080031b5 	.word	0x080031b5
 8003144:	080031d5 	.word	0x080031d5
 8003148:	080031d5 	.word	0x080031d5
 800314c:	080031d5 	.word	0x080031d5
 8003150:	080031d5 	.word	0x080031d5
 8003154:	080031d5 	.word	0x080031d5
 8003158:	080031d5 	.word	0x080031d5
 800315c:	080031d5 	.word	0x080031d5
 8003160:	080031bd 	.word	0x080031bd
 8003164:	080031d5 	.word	0x080031d5
 8003168:	080031d5 	.word	0x080031d5
 800316c:	080031d5 	.word	0x080031d5
 8003170:	080031d5 	.word	0x080031d5
 8003174:	080031d5 	.word	0x080031d5
 8003178:	080031d5 	.word	0x080031d5
 800317c:	080031d5 	.word	0x080031d5
 8003180:	080031c5 	.word	0x080031c5
 8003184:	080031d5 	.word	0x080031d5
 8003188:	080031d5 	.word	0x080031d5
 800318c:	080031d5 	.word	0x080031d5
 8003190:	080031d5 	.word	0x080031d5
 8003194:	080031d5 	.word	0x080031d5
 8003198:	080031d5 	.word	0x080031d5
 800319c:	080031d5 	.word	0x080031d5
 80031a0:	080031cd 	.word	0x080031cd
 80031a4:	2301      	movs	r3, #1
 80031a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031aa:	e326      	b.n	80037fa <UART_SetConfig+0x7ae>
 80031ac:	2304      	movs	r3, #4
 80031ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031b2:	e322      	b.n	80037fa <UART_SetConfig+0x7ae>
 80031b4:	2308      	movs	r3, #8
 80031b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031ba:	e31e      	b.n	80037fa <UART_SetConfig+0x7ae>
 80031bc:	2310      	movs	r3, #16
 80031be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031c2:	e31a      	b.n	80037fa <UART_SetConfig+0x7ae>
 80031c4:	2320      	movs	r3, #32
 80031c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031ca:	e316      	b.n	80037fa <UART_SetConfig+0x7ae>
 80031cc:	2340      	movs	r3, #64	@ 0x40
 80031ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031d2:	e312      	b.n	80037fa <UART_SetConfig+0x7ae>
 80031d4:	2380      	movs	r3, #128	@ 0x80
 80031d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031da:	e30e      	b.n	80037fa <UART_SetConfig+0x7ae>
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a69      	ldr	r2, [pc, #420]	@ (8003388 <UART_SetConfig+0x33c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d130      	bne.n	8003248 <UART_SetConfig+0x1fc>
 80031e6:	4b67      	ldr	r3, [pc, #412]	@ (8003384 <UART_SetConfig+0x338>)
 80031e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	2b05      	cmp	r3, #5
 80031f0:	d826      	bhi.n	8003240 <UART_SetConfig+0x1f4>
 80031f2:	a201      	add	r2, pc, #4	@ (adr r2, 80031f8 <UART_SetConfig+0x1ac>)
 80031f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f8:	08003211 	.word	0x08003211
 80031fc:	08003219 	.word	0x08003219
 8003200:	08003221 	.word	0x08003221
 8003204:	08003229 	.word	0x08003229
 8003208:	08003231 	.word	0x08003231
 800320c:	08003239 	.word	0x08003239
 8003210:	2300      	movs	r3, #0
 8003212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003216:	e2f0      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003218:	2304      	movs	r3, #4
 800321a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800321e:	e2ec      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003220:	2308      	movs	r3, #8
 8003222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003226:	e2e8      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003228:	2310      	movs	r3, #16
 800322a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800322e:	e2e4      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003230:	2320      	movs	r3, #32
 8003232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003236:	e2e0      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003238:	2340      	movs	r3, #64	@ 0x40
 800323a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800323e:	e2dc      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003240:	2380      	movs	r3, #128	@ 0x80
 8003242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003246:	e2d8      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a4f      	ldr	r2, [pc, #316]	@ (800338c <UART_SetConfig+0x340>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d130      	bne.n	80032b4 <UART_SetConfig+0x268>
 8003252:	4b4c      	ldr	r3, [pc, #304]	@ (8003384 <UART_SetConfig+0x338>)
 8003254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	2b05      	cmp	r3, #5
 800325c:	d826      	bhi.n	80032ac <UART_SetConfig+0x260>
 800325e:	a201      	add	r2, pc, #4	@ (adr r2, 8003264 <UART_SetConfig+0x218>)
 8003260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003264:	0800327d 	.word	0x0800327d
 8003268:	08003285 	.word	0x08003285
 800326c:	0800328d 	.word	0x0800328d
 8003270:	08003295 	.word	0x08003295
 8003274:	0800329d 	.word	0x0800329d
 8003278:	080032a5 	.word	0x080032a5
 800327c:	2300      	movs	r3, #0
 800327e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003282:	e2ba      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003284:	2304      	movs	r3, #4
 8003286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800328a:	e2b6      	b.n	80037fa <UART_SetConfig+0x7ae>
 800328c:	2308      	movs	r3, #8
 800328e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003292:	e2b2      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003294:	2310      	movs	r3, #16
 8003296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800329a:	e2ae      	b.n	80037fa <UART_SetConfig+0x7ae>
 800329c:	2320      	movs	r3, #32
 800329e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032a2:	e2aa      	b.n	80037fa <UART_SetConfig+0x7ae>
 80032a4:	2340      	movs	r3, #64	@ 0x40
 80032a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032aa:	e2a6      	b.n	80037fa <UART_SetConfig+0x7ae>
 80032ac:	2380      	movs	r3, #128	@ 0x80
 80032ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032b2:	e2a2      	b.n	80037fa <UART_SetConfig+0x7ae>
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a35      	ldr	r2, [pc, #212]	@ (8003390 <UART_SetConfig+0x344>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d130      	bne.n	8003320 <UART_SetConfig+0x2d4>
 80032be:	4b31      	ldr	r3, [pc, #196]	@ (8003384 <UART_SetConfig+0x338>)
 80032c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	d826      	bhi.n	8003318 <UART_SetConfig+0x2cc>
 80032ca:	a201      	add	r2, pc, #4	@ (adr r2, 80032d0 <UART_SetConfig+0x284>)
 80032cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d0:	080032e9 	.word	0x080032e9
 80032d4:	080032f1 	.word	0x080032f1
 80032d8:	080032f9 	.word	0x080032f9
 80032dc:	08003301 	.word	0x08003301
 80032e0:	08003309 	.word	0x08003309
 80032e4:	08003311 	.word	0x08003311
 80032e8:	2300      	movs	r3, #0
 80032ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032ee:	e284      	b.n	80037fa <UART_SetConfig+0x7ae>
 80032f0:	2304      	movs	r3, #4
 80032f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032f6:	e280      	b.n	80037fa <UART_SetConfig+0x7ae>
 80032f8:	2308      	movs	r3, #8
 80032fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032fe:	e27c      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003300:	2310      	movs	r3, #16
 8003302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003306:	e278      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003308:	2320      	movs	r3, #32
 800330a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800330e:	e274      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003310:	2340      	movs	r3, #64	@ 0x40
 8003312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003316:	e270      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003318:	2380      	movs	r3, #128	@ 0x80
 800331a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800331e:	e26c      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1b      	ldr	r2, [pc, #108]	@ (8003394 <UART_SetConfig+0x348>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d142      	bne.n	80033b0 <UART_SetConfig+0x364>
 800332a:	4b16      	ldr	r3, [pc, #88]	@ (8003384 <UART_SetConfig+0x338>)
 800332c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	2b05      	cmp	r3, #5
 8003334:	d838      	bhi.n	80033a8 <UART_SetConfig+0x35c>
 8003336:	a201      	add	r2, pc, #4	@ (adr r2, 800333c <UART_SetConfig+0x2f0>)
 8003338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333c:	08003355 	.word	0x08003355
 8003340:	0800335d 	.word	0x0800335d
 8003344:	08003365 	.word	0x08003365
 8003348:	0800336d 	.word	0x0800336d
 800334c:	08003399 	.word	0x08003399
 8003350:	080033a1 	.word	0x080033a1
 8003354:	2300      	movs	r3, #0
 8003356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800335a:	e24e      	b.n	80037fa <UART_SetConfig+0x7ae>
 800335c:	2304      	movs	r3, #4
 800335e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003362:	e24a      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003364:	2308      	movs	r3, #8
 8003366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800336a:	e246      	b.n	80037fa <UART_SetConfig+0x7ae>
 800336c:	2310      	movs	r3, #16
 800336e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003372:	e242      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003374:	cfff69f3 	.word	0xcfff69f3
 8003378:	58000c00 	.word	0x58000c00
 800337c:	11fff4ff 	.word	0x11fff4ff
 8003380:	40011000 	.word	0x40011000
 8003384:	58024400 	.word	0x58024400
 8003388:	40004400 	.word	0x40004400
 800338c:	40004800 	.word	0x40004800
 8003390:	40004c00 	.word	0x40004c00
 8003394:	40005000 	.word	0x40005000
 8003398:	2320      	movs	r3, #32
 800339a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800339e:	e22c      	b.n	80037fa <UART_SetConfig+0x7ae>
 80033a0:	2340      	movs	r3, #64	@ 0x40
 80033a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033a6:	e228      	b.n	80037fa <UART_SetConfig+0x7ae>
 80033a8:	2380      	movs	r3, #128	@ 0x80
 80033aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033ae:	e224      	b.n	80037fa <UART_SetConfig+0x7ae>
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4ab1      	ldr	r2, [pc, #708]	@ (800367c <UART_SetConfig+0x630>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d176      	bne.n	80034a8 <UART_SetConfig+0x45c>
 80033ba:	4bb1      	ldr	r3, [pc, #708]	@ (8003680 <UART_SetConfig+0x634>)
 80033bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033c2:	2b28      	cmp	r3, #40	@ 0x28
 80033c4:	d86c      	bhi.n	80034a0 <UART_SetConfig+0x454>
 80033c6:	a201      	add	r2, pc, #4	@ (adr r2, 80033cc <UART_SetConfig+0x380>)
 80033c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033cc:	08003471 	.word	0x08003471
 80033d0:	080034a1 	.word	0x080034a1
 80033d4:	080034a1 	.word	0x080034a1
 80033d8:	080034a1 	.word	0x080034a1
 80033dc:	080034a1 	.word	0x080034a1
 80033e0:	080034a1 	.word	0x080034a1
 80033e4:	080034a1 	.word	0x080034a1
 80033e8:	080034a1 	.word	0x080034a1
 80033ec:	08003479 	.word	0x08003479
 80033f0:	080034a1 	.word	0x080034a1
 80033f4:	080034a1 	.word	0x080034a1
 80033f8:	080034a1 	.word	0x080034a1
 80033fc:	080034a1 	.word	0x080034a1
 8003400:	080034a1 	.word	0x080034a1
 8003404:	080034a1 	.word	0x080034a1
 8003408:	080034a1 	.word	0x080034a1
 800340c:	08003481 	.word	0x08003481
 8003410:	080034a1 	.word	0x080034a1
 8003414:	080034a1 	.word	0x080034a1
 8003418:	080034a1 	.word	0x080034a1
 800341c:	080034a1 	.word	0x080034a1
 8003420:	080034a1 	.word	0x080034a1
 8003424:	080034a1 	.word	0x080034a1
 8003428:	080034a1 	.word	0x080034a1
 800342c:	08003489 	.word	0x08003489
 8003430:	080034a1 	.word	0x080034a1
 8003434:	080034a1 	.word	0x080034a1
 8003438:	080034a1 	.word	0x080034a1
 800343c:	080034a1 	.word	0x080034a1
 8003440:	080034a1 	.word	0x080034a1
 8003444:	080034a1 	.word	0x080034a1
 8003448:	080034a1 	.word	0x080034a1
 800344c:	08003491 	.word	0x08003491
 8003450:	080034a1 	.word	0x080034a1
 8003454:	080034a1 	.word	0x080034a1
 8003458:	080034a1 	.word	0x080034a1
 800345c:	080034a1 	.word	0x080034a1
 8003460:	080034a1 	.word	0x080034a1
 8003464:	080034a1 	.word	0x080034a1
 8003468:	080034a1 	.word	0x080034a1
 800346c:	08003499 	.word	0x08003499
 8003470:	2301      	movs	r3, #1
 8003472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003476:	e1c0      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003478:	2304      	movs	r3, #4
 800347a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800347e:	e1bc      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003480:	2308      	movs	r3, #8
 8003482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003486:	e1b8      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003488:	2310      	movs	r3, #16
 800348a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800348e:	e1b4      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003490:	2320      	movs	r3, #32
 8003492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003496:	e1b0      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003498:	2340      	movs	r3, #64	@ 0x40
 800349a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800349e:	e1ac      	b.n	80037fa <UART_SetConfig+0x7ae>
 80034a0:	2380      	movs	r3, #128	@ 0x80
 80034a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034a6:	e1a8      	b.n	80037fa <UART_SetConfig+0x7ae>
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a75      	ldr	r2, [pc, #468]	@ (8003684 <UART_SetConfig+0x638>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d130      	bne.n	8003514 <UART_SetConfig+0x4c8>
 80034b2:	4b73      	ldr	r3, [pc, #460]	@ (8003680 <UART_SetConfig+0x634>)
 80034b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	2b05      	cmp	r3, #5
 80034bc:	d826      	bhi.n	800350c <UART_SetConfig+0x4c0>
 80034be:	a201      	add	r2, pc, #4	@ (adr r2, 80034c4 <UART_SetConfig+0x478>)
 80034c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c4:	080034dd 	.word	0x080034dd
 80034c8:	080034e5 	.word	0x080034e5
 80034cc:	080034ed 	.word	0x080034ed
 80034d0:	080034f5 	.word	0x080034f5
 80034d4:	080034fd 	.word	0x080034fd
 80034d8:	08003505 	.word	0x08003505
 80034dc:	2300      	movs	r3, #0
 80034de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034e2:	e18a      	b.n	80037fa <UART_SetConfig+0x7ae>
 80034e4:	2304      	movs	r3, #4
 80034e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034ea:	e186      	b.n	80037fa <UART_SetConfig+0x7ae>
 80034ec:	2308      	movs	r3, #8
 80034ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034f2:	e182      	b.n	80037fa <UART_SetConfig+0x7ae>
 80034f4:	2310      	movs	r3, #16
 80034f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034fa:	e17e      	b.n	80037fa <UART_SetConfig+0x7ae>
 80034fc:	2320      	movs	r3, #32
 80034fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003502:	e17a      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003504:	2340      	movs	r3, #64	@ 0x40
 8003506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800350a:	e176      	b.n	80037fa <UART_SetConfig+0x7ae>
 800350c:	2380      	movs	r3, #128	@ 0x80
 800350e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003512:	e172      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a5b      	ldr	r2, [pc, #364]	@ (8003688 <UART_SetConfig+0x63c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d130      	bne.n	8003580 <UART_SetConfig+0x534>
 800351e:	4b58      	ldr	r3, [pc, #352]	@ (8003680 <UART_SetConfig+0x634>)
 8003520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	2b05      	cmp	r3, #5
 8003528:	d826      	bhi.n	8003578 <UART_SetConfig+0x52c>
 800352a:	a201      	add	r2, pc, #4	@ (adr r2, 8003530 <UART_SetConfig+0x4e4>)
 800352c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003530:	08003549 	.word	0x08003549
 8003534:	08003551 	.word	0x08003551
 8003538:	08003559 	.word	0x08003559
 800353c:	08003561 	.word	0x08003561
 8003540:	08003569 	.word	0x08003569
 8003544:	08003571 	.word	0x08003571
 8003548:	2300      	movs	r3, #0
 800354a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800354e:	e154      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003550:	2304      	movs	r3, #4
 8003552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003556:	e150      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003558:	2308      	movs	r3, #8
 800355a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800355e:	e14c      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003560:	2310      	movs	r3, #16
 8003562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003566:	e148      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003568:	2320      	movs	r3, #32
 800356a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800356e:	e144      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003570:	2340      	movs	r3, #64	@ 0x40
 8003572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003576:	e140      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003578:	2380      	movs	r3, #128	@ 0x80
 800357a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800357e:	e13c      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a41      	ldr	r2, [pc, #260]	@ (800368c <UART_SetConfig+0x640>)
 8003586:	4293      	cmp	r3, r2
 8003588:	f040 8082 	bne.w	8003690 <UART_SetConfig+0x644>
 800358c:	4b3c      	ldr	r3, [pc, #240]	@ (8003680 <UART_SetConfig+0x634>)
 800358e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003590:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003594:	2b28      	cmp	r3, #40	@ 0x28
 8003596:	d86d      	bhi.n	8003674 <UART_SetConfig+0x628>
 8003598:	a201      	add	r2, pc, #4	@ (adr r2, 80035a0 <UART_SetConfig+0x554>)
 800359a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359e:	bf00      	nop
 80035a0:	08003645 	.word	0x08003645
 80035a4:	08003675 	.word	0x08003675
 80035a8:	08003675 	.word	0x08003675
 80035ac:	08003675 	.word	0x08003675
 80035b0:	08003675 	.word	0x08003675
 80035b4:	08003675 	.word	0x08003675
 80035b8:	08003675 	.word	0x08003675
 80035bc:	08003675 	.word	0x08003675
 80035c0:	0800364d 	.word	0x0800364d
 80035c4:	08003675 	.word	0x08003675
 80035c8:	08003675 	.word	0x08003675
 80035cc:	08003675 	.word	0x08003675
 80035d0:	08003675 	.word	0x08003675
 80035d4:	08003675 	.word	0x08003675
 80035d8:	08003675 	.word	0x08003675
 80035dc:	08003675 	.word	0x08003675
 80035e0:	08003655 	.word	0x08003655
 80035e4:	08003675 	.word	0x08003675
 80035e8:	08003675 	.word	0x08003675
 80035ec:	08003675 	.word	0x08003675
 80035f0:	08003675 	.word	0x08003675
 80035f4:	08003675 	.word	0x08003675
 80035f8:	08003675 	.word	0x08003675
 80035fc:	08003675 	.word	0x08003675
 8003600:	0800365d 	.word	0x0800365d
 8003604:	08003675 	.word	0x08003675
 8003608:	08003675 	.word	0x08003675
 800360c:	08003675 	.word	0x08003675
 8003610:	08003675 	.word	0x08003675
 8003614:	08003675 	.word	0x08003675
 8003618:	08003675 	.word	0x08003675
 800361c:	08003675 	.word	0x08003675
 8003620:	08003665 	.word	0x08003665
 8003624:	08003675 	.word	0x08003675
 8003628:	08003675 	.word	0x08003675
 800362c:	08003675 	.word	0x08003675
 8003630:	08003675 	.word	0x08003675
 8003634:	08003675 	.word	0x08003675
 8003638:	08003675 	.word	0x08003675
 800363c:	08003675 	.word	0x08003675
 8003640:	0800366d 	.word	0x0800366d
 8003644:	2301      	movs	r3, #1
 8003646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800364a:	e0d6      	b.n	80037fa <UART_SetConfig+0x7ae>
 800364c:	2304      	movs	r3, #4
 800364e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003652:	e0d2      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003654:	2308      	movs	r3, #8
 8003656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800365a:	e0ce      	b.n	80037fa <UART_SetConfig+0x7ae>
 800365c:	2310      	movs	r3, #16
 800365e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003662:	e0ca      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003664:	2320      	movs	r3, #32
 8003666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800366a:	e0c6      	b.n	80037fa <UART_SetConfig+0x7ae>
 800366c:	2340      	movs	r3, #64	@ 0x40
 800366e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003672:	e0c2      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003674:	2380      	movs	r3, #128	@ 0x80
 8003676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800367a:	e0be      	b.n	80037fa <UART_SetConfig+0x7ae>
 800367c:	40011400 	.word	0x40011400
 8003680:	58024400 	.word	0x58024400
 8003684:	40007800 	.word	0x40007800
 8003688:	40007c00 	.word	0x40007c00
 800368c:	40011800 	.word	0x40011800
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4aad      	ldr	r2, [pc, #692]	@ (800394c <UART_SetConfig+0x900>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d176      	bne.n	8003788 <UART_SetConfig+0x73c>
 800369a:	4bad      	ldr	r3, [pc, #692]	@ (8003950 <UART_SetConfig+0x904>)
 800369c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036a2:	2b28      	cmp	r3, #40	@ 0x28
 80036a4:	d86c      	bhi.n	8003780 <UART_SetConfig+0x734>
 80036a6:	a201      	add	r2, pc, #4	@ (adr r2, 80036ac <UART_SetConfig+0x660>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	08003751 	.word	0x08003751
 80036b0:	08003781 	.word	0x08003781
 80036b4:	08003781 	.word	0x08003781
 80036b8:	08003781 	.word	0x08003781
 80036bc:	08003781 	.word	0x08003781
 80036c0:	08003781 	.word	0x08003781
 80036c4:	08003781 	.word	0x08003781
 80036c8:	08003781 	.word	0x08003781
 80036cc:	08003759 	.word	0x08003759
 80036d0:	08003781 	.word	0x08003781
 80036d4:	08003781 	.word	0x08003781
 80036d8:	08003781 	.word	0x08003781
 80036dc:	08003781 	.word	0x08003781
 80036e0:	08003781 	.word	0x08003781
 80036e4:	08003781 	.word	0x08003781
 80036e8:	08003781 	.word	0x08003781
 80036ec:	08003761 	.word	0x08003761
 80036f0:	08003781 	.word	0x08003781
 80036f4:	08003781 	.word	0x08003781
 80036f8:	08003781 	.word	0x08003781
 80036fc:	08003781 	.word	0x08003781
 8003700:	08003781 	.word	0x08003781
 8003704:	08003781 	.word	0x08003781
 8003708:	08003781 	.word	0x08003781
 800370c:	08003769 	.word	0x08003769
 8003710:	08003781 	.word	0x08003781
 8003714:	08003781 	.word	0x08003781
 8003718:	08003781 	.word	0x08003781
 800371c:	08003781 	.word	0x08003781
 8003720:	08003781 	.word	0x08003781
 8003724:	08003781 	.word	0x08003781
 8003728:	08003781 	.word	0x08003781
 800372c:	08003771 	.word	0x08003771
 8003730:	08003781 	.word	0x08003781
 8003734:	08003781 	.word	0x08003781
 8003738:	08003781 	.word	0x08003781
 800373c:	08003781 	.word	0x08003781
 8003740:	08003781 	.word	0x08003781
 8003744:	08003781 	.word	0x08003781
 8003748:	08003781 	.word	0x08003781
 800374c:	08003779 	.word	0x08003779
 8003750:	2301      	movs	r3, #1
 8003752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003756:	e050      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003758:	2304      	movs	r3, #4
 800375a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800375e:	e04c      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003760:	2308      	movs	r3, #8
 8003762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003766:	e048      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003768:	2310      	movs	r3, #16
 800376a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800376e:	e044      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003770:	2320      	movs	r3, #32
 8003772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003776:	e040      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003778:	2340      	movs	r3, #64	@ 0x40
 800377a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800377e:	e03c      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003780:	2380      	movs	r3, #128	@ 0x80
 8003782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003786:	e038      	b.n	80037fa <UART_SetConfig+0x7ae>
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a71      	ldr	r2, [pc, #452]	@ (8003954 <UART_SetConfig+0x908>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d130      	bne.n	80037f4 <UART_SetConfig+0x7a8>
 8003792:	4b6f      	ldr	r3, [pc, #444]	@ (8003950 <UART_SetConfig+0x904>)
 8003794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	2b05      	cmp	r3, #5
 800379c:	d826      	bhi.n	80037ec <UART_SetConfig+0x7a0>
 800379e:	a201      	add	r2, pc, #4	@ (adr r2, 80037a4 <UART_SetConfig+0x758>)
 80037a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a4:	080037bd 	.word	0x080037bd
 80037a8:	080037c5 	.word	0x080037c5
 80037ac:	080037cd 	.word	0x080037cd
 80037b0:	080037d5 	.word	0x080037d5
 80037b4:	080037dd 	.word	0x080037dd
 80037b8:	080037e5 	.word	0x080037e5
 80037bc:	2302      	movs	r3, #2
 80037be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037c2:	e01a      	b.n	80037fa <UART_SetConfig+0x7ae>
 80037c4:	2304      	movs	r3, #4
 80037c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037ca:	e016      	b.n	80037fa <UART_SetConfig+0x7ae>
 80037cc:	2308      	movs	r3, #8
 80037ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037d2:	e012      	b.n	80037fa <UART_SetConfig+0x7ae>
 80037d4:	2310      	movs	r3, #16
 80037d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037da:	e00e      	b.n	80037fa <UART_SetConfig+0x7ae>
 80037dc:	2320      	movs	r3, #32
 80037de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037e2:	e00a      	b.n	80037fa <UART_SetConfig+0x7ae>
 80037e4:	2340      	movs	r3, #64	@ 0x40
 80037e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037ea:	e006      	b.n	80037fa <UART_SetConfig+0x7ae>
 80037ec:	2380      	movs	r3, #128	@ 0x80
 80037ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037f2:	e002      	b.n	80037fa <UART_SetConfig+0x7ae>
 80037f4:	2380      	movs	r3, #128	@ 0x80
 80037f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a55      	ldr	r2, [pc, #340]	@ (8003954 <UART_SetConfig+0x908>)
 8003800:	4293      	cmp	r3, r2
 8003802:	f040 80f8 	bne.w	80039f6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003806:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800380a:	2b20      	cmp	r3, #32
 800380c:	dc46      	bgt.n	800389c <UART_SetConfig+0x850>
 800380e:	2b02      	cmp	r3, #2
 8003810:	db75      	blt.n	80038fe <UART_SetConfig+0x8b2>
 8003812:	3b02      	subs	r3, #2
 8003814:	2b1e      	cmp	r3, #30
 8003816:	d872      	bhi.n	80038fe <UART_SetConfig+0x8b2>
 8003818:	a201      	add	r2, pc, #4	@ (adr r2, 8003820 <UART_SetConfig+0x7d4>)
 800381a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381e:	bf00      	nop
 8003820:	080038a3 	.word	0x080038a3
 8003824:	080038ff 	.word	0x080038ff
 8003828:	080038ab 	.word	0x080038ab
 800382c:	080038ff 	.word	0x080038ff
 8003830:	080038ff 	.word	0x080038ff
 8003834:	080038ff 	.word	0x080038ff
 8003838:	080038bb 	.word	0x080038bb
 800383c:	080038ff 	.word	0x080038ff
 8003840:	080038ff 	.word	0x080038ff
 8003844:	080038ff 	.word	0x080038ff
 8003848:	080038ff 	.word	0x080038ff
 800384c:	080038ff 	.word	0x080038ff
 8003850:	080038ff 	.word	0x080038ff
 8003854:	080038ff 	.word	0x080038ff
 8003858:	080038cb 	.word	0x080038cb
 800385c:	080038ff 	.word	0x080038ff
 8003860:	080038ff 	.word	0x080038ff
 8003864:	080038ff 	.word	0x080038ff
 8003868:	080038ff 	.word	0x080038ff
 800386c:	080038ff 	.word	0x080038ff
 8003870:	080038ff 	.word	0x080038ff
 8003874:	080038ff 	.word	0x080038ff
 8003878:	080038ff 	.word	0x080038ff
 800387c:	080038ff 	.word	0x080038ff
 8003880:	080038ff 	.word	0x080038ff
 8003884:	080038ff 	.word	0x080038ff
 8003888:	080038ff 	.word	0x080038ff
 800388c:	080038ff 	.word	0x080038ff
 8003890:	080038ff 	.word	0x080038ff
 8003894:	080038ff 	.word	0x080038ff
 8003898:	080038f1 	.word	0x080038f1
 800389c:	2b40      	cmp	r3, #64	@ 0x40
 800389e:	d02a      	beq.n	80038f6 <UART_SetConfig+0x8aa>
 80038a0:	e02d      	b.n	80038fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80038a2:	f006 fae1 	bl	8009e68 <HAL_RCCEx_GetD3PCLK1Freq>
 80038a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80038a8:	e02f      	b.n	800390a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80038aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038ae:	4618      	mov	r0, r3
 80038b0:	f006 faf0 	bl	8009e94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80038b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80038b8:	e027      	b.n	800390a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80038ba:	f107 0318 	add.w	r3, r7, #24
 80038be:	4618      	mov	r0, r3
 80038c0:	f006 fc3c 	bl	800a13c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80038c8:	e01f      	b.n	800390a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038ca:	4b21      	ldr	r3, [pc, #132]	@ (8003950 <UART_SetConfig+0x904>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80038d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003950 <UART_SetConfig+0x904>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	08db      	lsrs	r3, r3, #3
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003958 <UART_SetConfig+0x90c>)
 80038e2:	fa22 f303 	lsr.w	r3, r2, r3
 80038e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80038e8:	e00f      	b.n	800390a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80038ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003958 <UART_SetConfig+0x90c>)
 80038ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80038ee:	e00c      	b.n	800390a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80038f0:	4b1a      	ldr	r3, [pc, #104]	@ (800395c <UART_SetConfig+0x910>)
 80038f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80038f4:	e009      	b.n	800390a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80038fc:	e005      	b.n	800390a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003908:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800390a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 81ee 	beq.w	8003cee <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	4a12      	ldr	r2, [pc, #72]	@ (8003960 <UART_SetConfig+0x914>)
 8003918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800391c:	461a      	mov	r2, r3
 800391e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003920:	fbb3 f3f2 	udiv	r3, r3, r2
 8003924:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	4413      	add	r3, r2
 8003930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003932:	429a      	cmp	r2, r3
 8003934:	d305      	bcc.n	8003942 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800393c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800393e:	429a      	cmp	r2, r3
 8003940:	d910      	bls.n	8003964 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003948:	e1d1      	b.n	8003cee <UART_SetConfig+0xca2>
 800394a:	bf00      	nop
 800394c:	40011c00 	.word	0x40011c00
 8003950:	58024400 	.word	0x58024400
 8003954:	58000c00 	.word	0x58000c00
 8003958:	03d09000 	.word	0x03d09000
 800395c:	003d0900 	.word	0x003d0900
 8003960:	080115ac 	.word	0x080115ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003966:	2200      	movs	r2, #0
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	60fa      	str	r2, [r7, #12]
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	4ac0      	ldr	r2, [pc, #768]	@ (8003c74 <UART_SetConfig+0xc28>)
 8003972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003976:	b29b      	uxth	r3, r3
 8003978:	2200      	movs	r2, #0
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	607a      	str	r2, [r7, #4]
 800397e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003982:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003986:	f7fc febf 	bl	8000708 <__aeabi_uldivmod>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4610      	mov	r0, r2
 8003990:	4619      	mov	r1, r3
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	020b      	lsls	r3, r1, #8
 800399c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80039a0:	0202      	lsls	r2, r0, #8
 80039a2:	6979      	ldr	r1, [r7, #20]
 80039a4:	6849      	ldr	r1, [r1, #4]
 80039a6:	0849      	lsrs	r1, r1, #1
 80039a8:	2000      	movs	r0, #0
 80039aa:	460c      	mov	r4, r1
 80039ac:	4605      	mov	r5, r0
 80039ae:	eb12 0804 	adds.w	r8, r2, r4
 80039b2:	eb43 0905 	adc.w	r9, r3, r5
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	469a      	mov	sl, r3
 80039be:	4693      	mov	fp, r2
 80039c0:	4652      	mov	r2, sl
 80039c2:	465b      	mov	r3, fp
 80039c4:	4640      	mov	r0, r8
 80039c6:	4649      	mov	r1, r9
 80039c8:	f7fc fe9e 	bl	8000708 <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4613      	mov	r3, r2
 80039d2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039da:	d308      	bcc.n	80039ee <UART_SetConfig+0x9a2>
 80039dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039e2:	d204      	bcs.n	80039ee <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80039ea:	60da      	str	r2, [r3, #12]
 80039ec:	e17f      	b.n	8003cee <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80039f4:	e17b      	b.n	8003cee <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039fe:	f040 80bd 	bne.w	8003b7c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8003a02:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	dc48      	bgt.n	8003a9c <UART_SetConfig+0xa50>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	db7b      	blt.n	8003b06 <UART_SetConfig+0xaba>
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d879      	bhi.n	8003b06 <UART_SetConfig+0xaba>
 8003a12:	a201      	add	r2, pc, #4	@ (adr r2, 8003a18 <UART_SetConfig+0x9cc>)
 8003a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a18:	08003aa3 	.word	0x08003aa3
 8003a1c:	08003aab 	.word	0x08003aab
 8003a20:	08003b07 	.word	0x08003b07
 8003a24:	08003b07 	.word	0x08003b07
 8003a28:	08003ab3 	.word	0x08003ab3
 8003a2c:	08003b07 	.word	0x08003b07
 8003a30:	08003b07 	.word	0x08003b07
 8003a34:	08003b07 	.word	0x08003b07
 8003a38:	08003ac3 	.word	0x08003ac3
 8003a3c:	08003b07 	.word	0x08003b07
 8003a40:	08003b07 	.word	0x08003b07
 8003a44:	08003b07 	.word	0x08003b07
 8003a48:	08003b07 	.word	0x08003b07
 8003a4c:	08003b07 	.word	0x08003b07
 8003a50:	08003b07 	.word	0x08003b07
 8003a54:	08003b07 	.word	0x08003b07
 8003a58:	08003ad3 	.word	0x08003ad3
 8003a5c:	08003b07 	.word	0x08003b07
 8003a60:	08003b07 	.word	0x08003b07
 8003a64:	08003b07 	.word	0x08003b07
 8003a68:	08003b07 	.word	0x08003b07
 8003a6c:	08003b07 	.word	0x08003b07
 8003a70:	08003b07 	.word	0x08003b07
 8003a74:	08003b07 	.word	0x08003b07
 8003a78:	08003b07 	.word	0x08003b07
 8003a7c:	08003b07 	.word	0x08003b07
 8003a80:	08003b07 	.word	0x08003b07
 8003a84:	08003b07 	.word	0x08003b07
 8003a88:	08003b07 	.word	0x08003b07
 8003a8c:	08003b07 	.word	0x08003b07
 8003a90:	08003b07 	.word	0x08003b07
 8003a94:	08003b07 	.word	0x08003b07
 8003a98:	08003af9 	.word	0x08003af9
 8003a9c:	2b40      	cmp	r3, #64	@ 0x40
 8003a9e:	d02e      	beq.n	8003afe <UART_SetConfig+0xab2>
 8003aa0:	e031      	b.n	8003b06 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa2:	f004 fff7 	bl	8008a94 <HAL_RCC_GetPCLK1Freq>
 8003aa6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003aa8:	e033      	b.n	8003b12 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aaa:	f005 f809 	bl	8008ac0 <HAL_RCC_GetPCLK2Freq>
 8003aae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003ab0:	e02f      	b.n	8003b12 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f006 f9ec 	bl	8009e94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003ac0:	e027      	b.n	8003b12 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ac2:	f107 0318 	add.w	r3, r7, #24
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f006 fb38 	bl	800a13c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003ad0:	e01f      	b.n	8003b12 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ad2:	4b69      	ldr	r3, [pc, #420]	@ (8003c78 <UART_SetConfig+0xc2c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003ade:	4b66      	ldr	r3, [pc, #408]	@ (8003c78 <UART_SetConfig+0xc2c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	08db      	lsrs	r3, r3, #3
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	4a64      	ldr	r2, [pc, #400]	@ (8003c7c <UART_SetConfig+0xc30>)
 8003aea:	fa22 f303 	lsr.w	r3, r2, r3
 8003aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003af0:	e00f      	b.n	8003b12 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8003af2:	4b62      	ldr	r3, [pc, #392]	@ (8003c7c <UART_SetConfig+0xc30>)
 8003af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003af6:	e00c      	b.n	8003b12 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003af8:	4b61      	ldr	r3, [pc, #388]	@ (8003c80 <UART_SetConfig+0xc34>)
 8003afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003afc:	e009      	b.n	8003b12 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003b04:	e005      	b.n	8003b12 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003b10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80ea 	beq.w	8003cee <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	4a55      	ldr	r2, [pc, #340]	@ (8003c74 <UART_SetConfig+0xc28>)
 8003b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b24:	461a      	mov	r2, r3
 8003b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b2c:	005a      	lsls	r2, r3, #1
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	085b      	lsrs	r3, r3, #1
 8003b34:	441a      	add	r2, r3
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b42:	2b0f      	cmp	r3, #15
 8003b44:	d916      	bls.n	8003b74 <UART_SetConfig+0xb28>
 8003b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b4c:	d212      	bcs.n	8003b74 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	f023 030f 	bic.w	r3, r3, #15
 8003b56:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003b66:	4313      	orrs	r3, r2
 8003b68:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	e0bc      	b.n	8003cee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003b7a:	e0b8      	b.n	8003cee <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	dc4b      	bgt.n	8003c1c <UART_SetConfig+0xbd0>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f2c0 8087 	blt.w	8003c98 <UART_SetConfig+0xc4c>
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	f200 8084 	bhi.w	8003c98 <UART_SetConfig+0xc4c>
 8003b90:	a201      	add	r2, pc, #4	@ (adr r2, 8003b98 <UART_SetConfig+0xb4c>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003c23 	.word	0x08003c23
 8003b9c:	08003c2b 	.word	0x08003c2b
 8003ba0:	08003c99 	.word	0x08003c99
 8003ba4:	08003c99 	.word	0x08003c99
 8003ba8:	08003c33 	.word	0x08003c33
 8003bac:	08003c99 	.word	0x08003c99
 8003bb0:	08003c99 	.word	0x08003c99
 8003bb4:	08003c99 	.word	0x08003c99
 8003bb8:	08003c43 	.word	0x08003c43
 8003bbc:	08003c99 	.word	0x08003c99
 8003bc0:	08003c99 	.word	0x08003c99
 8003bc4:	08003c99 	.word	0x08003c99
 8003bc8:	08003c99 	.word	0x08003c99
 8003bcc:	08003c99 	.word	0x08003c99
 8003bd0:	08003c99 	.word	0x08003c99
 8003bd4:	08003c99 	.word	0x08003c99
 8003bd8:	08003c53 	.word	0x08003c53
 8003bdc:	08003c99 	.word	0x08003c99
 8003be0:	08003c99 	.word	0x08003c99
 8003be4:	08003c99 	.word	0x08003c99
 8003be8:	08003c99 	.word	0x08003c99
 8003bec:	08003c99 	.word	0x08003c99
 8003bf0:	08003c99 	.word	0x08003c99
 8003bf4:	08003c99 	.word	0x08003c99
 8003bf8:	08003c99 	.word	0x08003c99
 8003bfc:	08003c99 	.word	0x08003c99
 8003c00:	08003c99 	.word	0x08003c99
 8003c04:	08003c99 	.word	0x08003c99
 8003c08:	08003c99 	.word	0x08003c99
 8003c0c:	08003c99 	.word	0x08003c99
 8003c10:	08003c99 	.word	0x08003c99
 8003c14:	08003c99 	.word	0x08003c99
 8003c18:	08003c8b 	.word	0x08003c8b
 8003c1c:	2b40      	cmp	r3, #64	@ 0x40
 8003c1e:	d037      	beq.n	8003c90 <UART_SetConfig+0xc44>
 8003c20:	e03a      	b.n	8003c98 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c22:	f004 ff37 	bl	8008a94 <HAL_RCC_GetPCLK1Freq>
 8003c26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003c28:	e03c      	b.n	8003ca4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c2a:	f004 ff49 	bl	8008ac0 <HAL_RCC_GetPCLK2Freq>
 8003c2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003c30:	e038      	b.n	8003ca4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c36:	4618      	mov	r0, r3
 8003c38:	f006 f92c 	bl	8009e94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003c40:	e030      	b.n	8003ca4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003c42:	f107 0318 	add.w	r3, r7, #24
 8003c46:	4618      	mov	r0, r3
 8003c48:	f006 fa78 	bl	800a13c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003c50:	e028      	b.n	8003ca4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c52:	4b09      	ldr	r3, [pc, #36]	@ (8003c78 <UART_SetConfig+0xc2c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d012      	beq.n	8003c84 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003c5e:	4b06      	ldr	r3, [pc, #24]	@ (8003c78 <UART_SetConfig+0xc2c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	08db      	lsrs	r3, r3, #3
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	4a04      	ldr	r2, [pc, #16]	@ (8003c7c <UART_SetConfig+0xc30>)
 8003c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c70:	e018      	b.n	8003ca4 <UART_SetConfig+0xc58>
 8003c72:	bf00      	nop
 8003c74:	080115ac 	.word	0x080115ac
 8003c78:	58024400 	.word	0x58024400
 8003c7c:	03d09000 	.word	0x03d09000
 8003c80:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8003c84:	4b24      	ldr	r3, [pc, #144]	@ (8003d18 <UART_SetConfig+0xccc>)
 8003c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003c88:	e00c      	b.n	8003ca4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003c8a:	4b24      	ldr	r3, [pc, #144]	@ (8003d1c <UART_SetConfig+0xcd0>)
 8003c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003c8e:	e009      	b.n	8003ca4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003c96:	e005      	b.n	8003ca4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003ca2:	bf00      	nop
    }

    if (pclk != 0U)
 8003ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d021      	beq.n	8003cee <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cae:	4a1c      	ldr	r2, [pc, #112]	@ (8003d20 <UART_SetConfig+0xcd4>)
 8003cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cb8:	fbb3 f2f2 	udiv	r2, r3, r2
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	085b      	lsrs	r3, r3, #1
 8003cc2:	441a      	add	r2, r3
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd0:	2b0f      	cmp	r3, #15
 8003cd2:	d909      	bls.n	8003ce8 <UART_SetConfig+0xc9c>
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cda:	d205      	bcs.n	8003ce8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60da      	str	r2, [r3, #12]
 8003ce6:	e002      	b.n	8003cee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2200      	movs	r2, #0
 8003d02:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2200      	movs	r2, #0
 8003d08:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003d0a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3748      	adds	r7, #72	@ 0x48
 8003d12:	46bd      	mov	sp, r7
 8003d14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d18:	03d09000 	.word	0x03d09000
 8003d1c:	003d0900 	.word	0x003d0900
 8003d20:	080115ac 	.word	0x080115ac

08003d24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01a      	beq.n	8003e3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e22:	d10a      	bne.n	8003e3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	605a      	str	r2, [r3, #4]
  }
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b098      	sub	sp, #96	@ 0x60
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e78:	f000 f9fa 	bl	8004270 <HAL_GetTick>
 8003e7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d12f      	bne.n	8003eec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e94:	2200      	movs	r2, #0
 8003e96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f88e 	bl	8003fbc <UART_WaitOnFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d022      	beq.n	8003eec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eae:	e853 3f00 	ldrex	r3, [r3]
 8003eb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eba:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ec6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003eca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ecc:	e841 2300 	strex	r3, r2, [r1]
 8003ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e6      	bne.n	8003ea6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e063      	b.n	8003fb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d149      	bne.n	8003f8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003efa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f02:	2200      	movs	r2, #0
 8003f04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f857 	bl	8003fbc <UART_WaitOnFlagUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d03c      	beq.n	8003f8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	e853 3f00 	ldrex	r3, [r3]
 8003f20:	623b      	str	r3, [r7, #32]
   return(result);
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f32:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f3a:	e841 2300 	strex	r3, r2, [r1]
 8003f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1e6      	bne.n	8003f14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3308      	adds	r3, #8
 8003f4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	e853 3f00 	ldrex	r3, [r3]
 8003f54:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f023 0301 	bic.w	r3, r3, #1
 8003f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3308      	adds	r3, #8
 8003f64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f66:	61fa      	str	r2, [r7, #28]
 8003f68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	69b9      	ldr	r1, [r7, #24]
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	e841 2300 	strex	r3, r2, [r1]
 8003f72:	617b      	str	r3, [r7, #20]
   return(result);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e5      	bne.n	8003f46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e012      	b.n	8003fb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3758      	adds	r7, #88	@ 0x58
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fcc:	e04f      	b.n	800406e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d04b      	beq.n	800406e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd6:	f000 f94b 	bl	8004270 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d302      	bcc.n	8003fec <UART_WaitOnFlagUntilTimeout+0x30>
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e04e      	b.n	800408e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d037      	beq.n	800406e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b80      	cmp	r3, #128	@ 0x80
 8004002:	d034      	beq.n	800406e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b40      	cmp	r3, #64	@ 0x40
 8004008:	d031      	beq.n	800406e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b08      	cmp	r3, #8
 8004016:	d110      	bne.n	800403a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2208      	movs	r2, #8
 800401e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f839 	bl	8004098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2208      	movs	r2, #8
 800402a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e029      	b.n	800408e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004044:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004048:	d111      	bne.n	800406e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f81f 	bl	8004098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e00f      	b.n	800408e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4013      	ands	r3, r2
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	429a      	cmp	r2, r3
 800407c:	bf0c      	ite	eq
 800407e:	2301      	moveq	r3, #1
 8004080:	2300      	movne	r3, #0
 8004082:	b2db      	uxtb	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	79fb      	ldrb	r3, [r7, #7]
 8004088:	429a      	cmp	r2, r3
 800408a:	d0a0      	beq.n	8003fce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004098:	b480      	push	{r7}
 800409a:	b095      	sub	sp, #84	@ 0x54
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040be:	643b      	str	r3, [r7, #64]	@ 0x40
 80040c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e6      	bne.n	80040a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3308      	adds	r3, #8
 80040d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80040e2:	69fa      	ldr	r2, [r7, #28]
 80040e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004160 <UART_EndRxTransfer+0xc8>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3308      	adds	r3, #8
 80040f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040fa:	e841 2300 	strex	r3, r2, [r1]
 80040fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1e5      	bne.n	80040d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d118      	bne.n	8004140 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	60bb      	str	r3, [r7, #8]
   return(result);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f023 0310 	bic.w	r3, r3, #16
 8004122:	647b      	str	r3, [r7, #68]	@ 0x44
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	6979      	ldr	r1, [r7, #20]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	613b      	str	r3, [r7, #16]
   return(result);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e6      	bne.n	800410e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004154:	bf00      	nop
 8004156:	3754      	adds	r7, #84	@ 0x54
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	effffffe 	.word	0xeffffffe

08004164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800416a:	2003      	movs	r0, #3
 800416c:	f000 f980 	bl	8004470 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004170:	f004 fae6 	bl	8008740 <HAL_RCC_GetSysClockFreq>
 8004174:	4602      	mov	r2, r0
 8004176:	4b15      	ldr	r3, [pc, #84]	@ (80041cc <HAL_Init+0x68>)
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	0a1b      	lsrs	r3, r3, #8
 800417c:	f003 030f 	and.w	r3, r3, #15
 8004180:	4913      	ldr	r1, [pc, #76]	@ (80041d0 <HAL_Init+0x6c>)
 8004182:	5ccb      	ldrb	r3, [r1, r3]
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
 800418c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800418e:	4b0f      	ldr	r3, [pc, #60]	@ (80041cc <HAL_Init+0x68>)
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	4a0e      	ldr	r2, [pc, #56]	@ (80041d0 <HAL_Init+0x6c>)
 8004198:	5cd3      	ldrb	r3, [r2, r3]
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
 80041a4:	4a0b      	ldr	r2, [pc, #44]	@ (80041d4 <HAL_Init+0x70>)
 80041a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041a8:	4a0b      	ldr	r2, [pc, #44]	@ (80041d8 <HAL_Init+0x74>)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041ae:	200f      	movs	r0, #15
 80041b0:	f000 f814 	bl	80041dc <HAL_InitTick>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e002      	b.n	80041c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80041be:	f7fe fc07 	bl	80029d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	58024400 	.word	0x58024400
 80041d0:	0801159c 	.word	0x0801159c
 80041d4:	24000040 	.word	0x24000040
 80041d8:	2400003c 	.word	0x2400003c

080041dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80041e4:	4b15      	ldr	r3, [pc, #84]	@ (800423c <HAL_InitTick+0x60>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e021      	b.n	8004234 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80041f0:	4b13      	ldr	r3, [pc, #76]	@ (8004240 <HAL_InitTick+0x64>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	4b11      	ldr	r3, [pc, #68]	@ (800423c <HAL_InitTick+0x60>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	4619      	mov	r1, r3
 80041fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004202:	fbb2 f3f3 	udiv	r3, r2, r3
 8004206:	4618      	mov	r0, r3
 8004208:	f000 f965 	bl	80044d6 <HAL_SYSTICK_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e00e      	b.n	8004234 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b0f      	cmp	r3, #15
 800421a:	d80a      	bhi.n	8004232 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800421c:	2200      	movs	r2, #0
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	f04f 30ff 	mov.w	r0, #4294967295
 8004224:	f000 f92f 	bl	8004486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004228:	4a06      	ldr	r2, [pc, #24]	@ (8004244 <HAL_InitTick+0x68>)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	e000      	b.n	8004234 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
}
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	24000048 	.word	0x24000048
 8004240:	2400003c 	.word	0x2400003c
 8004244:	24000044 	.word	0x24000044

08004248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800424c:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <HAL_IncTick+0x20>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	4b06      	ldr	r3, [pc, #24]	@ (800426c <HAL_IncTick+0x24>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4413      	add	r3, r2
 8004258:	4a04      	ldr	r2, [pc, #16]	@ (800426c <HAL_IncTick+0x24>)
 800425a:	6013      	str	r3, [r2, #0]
}
 800425c:	bf00      	nop
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	24000048 	.word	0x24000048
 800426c:	240013a8 	.word	0x240013a8

08004270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  return uwTick;
 8004274:	4b03      	ldr	r3, [pc, #12]	@ (8004284 <HAL_GetTick+0x14>)
 8004276:	681b      	ldr	r3, [r3, #0]
}
 8004278:	4618      	mov	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	240013a8 	.word	0x240013a8

08004288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004290:	f7ff ffee 	bl	8004270 <HAL_GetTick>
 8004294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a0:	d005      	beq.n	80042ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042a2:	4b0a      	ldr	r3, [pc, #40]	@ (80042cc <HAL_Delay+0x44>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4413      	add	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042ae:	bf00      	nop
 80042b0:	f7ff ffde 	bl	8004270 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d8f7      	bhi.n	80042b0 <HAL_Delay+0x28>
  {
  }
}
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	24000048 	.word	0x24000048

080042d0 <__NVIC_SetPriorityGrouping>:
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004310 <__NVIC_SetPriorityGrouping+0x40>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042ec:	4013      	ands	r3, r2
 80042ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80042f8:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <__NVIC_SetPriorityGrouping+0x44>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042fe:	4a04      	ldr	r2, [pc, #16]	@ (8004310 <__NVIC_SetPriorityGrouping+0x40>)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	60d3      	str	r3, [r2, #12]
}
 8004304:	bf00      	nop
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	e000ed00 	.word	0xe000ed00
 8004314:	05fa0000 	.word	0x05fa0000

08004318 <__NVIC_GetPriorityGrouping>:
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800431c:	4b04      	ldr	r3, [pc, #16]	@ (8004330 <__NVIC_GetPriorityGrouping+0x18>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	0a1b      	lsrs	r3, r3, #8
 8004322:	f003 0307 	and.w	r3, r3, #7
}
 8004326:	4618      	mov	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	e000ed00 	.word	0xe000ed00

08004334 <__NVIC_EnableIRQ>:
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800433e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004342:	2b00      	cmp	r3, #0
 8004344:	db0b      	blt.n	800435e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	f003 021f 	and.w	r2, r3, #31
 800434c:	4907      	ldr	r1, [pc, #28]	@ (800436c <__NVIC_EnableIRQ+0x38>)
 800434e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2001      	movs	r0, #1
 8004356:	fa00 f202 	lsl.w	r2, r0, r2
 800435a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	e000e100 	.word	0xe000e100

08004370 <__NVIC_SetPriority>:
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	6039      	str	r1, [r7, #0]
 800437a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800437c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004380:	2b00      	cmp	r3, #0
 8004382:	db0a      	blt.n	800439a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	b2da      	uxtb	r2, r3
 8004388:	490c      	ldr	r1, [pc, #48]	@ (80043bc <__NVIC_SetPriority+0x4c>)
 800438a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800438e:	0112      	lsls	r2, r2, #4
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	440b      	add	r3, r1
 8004394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004398:	e00a      	b.n	80043b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	b2da      	uxtb	r2, r3
 800439e:	4908      	ldr	r1, [pc, #32]	@ (80043c0 <__NVIC_SetPriority+0x50>)
 80043a0:	88fb      	ldrh	r3, [r7, #6]
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	3b04      	subs	r3, #4
 80043a8:	0112      	lsls	r2, r2, #4
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	440b      	add	r3, r1
 80043ae:	761a      	strb	r2, [r3, #24]
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	e000e100 	.word	0xe000e100
 80043c0:	e000ed00 	.word	0xe000ed00

080043c4 <NVIC_EncodePriority>:
{
 80043c4:	b480      	push	{r7}
 80043c6:	b089      	sub	sp, #36	@ 0x24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f1c3 0307 	rsb	r3, r3, #7
 80043de:	2b04      	cmp	r3, #4
 80043e0:	bf28      	it	cs
 80043e2:	2304      	movcs	r3, #4
 80043e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3304      	adds	r3, #4
 80043ea:	2b06      	cmp	r3, #6
 80043ec:	d902      	bls.n	80043f4 <NVIC_EncodePriority+0x30>
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	3b03      	subs	r3, #3
 80043f2:	e000      	b.n	80043f6 <NVIC_EncodePriority+0x32>
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f8:	f04f 32ff 	mov.w	r2, #4294967295
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43da      	mvns	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	401a      	ands	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800440c:	f04f 31ff 	mov.w	r1, #4294967295
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	fa01 f303 	lsl.w	r3, r1, r3
 8004416:	43d9      	mvns	r1, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800441c:	4313      	orrs	r3, r2
}
 800441e:	4618      	mov	r0, r3
 8004420:	3724      	adds	r7, #36	@ 0x24
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3b01      	subs	r3, #1
 8004438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800443c:	d301      	bcc.n	8004442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800443e:	2301      	movs	r3, #1
 8004440:	e00f      	b.n	8004462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004442:	4a0a      	ldr	r2, [pc, #40]	@ (800446c <SysTick_Config+0x40>)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3b01      	subs	r3, #1
 8004448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800444a:	210f      	movs	r1, #15
 800444c:	f04f 30ff 	mov.w	r0, #4294967295
 8004450:	f7ff ff8e 	bl	8004370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004454:	4b05      	ldr	r3, [pc, #20]	@ (800446c <SysTick_Config+0x40>)
 8004456:	2200      	movs	r2, #0
 8004458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800445a:	4b04      	ldr	r3, [pc, #16]	@ (800446c <SysTick_Config+0x40>)
 800445c:	2207      	movs	r2, #7
 800445e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	e000e010 	.word	0xe000e010

08004470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff ff29 	bl	80042d0 <__NVIC_SetPriorityGrouping>
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b086      	sub	sp, #24
 800448a:	af00      	add	r7, sp, #0
 800448c:	4603      	mov	r3, r0
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004494:	f7ff ff40 	bl	8004318 <__NVIC_GetPriorityGrouping>
 8004498:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	68b9      	ldr	r1, [r7, #8]
 800449e:	6978      	ldr	r0, [r7, #20]
 80044a0:	f7ff ff90 	bl	80043c4 <NVIC_EncodePriority>
 80044a4:	4602      	mov	r2, r0
 80044a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044aa:	4611      	mov	r1, r2
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff ff5f 	bl	8004370 <__NVIC_SetPriority>
}
 80044b2:	bf00      	nop
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	4603      	mov	r3, r0
 80044c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff ff33 	bl	8004334 <__NVIC_EnableIRQ>
}
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff ffa4 	bl	800442c <SysTick_Config>
 80044e4:	4603      	mov	r3, r0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80044f4:	f3bf 8f5f 	dmb	sy
}
 80044f8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80044fa:	4b07      	ldr	r3, [pc, #28]	@ (8004518 <HAL_MPU_Disable+0x28>)
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	4a06      	ldr	r2, [pc, #24]	@ (8004518 <HAL_MPU_Disable+0x28>)
 8004500:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004504:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004506:	4b05      	ldr	r3, [pc, #20]	@ (800451c <HAL_MPU_Disable+0x2c>)
 8004508:	2200      	movs	r2, #0
 800450a:	605a      	str	r2, [r3, #4]
}
 800450c:	bf00      	nop
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	e000ed00 	.word	0xe000ed00
 800451c:	e000ed90 	.word	0xe000ed90

08004520 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004528:	4a0b      	ldr	r2, [pc, #44]	@ (8004558 <HAL_MPU_Enable+0x38>)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f043 0301 	orr.w	r3, r3, #1
 8004530:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004532:	4b0a      	ldr	r3, [pc, #40]	@ (800455c <HAL_MPU_Enable+0x3c>)
 8004534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004536:	4a09      	ldr	r2, [pc, #36]	@ (800455c <HAL_MPU_Enable+0x3c>)
 8004538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800453c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800453e:	f3bf 8f4f 	dsb	sy
}
 8004542:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004544:	f3bf 8f6f 	isb	sy
}
 8004548:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	e000ed90 	.word	0xe000ed90
 800455c:	e000ed00 	.word	0xe000ed00

08004560 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	785a      	ldrb	r2, [r3, #1]
 800456c:	4b1b      	ldr	r3, [pc, #108]	@ (80045dc <HAL_MPU_ConfigRegion+0x7c>)
 800456e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004570:	4b1a      	ldr	r3, [pc, #104]	@ (80045dc <HAL_MPU_ConfigRegion+0x7c>)
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	4a19      	ldr	r2, [pc, #100]	@ (80045dc <HAL_MPU_ConfigRegion+0x7c>)
 8004576:	f023 0301 	bic.w	r3, r3, #1
 800457a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800457c:	4a17      	ldr	r2, [pc, #92]	@ (80045dc <HAL_MPU_ConfigRegion+0x7c>)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	7b1b      	ldrb	r3, [r3, #12]
 8004588:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	7adb      	ldrb	r3, [r3, #11]
 800458e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004590:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	7a9b      	ldrb	r3, [r3, #10]
 8004596:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004598:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	7b5b      	ldrb	r3, [r3, #13]
 800459e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80045a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	7b9b      	ldrb	r3, [r3, #14]
 80045a6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80045a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	7bdb      	ldrb	r3, [r3, #15]
 80045ae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80045b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	7a5b      	ldrb	r3, [r3, #9]
 80045b6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80045b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	7a1b      	ldrb	r3, [r3, #8]
 80045be:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80045c0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	7812      	ldrb	r2, [r2, #0]
 80045c6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80045c8:	4a04      	ldr	r2, [pc, #16]	@ (80045dc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80045ca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80045cc:	6113      	str	r3, [r2, #16]
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	e000ed90 	.word	0xe000ed90

080045e0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	460b      	mov	r3, r1
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e00a      	b.n	8004612 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80045fc:	7afb      	ldrb	r3, [r7, #11]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d103      	bne.n	800460a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	605a      	str	r2, [r3, #4]
      break;
 8004608:	e002      	b.n	8004610 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	75fb      	strb	r3, [r7, #23]
      break;
 800460e:	bf00      	nop
  }

  return status;
 8004610:	7dfb      	ldrb	r3, [r7, #23]
}
 8004612:	4618      	mov	r0, r3
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e003      	b.n	800463a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004638:	2300      	movs	r3, #0
  }
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004648:	b480      	push	{r7}
 800464a:	b089      	sub	sp, #36	@ 0x24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004656:	4b89      	ldr	r3, [pc, #548]	@ (800487c <HAL_GPIO_Init+0x234>)
 8004658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800465a:	e194      	b.n	8004986 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	2101      	movs	r1, #1
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	fa01 f303 	lsl.w	r3, r1, r3
 8004668:	4013      	ands	r3, r2
 800466a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 8186 	beq.w	8004980 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 0303 	and.w	r3, r3, #3
 800467c:	2b01      	cmp	r3, #1
 800467e:	d005      	beq.n	800468c <HAL_GPIO_Init+0x44>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d130      	bne.n	80046ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	2203      	movs	r2, #3
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43db      	mvns	r3, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4013      	ands	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046c2:	2201      	movs	r2, #1
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43db      	mvns	r3, r3
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4013      	ands	r3, r2
 80046d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	091b      	lsrs	r3, r3, #4
 80046d8:	f003 0201 	and.w	r2, r3, #1
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d017      	beq.n	800472a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	2203      	movs	r2, #3
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	43db      	mvns	r3, r3
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4013      	ands	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4313      	orrs	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d123      	bne.n	800477e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	08da      	lsrs	r2, r3, #3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3208      	adds	r2, #8
 800473e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	220f      	movs	r2, #15
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	43db      	mvns	r3, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4013      	ands	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	691a      	ldr	r2, [r3, #16]
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4313      	orrs	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	08da      	lsrs	r2, r3, #3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3208      	adds	r2, #8
 8004778:	69b9      	ldr	r1, [r7, #24]
 800477a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	2203      	movs	r2, #3
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4013      	ands	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f003 0203 	and.w	r2, r3, #3
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 80e0 	beq.w	8004980 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004880 <HAL_GPIO_Init+0x238>)
 80047c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80047c6:	4a2e      	ldr	r2, [pc, #184]	@ (8004880 <HAL_GPIO_Init+0x238>)
 80047c8:	f043 0302 	orr.w	r3, r3, #2
 80047cc:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80047d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004880 <HAL_GPIO_Init+0x238>)
 80047d2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047de:	4a29      	ldr	r2, [pc, #164]	@ (8004884 <HAL_GPIO_Init+0x23c>)
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	089b      	lsrs	r3, r3, #2
 80047e4:	3302      	adds	r3, #2
 80047e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	220f      	movs	r2, #15
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	43db      	mvns	r3, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4013      	ands	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a20      	ldr	r2, [pc, #128]	@ (8004888 <HAL_GPIO_Init+0x240>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d052      	beq.n	80048b0 <HAL_GPIO_Init+0x268>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a1f      	ldr	r2, [pc, #124]	@ (800488c <HAL_GPIO_Init+0x244>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d031      	beq.n	8004876 <HAL_GPIO_Init+0x22e>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a1e      	ldr	r2, [pc, #120]	@ (8004890 <HAL_GPIO_Init+0x248>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d02b      	beq.n	8004872 <HAL_GPIO_Init+0x22a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a1d      	ldr	r2, [pc, #116]	@ (8004894 <HAL_GPIO_Init+0x24c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d025      	beq.n	800486e <HAL_GPIO_Init+0x226>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1c      	ldr	r2, [pc, #112]	@ (8004898 <HAL_GPIO_Init+0x250>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d01f      	beq.n	800486a <HAL_GPIO_Init+0x222>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1b      	ldr	r2, [pc, #108]	@ (800489c <HAL_GPIO_Init+0x254>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d019      	beq.n	8004866 <HAL_GPIO_Init+0x21e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a1a      	ldr	r2, [pc, #104]	@ (80048a0 <HAL_GPIO_Init+0x258>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d013      	beq.n	8004862 <HAL_GPIO_Init+0x21a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a19      	ldr	r2, [pc, #100]	@ (80048a4 <HAL_GPIO_Init+0x25c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00d      	beq.n	800485e <HAL_GPIO_Init+0x216>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a18      	ldr	r2, [pc, #96]	@ (80048a8 <HAL_GPIO_Init+0x260>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d007      	beq.n	800485a <HAL_GPIO_Init+0x212>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a17      	ldr	r2, [pc, #92]	@ (80048ac <HAL_GPIO_Init+0x264>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d101      	bne.n	8004856 <HAL_GPIO_Init+0x20e>
 8004852:	2309      	movs	r3, #9
 8004854:	e02d      	b.n	80048b2 <HAL_GPIO_Init+0x26a>
 8004856:	230a      	movs	r3, #10
 8004858:	e02b      	b.n	80048b2 <HAL_GPIO_Init+0x26a>
 800485a:	2308      	movs	r3, #8
 800485c:	e029      	b.n	80048b2 <HAL_GPIO_Init+0x26a>
 800485e:	2307      	movs	r3, #7
 8004860:	e027      	b.n	80048b2 <HAL_GPIO_Init+0x26a>
 8004862:	2306      	movs	r3, #6
 8004864:	e025      	b.n	80048b2 <HAL_GPIO_Init+0x26a>
 8004866:	2305      	movs	r3, #5
 8004868:	e023      	b.n	80048b2 <HAL_GPIO_Init+0x26a>
 800486a:	2304      	movs	r3, #4
 800486c:	e021      	b.n	80048b2 <HAL_GPIO_Init+0x26a>
 800486e:	2303      	movs	r3, #3
 8004870:	e01f      	b.n	80048b2 <HAL_GPIO_Init+0x26a>
 8004872:	2302      	movs	r3, #2
 8004874:	e01d      	b.n	80048b2 <HAL_GPIO_Init+0x26a>
 8004876:	2301      	movs	r3, #1
 8004878:	e01b      	b.n	80048b2 <HAL_GPIO_Init+0x26a>
 800487a:	bf00      	nop
 800487c:	58000080 	.word	0x58000080
 8004880:	58024400 	.word	0x58024400
 8004884:	58000400 	.word	0x58000400
 8004888:	58020000 	.word	0x58020000
 800488c:	58020400 	.word	0x58020400
 8004890:	58020800 	.word	0x58020800
 8004894:	58020c00 	.word	0x58020c00
 8004898:	58021000 	.word	0x58021000
 800489c:	58021400 	.word	0x58021400
 80048a0:	58021800 	.word	0x58021800
 80048a4:	58021c00 	.word	0x58021c00
 80048a8:	58022000 	.word	0x58022000
 80048ac:	58022400 	.word	0x58022400
 80048b0:	2300      	movs	r3, #0
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	f002 0203 	and.w	r2, r2, #3
 80048b8:	0092      	lsls	r2, r2, #2
 80048ba:	4093      	lsls	r3, r2
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048c2:	4938      	ldr	r1, [pc, #224]	@ (80049a4 <HAL_GPIO_Init+0x35c>)
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	089b      	lsrs	r3, r3, #2
 80048c8:	3302      	adds	r3, #2
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	43db      	mvns	r3, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4013      	ands	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80048f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	43db      	mvns	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4013      	ands	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004924:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	43db      	mvns	r3, r3
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	4013      	ands	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	43db      	mvns	r3, r3
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	4013      	ands	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	3301      	adds	r3, #1
 8004984:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	f47f ae63 	bne.w	800465c <HAL_GPIO_Init+0x14>
  }
}
 8004996:	bf00      	nop
 8004998:	bf00      	nop
 800499a:	3724      	adds	r7, #36	@ 0x24
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	58000400 	.word	0x58000400

080049a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80049b6:	4b75      	ldr	r3, [pc, #468]	@ (8004b8c <HAL_GPIO_DeInit+0x1e4>)
 80049b8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80049ba:	e0d9      	b.n	8004b70 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80049bc:	2201      	movs	r2, #1
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	4013      	ands	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80cc 	beq.w	8004b6a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80049d2:	4a6f      	ldr	r2, [pc, #444]	@ (8004b90 <HAL_GPIO_DeInit+0x1e8>)
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	089b      	lsrs	r3, r3, #2
 80049d8:	3302      	adds	r3, #2
 80049da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049de:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	220f      	movs	r2, #15
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	4013      	ands	r3, r2
 80049f2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a67      	ldr	r2, [pc, #412]	@ (8004b94 <HAL_GPIO_DeInit+0x1ec>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d037      	beq.n	8004a6c <HAL_GPIO_DeInit+0xc4>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a66      	ldr	r2, [pc, #408]	@ (8004b98 <HAL_GPIO_DeInit+0x1f0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d031      	beq.n	8004a68 <HAL_GPIO_DeInit+0xc0>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a65      	ldr	r2, [pc, #404]	@ (8004b9c <HAL_GPIO_DeInit+0x1f4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d02b      	beq.n	8004a64 <HAL_GPIO_DeInit+0xbc>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a64      	ldr	r2, [pc, #400]	@ (8004ba0 <HAL_GPIO_DeInit+0x1f8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d025      	beq.n	8004a60 <HAL_GPIO_DeInit+0xb8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a63      	ldr	r2, [pc, #396]	@ (8004ba4 <HAL_GPIO_DeInit+0x1fc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d01f      	beq.n	8004a5c <HAL_GPIO_DeInit+0xb4>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a62      	ldr	r2, [pc, #392]	@ (8004ba8 <HAL_GPIO_DeInit+0x200>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d019      	beq.n	8004a58 <HAL_GPIO_DeInit+0xb0>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a61      	ldr	r2, [pc, #388]	@ (8004bac <HAL_GPIO_DeInit+0x204>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d013      	beq.n	8004a54 <HAL_GPIO_DeInit+0xac>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a60      	ldr	r2, [pc, #384]	@ (8004bb0 <HAL_GPIO_DeInit+0x208>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00d      	beq.n	8004a50 <HAL_GPIO_DeInit+0xa8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a5f      	ldr	r2, [pc, #380]	@ (8004bb4 <HAL_GPIO_DeInit+0x20c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d007      	beq.n	8004a4c <HAL_GPIO_DeInit+0xa4>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a5e      	ldr	r2, [pc, #376]	@ (8004bb8 <HAL_GPIO_DeInit+0x210>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d101      	bne.n	8004a48 <HAL_GPIO_DeInit+0xa0>
 8004a44:	2309      	movs	r3, #9
 8004a46:	e012      	b.n	8004a6e <HAL_GPIO_DeInit+0xc6>
 8004a48:	230a      	movs	r3, #10
 8004a4a:	e010      	b.n	8004a6e <HAL_GPIO_DeInit+0xc6>
 8004a4c:	2308      	movs	r3, #8
 8004a4e:	e00e      	b.n	8004a6e <HAL_GPIO_DeInit+0xc6>
 8004a50:	2307      	movs	r3, #7
 8004a52:	e00c      	b.n	8004a6e <HAL_GPIO_DeInit+0xc6>
 8004a54:	2306      	movs	r3, #6
 8004a56:	e00a      	b.n	8004a6e <HAL_GPIO_DeInit+0xc6>
 8004a58:	2305      	movs	r3, #5
 8004a5a:	e008      	b.n	8004a6e <HAL_GPIO_DeInit+0xc6>
 8004a5c:	2304      	movs	r3, #4
 8004a5e:	e006      	b.n	8004a6e <HAL_GPIO_DeInit+0xc6>
 8004a60:	2303      	movs	r3, #3
 8004a62:	e004      	b.n	8004a6e <HAL_GPIO_DeInit+0xc6>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e002      	b.n	8004a6e <HAL_GPIO_DeInit+0xc6>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <HAL_GPIO_DeInit+0xc6>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	f002 0203 	and.w	r2, r2, #3
 8004a74:	0092      	lsls	r2, r2, #2
 8004a76:	4093      	lsls	r3, r2
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d136      	bne.n	8004aec <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	43db      	mvns	r3, r3
 8004a86:	401a      	ands	r2, r3
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	43db      	mvns	r3, r3
 8004a94:	401a      	ands	r2, r3
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004a9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	43db      	mvns	r3, r3
 8004aa4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004aac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004aba:	4013      	ands	r3, r2
 8004abc:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f003 0303 	and.w	r3, r3, #3
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	220f      	movs	r2, #15
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004ace:	4a30      	ldr	r2, [pc, #192]	@ (8004b90 <HAL_GPIO_DeInit+0x1e8>)
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	089b      	lsrs	r3, r3, #2
 8004ad4:	3302      	adds	r3, #2
 8004ad6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	43da      	mvns	r2, r3
 8004ade:	482c      	ldr	r0, [pc, #176]	@ (8004b90 <HAL_GPIO_DeInit+0x1e8>)
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	089b      	lsrs	r3, r3, #2
 8004ae4:	400a      	ands	r2, r1
 8004ae6:	3302      	adds	r3, #2
 8004ae8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	2103      	movs	r1, #3
 8004af6:	fa01 f303 	lsl.w	r3, r1, r3
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	08da      	lsrs	r2, r3, #3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3208      	adds	r2, #8
 8004b08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	220f      	movs	r2, #15
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	08d2      	lsrs	r2, r2, #3
 8004b20:	4019      	ands	r1, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3208      	adds	r2, #8
 8004b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	2103      	movs	r1, #3
 8004b34:	fa01 f303 	lsl.w	r3, r1, r3
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	401a      	ands	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	2101      	movs	r1, #1
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	401a      	ands	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	2103      	movs	r1, #3
 8004b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b62:	43db      	mvns	r3, r3
 8004b64:	401a      	ands	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	fa22 f303 	lsr.w	r3, r2, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f47f af1f 	bne.w	80049bc <HAL_GPIO_DeInit+0x14>
  }
}
 8004b7e:	bf00      	nop
 8004b80:	bf00      	nop
 8004b82:	371c      	adds	r7, #28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	58000080 	.word	0x58000080
 8004b90:	58000400 	.word	0x58000400
 8004b94:	58020000 	.word	0x58020000
 8004b98:	58020400 	.word	0x58020400
 8004b9c:	58020800 	.word	0x58020800
 8004ba0:	58020c00 	.word	0x58020c00
 8004ba4:	58021000 	.word	0x58021000
 8004ba8:	58021400 	.word	0x58021400
 8004bac:	58021800 	.word	0x58021800
 8004bb0:	58021c00 	.word	0x58021c00
 8004bb4:	58022000 	.word	0x58022000
 8004bb8:	58022400 	.word	0x58022400

08004bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	807b      	strh	r3, [r7, #2]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bcc:	787b      	ldrb	r3, [r7, #1]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bd2:	887a      	ldrh	r2, [r7, #2]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004bd8:	e003      	b.n	8004be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004bda:	887b      	ldrh	r3, [r7, #2]
 8004bdc:	041a      	lsls	r2, r3, #16
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	619a      	str	r2, [r3, #24]
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b085      	sub	sp, #20
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c00:	887a      	ldrh	r2, [r7, #2]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4013      	ands	r3, r2
 8004c06:	041a      	lsls	r2, r3, #16
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	43d9      	mvns	r1, r3
 8004c0c:	887b      	ldrh	r3, [r7, #2]
 8004c0e:	400b      	ands	r3, r1
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	619a      	str	r2, [r3, #24]
}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af02      	add	r7, sp, #8
 8004c28:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e04f      	b.n	8004cd4 <HAL_HCD_Init+0xb2>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d106      	bne.n	8004c4e <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f00a fdeb 	bl	800f824 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2203      	movs	r2, #3
 8004c52:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f005 fda9 	bl	800a7b2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	7c1a      	ldrb	r2, [r3, #16]
 8004c68:	f88d 2000 	strb.w	r2, [sp]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c70:	f005 fd1c 	bl	800a6ac <USB_CoreInit>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <HAL_HCD_Init+0x64>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e026      	b.n	8004cd4 <HAL_HCD_Init+0xb2>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f005 fda1 	bl	800a7d4 <USB_SetCurrentMode>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_HCD_Init+0x82>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e017      	b.n	8004cd4 <HAL_HCD_Init+0xb2>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	7c1a      	ldrb	r2, [r3, #16]
 8004cac:	f88d 2000 	strb.w	r2, [sp]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cb4:	f005 ff44 	bl	800ab40 <USB_HostInit>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d005      	beq.n	8004cca <HAL_HCD_Init+0xa8>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e004      	b.n	8004cd4 <HAL_HCD_Init+0xb2>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004cdc:	b590      	push	{r4, r7, lr}
 8004cde:	b08b      	sub	sp, #44	@ 0x2c
 8004ce0:	af04      	add	r7, sp, #16
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4603      	mov	r3, r0
 8004cec:	70fb      	strb	r3, [r7, #3]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	70bb      	strb	r3, [r7, #2]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004cf6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004cf8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_HCD_HC_Init+0x2c>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e09d      	b.n	8004e44 <HAL_HCD_HC_Init+0x168>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	3319      	adds	r3, #25
 8004d20:	2200      	movs	r2, #0
 8004d22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004d24:	78fa      	ldrb	r2, [r7, #3]
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	1a9b      	subs	r3, r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	3314      	adds	r3, #20
 8004d34:	787a      	ldrb	r2, [r7, #1]
 8004d36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004d38:	78fa      	ldrb	r2, [r7, #3]
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	3315      	adds	r3, #21
 8004d48:	78fa      	ldrb	r2, [r7, #3]
 8004d4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004d4c:	78fa      	ldrb	r2, [r7, #3]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	3326      	adds	r3, #38	@ 0x26
 8004d5c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004d60:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	78bb      	ldrb	r3, [r7, #2]
 8004d66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d6a:	b2d8      	uxtb	r0, r3
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	1a9b      	subs	r3, r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	3316      	adds	r3, #22
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	4619      	mov	r1, r3
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fbb3 	bl	80054ee <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004d88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	da0a      	bge.n	8004da6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004d90:	78fa      	ldrb	r2, [r7, #3]
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	1a9b      	subs	r3, r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	3317      	adds	r3, #23
 8004da0:	2201      	movs	r2, #1
 8004da2:	701a      	strb	r2, [r3, #0]
 8004da4:	e009      	b.n	8004dba <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004da6:	78fa      	ldrb	r2, [r7, #3]
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	4613      	mov	r3, r2
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	1a9b      	subs	r3, r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	440b      	add	r3, r1
 8004db4:	3317      	adds	r3, #23
 8004db6:	2200      	movs	r2, #0
 8004db8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f006 f808 	bl	800add4 <USB_GetHostSpeed>
 8004dc4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8004dc6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d10b      	bne.n	8004de6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8004dce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d107      	bne.n	8004de6 <HAL_HCD_HC_Init+0x10a>
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d104      	bne.n	8004de6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2bbc      	cmp	r3, #188	@ 0xbc
 8004de0:	d901      	bls.n	8004de6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004de2:	23bc      	movs	r3, #188	@ 0xbc
 8004de4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004de6:	78fa      	ldrb	r2, [r7, #3]
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	3318      	adds	r3, #24
 8004df6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004dfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8004dfc:	78fa      	ldrb	r2, [r7, #3]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	b298      	uxth	r0, r3
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	4613      	mov	r3, r2
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	1a9b      	subs	r3, r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	3328      	adds	r3, #40	@ 0x28
 8004e10:	4602      	mov	r2, r0
 8004e12:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	787c      	ldrb	r4, [r7, #1]
 8004e1e:	78ba      	ldrb	r2, [r7, #2]
 8004e20:	78f9      	ldrb	r1, [r7, #3]
 8004e22:	9302      	str	r3, [sp, #8]
 8004e24:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	4623      	mov	r3, r4
 8004e32:	f005 fff7 	bl	800ae24 <USB_HC_Init>
 8004e36:	4603      	mov	r3, r0
 8004e38:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	371c      	adds	r7, #28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd90      	pop	{r4, r7, pc}

08004e4c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_HCD_HC_Halt+0x1e>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e00f      	b.n	8004e8a <HAL_HCD_HC_Halt+0x3e>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	78fa      	ldrb	r2, [r7, #3]
 8004e78:	4611      	mov	r1, r2
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f006 fb77 	bl	800b56e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	4608      	mov	r0, r1
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	70fb      	strb	r3, [r7, #3]
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	70bb      	strb	r3, [r7, #2]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004eae:	78fa      	ldrb	r2, [r7, #3]
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	1a9b      	subs	r3, r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	3317      	adds	r3, #23
 8004ebe:	78ba      	ldrb	r2, [r7, #2]
 8004ec0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	3326      	adds	r3, #38	@ 0x26
 8004ed2:	787a      	ldrb	r2, [r7, #1]
 8004ed4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004ed6:	7c3b      	ldrb	r3, [r7, #16]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d114      	bne.n	8004f06 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004edc:	78fa      	ldrb	r2, [r7, #3]
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	1a9b      	subs	r3, r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	332a      	adds	r3, #42	@ 0x2a
 8004eec:	2203      	movs	r2, #3
 8004eee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004ef0:	78fa      	ldrb	r2, [r7, #3]
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	1a9b      	subs	r3, r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	3319      	adds	r3, #25
 8004f00:	7f3a      	ldrb	r2, [r7, #28]
 8004f02:	701a      	strb	r2, [r3, #0]
 8004f04:	e009      	b.n	8004f1a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f06:	78fa      	ldrb	r2, [r7, #3]
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	332a      	adds	r3, #42	@ 0x2a
 8004f16:	2202      	movs	r2, #2
 8004f18:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004f1a:	787b      	ldrb	r3, [r7, #1]
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	f200 8102 	bhi.w	8005126 <HAL_HCD_HC_SubmitRequest+0x292>
 8004f22:	a201      	add	r2, pc, #4	@ (adr r2, 8004f28 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f39 	.word	0x08004f39
 8004f2c:	08005111 	.word	0x08005111
 8004f30:	08004ffd 	.word	0x08004ffd
 8004f34:	08005087 	.word	0x08005087
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004f38:	7c3b      	ldrb	r3, [r7, #16]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	f040 80f5 	bne.w	800512a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004f40:	78bb      	ldrb	r3, [r7, #2]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d12d      	bne.n	8004fa2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004f46:	8b3b      	ldrh	r3, [r7, #24]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d109      	bne.n	8004f60 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004f4c:	78fa      	ldrb	r2, [r7, #3]
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	4613      	mov	r3, r2
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	1a9b      	subs	r3, r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	440b      	add	r3, r1
 8004f5a:	333d      	adds	r3, #61	@ 0x3d
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004f60:	78fa      	ldrb	r2, [r7, #3]
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	4613      	mov	r3, r2
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	333d      	adds	r3, #61	@ 0x3d
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10a      	bne.n	8004f8c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f76:	78fa      	ldrb	r2, [r7, #3]
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	332a      	adds	r3, #42	@ 0x2a
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004f8a:	e0ce      	b.n	800512a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f8c:	78fa      	ldrb	r2, [r7, #3]
 8004f8e:	6879      	ldr	r1, [r7, #4]
 8004f90:	4613      	mov	r3, r2
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	1a9b      	subs	r3, r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	440b      	add	r3, r1
 8004f9a:	332a      	adds	r3, #42	@ 0x2a
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	701a      	strb	r2, [r3, #0]
      break;
 8004fa0:	e0c3      	b.n	800512a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004fa2:	78fa      	ldrb	r2, [r7, #3]
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	1a9b      	subs	r3, r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	440b      	add	r3, r1
 8004fb0:	331a      	adds	r3, #26
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	f040 80b8 	bne.w	800512a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004fba:	78fa      	ldrb	r2, [r7, #3]
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	1a9b      	subs	r3, r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	440b      	add	r3, r1
 8004fc8:	333c      	adds	r3, #60	@ 0x3c
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10a      	bne.n	8004fe6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004fd0:	78fa      	ldrb	r2, [r7, #3]
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	1a9b      	subs	r3, r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	332a      	adds	r3, #42	@ 0x2a
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	701a      	strb	r2, [r3, #0]
      break;
 8004fe4:	e0a1      	b.n	800512a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004fe6:	78fa      	ldrb	r2, [r7, #3]
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	4613      	mov	r3, r2
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	1a9b      	subs	r3, r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	332a      	adds	r3, #42	@ 0x2a
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	701a      	strb	r2, [r3, #0]
      break;
 8004ffa:	e096      	b.n	800512a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004ffc:	78bb      	ldrb	r3, [r7, #2]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d120      	bne.n	8005044 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005002:	78fa      	ldrb	r2, [r7, #3]
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	4613      	mov	r3, r2
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	1a9b      	subs	r3, r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	333d      	adds	r3, #61	@ 0x3d
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10a      	bne.n	800502e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005018:	78fa      	ldrb	r2, [r7, #3]
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	332a      	adds	r3, #42	@ 0x2a
 8005028:	2200      	movs	r2, #0
 800502a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800502c:	e07e      	b.n	800512c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800502e:	78fa      	ldrb	r2, [r7, #3]
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	440b      	add	r3, r1
 800503c:	332a      	adds	r3, #42	@ 0x2a
 800503e:	2202      	movs	r2, #2
 8005040:	701a      	strb	r2, [r3, #0]
      break;
 8005042:	e073      	b.n	800512c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005044:	78fa      	ldrb	r2, [r7, #3]
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	333c      	adds	r3, #60	@ 0x3c
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10a      	bne.n	8005070 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800505a:	78fa      	ldrb	r2, [r7, #3]
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	1a9b      	subs	r3, r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	440b      	add	r3, r1
 8005068:	332a      	adds	r3, #42	@ 0x2a
 800506a:	2200      	movs	r2, #0
 800506c:	701a      	strb	r2, [r3, #0]
      break;
 800506e:	e05d      	b.n	800512c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005070:	78fa      	ldrb	r2, [r7, #3]
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	1a9b      	subs	r3, r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	332a      	adds	r3, #42	@ 0x2a
 8005080:	2202      	movs	r2, #2
 8005082:	701a      	strb	r2, [r3, #0]
      break;
 8005084:	e052      	b.n	800512c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005086:	78bb      	ldrb	r3, [r7, #2]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d120      	bne.n	80050ce <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800508c:	78fa      	ldrb	r2, [r7, #3]
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	4613      	mov	r3, r2
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	1a9b      	subs	r3, r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	333d      	adds	r3, #61	@ 0x3d
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80050a2:	78fa      	ldrb	r2, [r7, #3]
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	4613      	mov	r3, r2
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	332a      	adds	r3, #42	@ 0x2a
 80050b2:	2200      	movs	r2, #0
 80050b4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80050b6:	e039      	b.n	800512c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80050b8:	78fa      	ldrb	r2, [r7, #3]
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	4613      	mov	r3, r2
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	1a9b      	subs	r3, r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	332a      	adds	r3, #42	@ 0x2a
 80050c8:	2202      	movs	r2, #2
 80050ca:	701a      	strb	r2, [r3, #0]
      break;
 80050cc:	e02e      	b.n	800512c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80050ce:	78fa      	ldrb	r2, [r7, #3]
 80050d0:	6879      	ldr	r1, [r7, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	333c      	adds	r3, #60	@ 0x3c
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10a      	bne.n	80050fa <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80050e4:	78fa      	ldrb	r2, [r7, #3]
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	4613      	mov	r3, r2
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	332a      	adds	r3, #42	@ 0x2a
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]
      break;
 80050f8:	e018      	b.n	800512c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80050fa:	78fa      	ldrb	r2, [r7, #3]
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	4613      	mov	r3, r2
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	1a9b      	subs	r3, r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	332a      	adds	r3, #42	@ 0x2a
 800510a:	2202      	movs	r2, #2
 800510c:	701a      	strb	r2, [r3, #0]
      break;
 800510e:	e00d      	b.n	800512c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005110:	78fa      	ldrb	r2, [r7, #3]
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	1a9b      	subs	r3, r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	332a      	adds	r3, #42	@ 0x2a
 8005120:	2200      	movs	r2, #0
 8005122:	701a      	strb	r2, [r3, #0]
      break;
 8005124:	e002      	b.n	800512c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8005126:	bf00      	nop
 8005128:	e000      	b.n	800512c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800512a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800512c:	78fa      	ldrb	r2, [r7, #3]
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	332c      	adds	r3, #44	@ 0x2c
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005140:	78fa      	ldrb	r2, [r7, #3]
 8005142:	8b39      	ldrh	r1, [r7, #24]
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	4613      	mov	r3, r2
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4403      	add	r3, r0
 8005150:	3334      	adds	r3, #52	@ 0x34
 8005152:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005154:	78fa      	ldrb	r2, [r7, #3]
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	4613      	mov	r3, r2
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	1a9b      	subs	r3, r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	334c      	adds	r3, #76	@ 0x4c
 8005164:	2200      	movs	r2, #0
 8005166:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005168:	78fa      	ldrb	r2, [r7, #3]
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	1a9b      	subs	r3, r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	440b      	add	r3, r1
 8005176:	3338      	adds	r3, #56	@ 0x38
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800517c:	78fa      	ldrb	r2, [r7, #3]
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	4613      	mov	r3, r2
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	1a9b      	subs	r3, r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	3315      	adds	r3, #21
 800518c:	78fa      	ldrb	r2, [r7, #3]
 800518e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005190:	78fa      	ldrb	r2, [r7, #3]
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	1a9b      	subs	r3, r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	334d      	adds	r3, #77	@ 0x4d
 80051a0:	2200      	movs	r2, #0
 80051a2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	78fa      	ldrb	r2, [r7, #3]
 80051aa:	4613      	mov	r3, r2
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	1a9b      	subs	r3, r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	3310      	adds	r3, #16
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	4413      	add	r3, r2
 80051b8:	1d19      	adds	r1, r3, #4
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	799b      	ldrb	r3, [r3, #6]
 80051be:	461a      	mov	r2, r3
 80051c0:	f005 ff54 	bl	800b06c <USB_HC_StartXfer>
 80051c4:	4603      	mov	r3, r0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop

080051d0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f005 fc6a 	bl	800aac0 <USB_GetMode>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	f040 80fb 	bne.w	80053ea <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f005 fc2d 	bl	800aa58 <USB_ReadInterrupts>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 80f1 	beq.w	80053e8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f005 fc24 	bl	800aa58 <USB_ReadInterrupts>
 8005210:	4603      	mov	r3, r0
 8005212:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005216:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800521a:	d104      	bne.n	8005226 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005224:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f005 fc14 	bl	800aa58 <USB_ReadInterrupts>
 8005230:	4603      	mov	r3, r0
 8005232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005236:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800523a:	d104      	bne.n	8005246 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005244:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f005 fc04 	bl	800aa58 <USB_ReadInterrupts>
 8005250:	4603      	mov	r3, r0
 8005252:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005256:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800525a:	d104      	bne.n	8005266 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005264:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4618      	mov	r0, r3
 800526c:	f005 fbf4 	bl	800aa58 <USB_ReadInterrupts>
 8005270:	4603      	mov	r3, r0
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b02      	cmp	r3, #2
 8005278:	d103      	bne.n	8005282 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2202      	movs	r2, #2
 8005280:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f005 fbe6 	bl	800aa58 <USB_ReadInterrupts>
 800528c:	4603      	mov	r3, r0
 800528e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005292:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005296:	d120      	bne.n	80052da <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80052a0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d113      	bne.n	80052da <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80052b2:	2110      	movs	r1, #16
 80052b4:	6938      	ldr	r0, [r7, #16]
 80052b6:	f005 fad9 	bl	800a86c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80052ba:	6938      	ldr	r0, [r7, #16]
 80052bc:	f005 fb08 	bl	800a8d0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	7a5b      	ldrb	r3, [r3, #9]
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d105      	bne.n	80052d4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2101      	movs	r1, #1
 80052ce:	4618      	mov	r0, r3
 80052d0:	f005 fce0 	bl	800ac94 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f00a fb9f 	bl	800fa18 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f005 fbba 	bl	800aa58 <USB_ReadInterrupts>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052ee:	d102      	bne.n	80052f6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f001 fd38 	bl	8006d66 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f005 fbac 	bl	800aa58 <USB_ReadInterrupts>
 8005300:	4603      	mov	r3, r0
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b08      	cmp	r3, #8
 8005308:	d106      	bne.n	8005318 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f00a fb68 	bl	800f9e0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2208      	movs	r2, #8
 8005316:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4618      	mov	r0, r3
 800531e:	f005 fb9b 	bl	800aa58 <USB_ReadInterrupts>
 8005322:	4603      	mov	r3, r0
 8005324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005328:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800532c:	d139      	bne.n	80053a2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4618      	mov	r0, r3
 8005334:	f006 f90a 	bl	800b54c <USB_HC_ReadInterrupt>
 8005338:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800533a:	2300      	movs	r3, #0
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	e025      	b.n	800538c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	fa22 f303 	lsr.w	r3, r2, r3
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d018      	beq.n	8005386 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005366:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800536a:	d106      	bne.n	800537a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	b2db      	uxtb	r3, r3
 8005370:	4619      	mov	r1, r3
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f8f0 	bl	8005558 <HCD_HC_IN_IRQHandler>
 8005378:	e005      	b.n	8005386 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	b2db      	uxtb	r3, r3
 800537e:	4619      	mov	r1, r3
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 ff52 	bl	800622a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	3301      	adds	r3, #1
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	795b      	ldrb	r3, [r3, #5]
 8005390:	461a      	mov	r2, r3
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	4293      	cmp	r3, r2
 8005396:	d3d3      	bcc.n	8005340 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80053a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f005 fb56 	bl	800aa58 <USB_ReadInterrupts>
 80053ac:	4603      	mov	r3, r0
 80053ae:	f003 0310 	and.w	r3, r3, #16
 80053b2:	2b10      	cmp	r3, #16
 80053b4:	d101      	bne.n	80053ba <HAL_HCD_IRQHandler+0x1ea>
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <HAL_HCD_IRQHandler+0x1ec>
 80053ba:	2300      	movs	r3, #0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d014      	beq.n	80053ea <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0210 	bic.w	r2, r2, #16
 80053ce:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f001 fbe9 	bl	8006ba8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	699a      	ldr	r2, [r3, #24]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0210 	orr.w	r2, r2, #16
 80053e4:	619a      	str	r2, [r3, #24]
 80053e6:	e000      	b.n	80053ea <HAL_HCD_IRQHandler+0x21a>
      return;
 80053e8:	bf00      	nop
    }
  }
}
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_HCD_Start+0x16>
 8005402:	2302      	movs	r3, #2
 8005404:	e013      	b.n	800542e <HAL_HCD_Start+0x3e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2101      	movs	r1, #1
 8005414:	4618      	mov	r0, r3
 8005416:	f005 fca4 	bl	800ad62 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f005 f9b6 	bl	800a790 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b082      	sub	sp, #8
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005444:	2b01      	cmp	r3, #1
 8005446:	d101      	bne.n	800544c <HAL_HCD_Stop+0x16>
 8005448:	2302      	movs	r3, #2
 800544a:	e00d      	b.n	8005468 <HAL_HCD_Stop+0x32>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4618      	mov	r0, r3
 800545a:	f006 f9e5 	bl	800b828 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f005 fc46 	bl	800ad0e <USB_ResetPort>
 8005482:	4603      	mov	r3, r0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	460b      	mov	r3, r1
 8005496:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005498:	78fa      	ldrb	r2, [r7, #3]
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	4613      	mov	r3, r2
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	1a9b      	subs	r3, r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	334c      	adds	r3, #76	@ 0x4c
 80054a8:	781b      	ldrb	r3, [r3, #0]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f005 fc9d 	bl	800ae02 <USB_GetCurrentFrame>
 80054c8:	4603      	mov	r3, r0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f005 fc78 	bl	800add4 <USB_GetHostSpeed>
 80054e4:	4603      	mov	r3, r0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	460b      	mov	r3, r1
 80054f8:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80054fa:	78fa      	ldrb	r2, [r7, #3]
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	4613      	mov	r3, r2
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	1a9b      	subs	r3, r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	440b      	add	r3, r1
 8005508:	331a      	adds	r3, #26
 800550a:	2200      	movs	r2, #0
 800550c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800550e:	78fa      	ldrb	r2, [r7, #3]
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	4613      	mov	r3, r2
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	1a9b      	subs	r3, r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	440b      	add	r3, r1
 800551c:	331b      	adds	r3, #27
 800551e:	2200      	movs	r2, #0
 8005520:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8005522:	78fa      	ldrb	r2, [r7, #3]
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	1a9b      	subs	r3, r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	3325      	adds	r3, #37	@ 0x25
 8005532:	2200      	movs	r2, #0
 8005534:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8005536:	78fa      	ldrb	r2, [r7, #3]
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	4613      	mov	r3, r2
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	1a9b      	subs	r3, r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	440b      	add	r3, r1
 8005544:	3324      	adds	r3, #36	@ 0x24
 8005546:	2200      	movs	r2, #0
 8005548:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	78fa      	ldrb	r2, [r7, #3]
 8005574:	4611      	mov	r1, r2
 8005576:	4618      	mov	r0, r3
 8005578:	f005 fa81 	bl	800aa7e <USB_ReadChInterrupts>
 800557c:	4603      	mov	r3, r0
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b04      	cmp	r3, #4
 8005584:	d11a      	bne.n	80055bc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4413      	add	r3, r2
 800558e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005592:	461a      	mov	r2, r3
 8005594:	2304      	movs	r3, #4
 8005596:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005598:	78fa      	ldrb	r2, [r7, #3]
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	4613      	mov	r3, r2
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	334d      	adds	r3, #77	@ 0x4d
 80055a8:	2207      	movs	r2, #7
 80055aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	78fa      	ldrb	r2, [r7, #3]
 80055b2:	4611      	mov	r1, r2
 80055b4:	4618      	mov	r0, r3
 80055b6:	f005 ffda 	bl	800b56e <USB_HC_Halt>
 80055ba:	e09e      	b.n	80056fa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	78fa      	ldrb	r2, [r7, #3]
 80055c2:	4611      	mov	r1, r2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f005 fa5a 	bl	800aa7e <USB_ReadChInterrupts>
 80055ca:	4603      	mov	r3, r0
 80055cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055d4:	d11b      	bne.n	800560e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80055d6:	78fb      	ldrb	r3, [r7, #3]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055e2:	461a      	mov	r2, r3
 80055e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80055ea:	78fa      	ldrb	r2, [r7, #3]
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	4613      	mov	r3, r2
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	1a9b      	subs	r3, r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	440b      	add	r3, r1
 80055f8:	334d      	adds	r3, #77	@ 0x4d
 80055fa:	2208      	movs	r2, #8
 80055fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	78fa      	ldrb	r2, [r7, #3]
 8005604:	4611      	mov	r1, r2
 8005606:	4618      	mov	r0, r3
 8005608:	f005 ffb1 	bl	800b56e <USB_HC_Halt>
 800560c:	e075      	b.n	80056fa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	78fa      	ldrb	r2, [r7, #3]
 8005614:	4611      	mov	r1, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f005 fa31 	bl	800aa7e <USB_ReadChInterrupts>
 800561c:	4603      	mov	r3, r0
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b08      	cmp	r3, #8
 8005624:	d11a      	bne.n	800565c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005626:	78fb      	ldrb	r3, [r7, #3]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	4413      	add	r3, r2
 800562e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005632:	461a      	mov	r2, r3
 8005634:	2308      	movs	r3, #8
 8005636:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	334d      	adds	r3, #77	@ 0x4d
 8005648:	2206      	movs	r2, #6
 800564a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	78fa      	ldrb	r2, [r7, #3]
 8005652:	4611      	mov	r1, r2
 8005654:	4618      	mov	r0, r3
 8005656:	f005 ff8a 	bl	800b56e <USB_HC_Halt>
 800565a:	e04e      	b.n	80056fa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	78fa      	ldrb	r2, [r7, #3]
 8005662:	4611      	mov	r1, r2
 8005664:	4618      	mov	r0, r3
 8005666:	f005 fa0a 	bl	800aa7e <USB_ReadChInterrupts>
 800566a:	4603      	mov	r3, r0
 800566c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005674:	d11b      	bne.n	80056ae <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005676:	78fb      	ldrb	r3, [r7, #3]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	4413      	add	r3, r2
 800567e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005682:	461a      	mov	r2, r3
 8005684:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005688:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800568a:	78fa      	ldrb	r2, [r7, #3]
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	011b      	lsls	r3, r3, #4
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	440b      	add	r3, r1
 8005698:	334d      	adds	r3, #77	@ 0x4d
 800569a:	2209      	movs	r2, #9
 800569c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	78fa      	ldrb	r2, [r7, #3]
 80056a4:	4611      	mov	r1, r2
 80056a6:	4618      	mov	r0, r3
 80056a8:	f005 ff61 	bl	800b56e <USB_HC_Halt>
 80056ac:	e025      	b.n	80056fa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	78fa      	ldrb	r2, [r7, #3]
 80056b4:	4611      	mov	r1, r2
 80056b6:	4618      	mov	r0, r3
 80056b8:	f005 f9e1 	bl	800aa7e <USB_ReadChInterrupts>
 80056bc:	4603      	mov	r3, r0
 80056be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c2:	2b80      	cmp	r3, #128	@ 0x80
 80056c4:	d119      	bne.n	80056fa <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80056c6:	78fb      	ldrb	r3, [r7, #3]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056d2:	461a      	mov	r2, r3
 80056d4:	2380      	movs	r3, #128	@ 0x80
 80056d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80056d8:	78fa      	ldrb	r2, [r7, #3]
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	4613      	mov	r3, r2
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	1a9b      	subs	r3, r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	440b      	add	r3, r1
 80056e6:	334d      	adds	r3, #77	@ 0x4d
 80056e8:	2207      	movs	r2, #7
 80056ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	78fa      	ldrb	r2, [r7, #3]
 80056f2:	4611      	mov	r1, r2
 80056f4:	4618      	mov	r0, r3
 80056f6:	f005 ff3a 	bl	800b56e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	78fa      	ldrb	r2, [r7, #3]
 8005700:	4611      	mov	r1, r2
 8005702:	4618      	mov	r0, r3
 8005704:	f005 f9bb 	bl	800aa7e <USB_ReadChInterrupts>
 8005708:	4603      	mov	r3, r0
 800570a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800570e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005712:	d112      	bne.n	800573a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	78fa      	ldrb	r2, [r7, #3]
 800571a:	4611      	mov	r1, r2
 800571c:	4618      	mov	r0, r3
 800571e:	f005 ff26 	bl	800b56e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	4413      	add	r3, r2
 800572a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800572e:	461a      	mov	r2, r3
 8005730:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005734:	6093      	str	r3, [r2, #8]
 8005736:	f000 bd75 	b.w	8006224 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	78fa      	ldrb	r2, [r7, #3]
 8005740:	4611      	mov	r1, r2
 8005742:	4618      	mov	r0, r3
 8005744:	f005 f99b 	bl	800aa7e <USB_ReadChInterrupts>
 8005748:	4603      	mov	r3, r0
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b01      	cmp	r3, #1
 8005750:	f040 8128 	bne.w	80059a4 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	4413      	add	r3, r2
 800575c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005760:	461a      	mov	r2, r3
 8005762:	2320      	movs	r3, #32
 8005764:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005766:	78fa      	ldrb	r2, [r7, #3]
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	1a9b      	subs	r3, r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	331b      	adds	r3, #27
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d119      	bne.n	80057b0 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800577c:	78fa      	ldrb	r2, [r7, #3]
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	4613      	mov	r3, r2
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	331b      	adds	r3, #27
 800578c:	2200      	movs	r2, #0
 800578e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	4413      	add	r3, r2
 8005798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	78fa      	ldrb	r2, [r7, #3]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057ae:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	799b      	ldrb	r3, [r3, #6]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01b      	beq.n	80057f0 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80057b8:	78fa      	ldrb	r2, [r7, #3]
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	4613      	mov	r3, r2
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	1a9b      	subs	r3, r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	3330      	adds	r3, #48	@ 0x30
 80057c8:	6819      	ldr	r1, [r3, #0]
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057dc:	78fa      	ldrb	r2, [r7, #3]
 80057de:	1ac9      	subs	r1, r1, r3
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	4613      	mov	r3, r2
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	1a9b      	subs	r3, r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4403      	add	r3, r0
 80057ec:	3338      	adds	r3, #56	@ 0x38
 80057ee:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80057f0:	78fa      	ldrb	r2, [r7, #3]
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	4613      	mov	r3, r2
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	1a9b      	subs	r3, r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	334d      	adds	r3, #77	@ 0x4d
 8005800:	2201      	movs	r2, #1
 8005802:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005804:	78fa      	ldrb	r2, [r7, #3]
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	4613      	mov	r3, r2
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	1a9b      	subs	r3, r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	3344      	adds	r3, #68	@ 0x44
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005818:	78fb      	ldrb	r3, [r7, #3]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	4413      	add	r3, r2
 8005820:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005824:	461a      	mov	r2, r3
 8005826:	2301      	movs	r3, #1
 8005828:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800582a:	78fa      	ldrb	r2, [r7, #3]
 800582c:	6879      	ldr	r1, [r7, #4]
 800582e:	4613      	mov	r3, r2
 8005830:	011b      	lsls	r3, r3, #4
 8005832:	1a9b      	subs	r3, r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	440b      	add	r3, r1
 8005838:	3326      	adds	r3, #38	@ 0x26
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00a      	beq.n	8005856 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005840:	78fa      	ldrb	r2, [r7, #3]
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	4613      	mov	r3, r2
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	1a9b      	subs	r3, r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	3326      	adds	r3, #38	@ 0x26
 8005850:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005852:	2b02      	cmp	r3, #2
 8005854:	d110      	bne.n	8005878 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	78fa      	ldrb	r2, [r7, #3]
 800585c:	4611      	mov	r1, r2
 800585e:	4618      	mov	r0, r3
 8005860:	f005 fe85 	bl	800b56e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005864:	78fb      	ldrb	r3, [r7, #3]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005870:	461a      	mov	r2, r3
 8005872:	2310      	movs	r3, #16
 8005874:	6093      	str	r3, [r2, #8]
 8005876:	e03d      	b.n	80058f4 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005878:	78fa      	ldrb	r2, [r7, #3]
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	4613      	mov	r3, r2
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	1a9b      	subs	r3, r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	440b      	add	r3, r1
 8005886:	3326      	adds	r3, #38	@ 0x26
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b03      	cmp	r3, #3
 800588c:	d00a      	beq.n	80058a4 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800588e:	78fa      	ldrb	r2, [r7, #3]
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	4613      	mov	r3, r2
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	3326      	adds	r3, #38	@ 0x26
 800589e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d127      	bne.n	80058f4 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	78fa      	ldrb	r2, [r7, #3]
 80058b4:	0151      	lsls	r1, r2, #5
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	440a      	add	r2, r1
 80058ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80058c2:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80058c4:	78fa      	ldrb	r2, [r7, #3]
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	4613      	mov	r3, r2
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	334c      	adds	r3, #76	@ 0x4c
 80058d4:	2201      	movs	r2, #1
 80058d6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80058d8:	78fa      	ldrb	r2, [r7, #3]
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	4613      	mov	r3, r2
 80058de:	011b      	lsls	r3, r3, #4
 80058e0:	1a9b      	subs	r3, r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	440b      	add	r3, r1
 80058e6:	334c      	adds	r3, #76	@ 0x4c
 80058e8:	781a      	ldrb	r2, [r3, #0]
 80058ea:	78fb      	ldrb	r3, [r7, #3]
 80058ec:	4619      	mov	r1, r3
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f00a f8a0 	bl	800fa34 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	799b      	ldrb	r3, [r3, #6]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d13b      	bne.n	8005974 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80058fc:	78fa      	ldrb	r2, [r7, #3]
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	4613      	mov	r3, r2
 8005902:	011b      	lsls	r3, r3, #4
 8005904:	1a9b      	subs	r3, r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	440b      	add	r3, r1
 800590a:	3338      	adds	r3, #56	@ 0x38
 800590c:	6819      	ldr	r1, [r3, #0]
 800590e:	78fa      	ldrb	r2, [r7, #3]
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	4613      	mov	r3, r2
 8005914:	011b      	lsls	r3, r3, #4
 8005916:	1a9b      	subs	r3, r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4403      	add	r3, r0
 800591c:	3328      	adds	r3, #40	@ 0x28
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	440b      	add	r3, r1
 8005922:	1e59      	subs	r1, r3, #1
 8005924:	78fa      	ldrb	r2, [r7, #3]
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	4613      	mov	r3, r2
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	1a9b      	subs	r3, r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4403      	add	r3, r0
 8005932:	3328      	adds	r3, #40	@ 0x28
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	fbb1 f3f3 	udiv	r3, r1, r3
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 8470 	beq.w	8006224 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005944:	78fa      	ldrb	r2, [r7, #3]
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	4613      	mov	r3, r2
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	440b      	add	r3, r1
 8005952:	333c      	adds	r3, #60	@ 0x3c
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	78fa      	ldrb	r2, [r7, #3]
 8005958:	f083 0301 	eor.w	r3, r3, #1
 800595c:	b2d8      	uxtb	r0, r3
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	4613      	mov	r3, r2
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	1a9b      	subs	r3, r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	440b      	add	r3, r1
 800596a:	333c      	adds	r3, #60	@ 0x3c
 800596c:	4602      	mov	r2, r0
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	f000 bc58 	b.w	8006224 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005974:	78fa      	ldrb	r2, [r7, #3]
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	4613      	mov	r3, r2
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	333c      	adds	r3, #60	@ 0x3c
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	78fa      	ldrb	r2, [r7, #3]
 8005988:	f083 0301 	eor.w	r3, r3, #1
 800598c:	b2d8      	uxtb	r0, r3
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	4613      	mov	r3, r2
 8005992:	011b      	lsls	r3, r3, #4
 8005994:	1a9b      	subs	r3, r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	333c      	adds	r3, #60	@ 0x3c
 800599c:	4602      	mov	r2, r0
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	f000 bc40 	b.w	8006224 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	78fa      	ldrb	r2, [r7, #3]
 80059aa:	4611      	mov	r1, r2
 80059ac:	4618      	mov	r0, r3
 80059ae:	f005 f866 	bl	800aa7e <USB_ReadChInterrupts>
 80059b2:	4603      	mov	r3, r0
 80059b4:	f003 0320 	and.w	r3, r3, #32
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d131      	bne.n	8005a20 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80059bc:	78fb      	ldrb	r3, [r7, #3]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059c8:	461a      	mov	r2, r3
 80059ca:	2320      	movs	r3, #32
 80059cc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80059ce:	78fa      	ldrb	r2, [r7, #3]
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	4613      	mov	r3, r2
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	1a9b      	subs	r3, r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	440b      	add	r3, r1
 80059dc:	331a      	adds	r3, #26
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	f040 841f 	bne.w	8006224 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80059e6:	78fa      	ldrb	r2, [r7, #3]
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	1a9b      	subs	r3, r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	331b      	adds	r3, #27
 80059f6:	2201      	movs	r2, #1
 80059f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80059fa:	78fa      	ldrb	r2, [r7, #3]
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	4613      	mov	r3, r2
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	1a9b      	subs	r3, r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	440b      	add	r3, r1
 8005a08:	334d      	adds	r3, #77	@ 0x4d
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	78fa      	ldrb	r2, [r7, #3]
 8005a14:	4611      	mov	r1, r2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f005 fda9 	bl	800b56e <USB_HC_Halt>
 8005a1c:	f000 bc02 	b.w	8006224 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	78fa      	ldrb	r2, [r7, #3]
 8005a26:	4611      	mov	r1, r2
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f005 f828 	bl	800aa7e <USB_ReadChInterrupts>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	f040 8305 	bne.w	8006044 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a46:	461a      	mov	r2, r3
 8005a48:	2302      	movs	r3, #2
 8005a4a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005a4c:	78fa      	ldrb	r2, [r7, #3]
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	4613      	mov	r3, r2
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	1a9b      	subs	r3, r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	334d      	adds	r3, #77	@ 0x4d
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d114      	bne.n	8005a8c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a62:	78fa      	ldrb	r2, [r7, #3]
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	4613      	mov	r3, r2
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	1a9b      	subs	r3, r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	334d      	adds	r3, #77	@ 0x4d
 8005a72:	2202      	movs	r2, #2
 8005a74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005a76:	78fa      	ldrb	r2, [r7, #3]
 8005a78:	6879      	ldr	r1, [r7, #4]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	1a9b      	subs	r3, r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	440b      	add	r3, r1
 8005a84:	334c      	adds	r3, #76	@ 0x4c
 8005a86:	2201      	movs	r2, #1
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	e2cc      	b.n	8006026 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005a8c:	78fa      	ldrb	r2, [r7, #3]
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	4613      	mov	r3, r2
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	1a9b      	subs	r3, r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	334d      	adds	r3, #77	@ 0x4d
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b06      	cmp	r3, #6
 8005aa0:	d114      	bne.n	8005acc <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005aa2:	78fa      	ldrb	r2, [r7, #3]
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	1a9b      	subs	r3, r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	440b      	add	r3, r1
 8005ab0:	334d      	adds	r3, #77	@ 0x4d
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005ab6:	78fa      	ldrb	r2, [r7, #3]
 8005ab8:	6879      	ldr	r1, [r7, #4]
 8005aba:	4613      	mov	r3, r2
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	1a9b      	subs	r3, r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	440b      	add	r3, r1
 8005ac4:	334c      	adds	r3, #76	@ 0x4c
 8005ac6:	2205      	movs	r2, #5
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	e2ac      	b.n	8006026 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005acc:	78fa      	ldrb	r2, [r7, #3]
 8005ace:	6879      	ldr	r1, [r7, #4]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	1a9b      	subs	r3, r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	440b      	add	r3, r1
 8005ada:	334d      	adds	r3, #77	@ 0x4d
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b07      	cmp	r3, #7
 8005ae0:	d00b      	beq.n	8005afa <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005ae2:	78fa      	ldrb	r2, [r7, #3]
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	1a9b      	subs	r3, r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	440b      	add	r3, r1
 8005af0:	334d      	adds	r3, #77	@ 0x4d
 8005af2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005af4:	2b09      	cmp	r3, #9
 8005af6:	f040 80a6 	bne.w	8005c46 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005afa:	78fa      	ldrb	r2, [r7, #3]
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	4613      	mov	r3, r2
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	1a9b      	subs	r3, r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	440b      	add	r3, r1
 8005b08:	334d      	adds	r3, #77	@ 0x4d
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005b0e:	78fa      	ldrb	r2, [r7, #3]
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	3344      	adds	r3, #68	@ 0x44
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	1c59      	adds	r1, r3, #1
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	4613      	mov	r3, r2
 8005b26:	011b      	lsls	r3, r3, #4
 8005b28:	1a9b      	subs	r3, r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4403      	add	r3, r0
 8005b2e:	3344      	adds	r3, #68	@ 0x44
 8005b30:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005b32:	78fa      	ldrb	r2, [r7, #3]
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	4613      	mov	r3, r2
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	440b      	add	r3, r1
 8005b40:	3344      	adds	r3, #68	@ 0x44
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d943      	bls.n	8005bd0 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005b48:	78fa      	ldrb	r2, [r7, #3]
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	440b      	add	r3, r1
 8005b56:	3344      	adds	r3, #68	@ 0x44
 8005b58:	2200      	movs	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005b5c:	78fa      	ldrb	r2, [r7, #3]
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	4613      	mov	r3, r2
 8005b62:	011b      	lsls	r3, r3, #4
 8005b64:	1a9b      	subs	r3, r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	331a      	adds	r3, #26
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d123      	bne.n	8005bba <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005b72:	78fa      	ldrb	r2, [r7, #3]
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	4613      	mov	r3, r2
 8005b78:	011b      	lsls	r3, r3, #4
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	440b      	add	r3, r1
 8005b80:	331b      	adds	r3, #27
 8005b82:	2200      	movs	r2, #0
 8005b84:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005b86:	78fa      	ldrb	r2, [r7, #3]
 8005b88:	6879      	ldr	r1, [r7, #4]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	011b      	lsls	r3, r3, #4
 8005b8e:	1a9b      	subs	r3, r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	440b      	add	r3, r1
 8005b94:	331c      	adds	r3, #28
 8005b96:	2200      	movs	r2, #0
 8005b98:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005b9a:	78fb      	ldrb	r3, [r7, #3]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	78fa      	ldrb	r2, [r7, #3]
 8005baa:	0151      	lsls	r1, r2, #5
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	440a      	add	r2, r1
 8005bb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bb8:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005bba:	78fa      	ldrb	r2, [r7, #3]
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	011b      	lsls	r3, r3, #4
 8005bc2:	1a9b      	subs	r3, r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	440b      	add	r3, r1
 8005bc8:	334c      	adds	r3, #76	@ 0x4c
 8005bca:	2204      	movs	r2, #4
 8005bcc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005bce:	e229      	b.n	8006024 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005bd0:	78fa      	ldrb	r2, [r7, #3]
 8005bd2:	6879      	ldr	r1, [r7, #4]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	1a9b      	subs	r3, r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	440b      	add	r3, r1
 8005bde:	334c      	adds	r3, #76	@ 0x4c
 8005be0:	2202      	movs	r2, #2
 8005be2:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005be4:	78fa      	ldrb	r2, [r7, #3]
 8005be6:	6879      	ldr	r1, [r7, #4]
 8005be8:	4613      	mov	r3, r2
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	1a9b      	subs	r3, r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	3326      	adds	r3, #38	@ 0x26
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00b      	beq.n	8005c12 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005bfa:	78fa      	ldrb	r2, [r7, #3]
 8005bfc:	6879      	ldr	r1, [r7, #4]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	1a9b      	subs	r3, r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	440b      	add	r3, r1
 8005c08:	3326      	adds	r3, #38	@ 0x26
 8005c0a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	f040 8209 	bne.w	8006024 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c28:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c30:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c32:	78fb      	ldrb	r3, [r7, #3]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c3e:	461a      	mov	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005c44:	e1ee      	b.n	8006024 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005c46:	78fa      	ldrb	r2, [r7, #3]
 8005c48:	6879      	ldr	r1, [r7, #4]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	1a9b      	subs	r3, r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	440b      	add	r3, r1
 8005c54:	334d      	adds	r3, #77	@ 0x4d
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b05      	cmp	r3, #5
 8005c5a:	f040 80c8 	bne.w	8005dee <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005c5e:	78fa      	ldrb	r2, [r7, #3]
 8005c60:	6879      	ldr	r1, [r7, #4]
 8005c62:	4613      	mov	r3, r2
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	1a9b      	subs	r3, r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	440b      	add	r3, r1
 8005c6c:	334d      	adds	r3, #77	@ 0x4d
 8005c6e:	2202      	movs	r2, #2
 8005c70:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005c72:	78fa      	ldrb	r2, [r7, #3]
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	4613      	mov	r3, r2
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	1a9b      	subs	r3, r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	440b      	add	r3, r1
 8005c80:	331b      	adds	r3, #27
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	f040 81ce 	bne.w	8006026 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005c8a:	78fa      	ldrb	r2, [r7, #3]
 8005c8c:	6879      	ldr	r1, [r7, #4]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	1a9b      	subs	r3, r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	440b      	add	r3, r1
 8005c98:	3326      	adds	r3, #38	@ 0x26
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d16b      	bne.n	8005d78 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005ca0:	78fa      	ldrb	r2, [r7, #3]
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	1a9b      	subs	r3, r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	440b      	add	r3, r1
 8005cae:	3348      	adds	r3, #72	@ 0x48
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	1c59      	adds	r1, r3, #1
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	1a9b      	subs	r3, r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4403      	add	r3, r0
 8005cc0:	3348      	adds	r3, #72	@ 0x48
 8005cc2:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005cc4:	78fa      	ldrb	r2, [r7, #3]
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	1a9b      	subs	r3, r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	440b      	add	r3, r1
 8005cd2:	3348      	adds	r3, #72	@ 0x48
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d943      	bls.n	8005d62 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005cda:	78fa      	ldrb	r2, [r7, #3]
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	011b      	lsls	r3, r3, #4
 8005ce2:	1a9b      	subs	r3, r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	440b      	add	r3, r1
 8005ce8:	3348      	adds	r3, #72	@ 0x48
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005cee:	78fa      	ldrb	r2, [r7, #3]
 8005cf0:	6879      	ldr	r1, [r7, #4]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	011b      	lsls	r3, r3, #4
 8005cf6:	1a9b      	subs	r3, r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	331b      	adds	r3, #27
 8005cfe:	2200      	movs	r2, #0
 8005d00:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8005d02:	78fa      	ldrb	r2, [r7, #3]
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	4613      	mov	r3, r2
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	1a9b      	subs	r3, r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	3344      	adds	r3, #68	@ 0x44
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d809      	bhi.n	8005d2c <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8005d18:	78fa      	ldrb	r2, [r7, #3]
 8005d1a:	6879      	ldr	r1, [r7, #4]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	1a9b      	subs	r3, r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	440b      	add	r3, r1
 8005d26:	331c      	adds	r3, #28
 8005d28:	2201      	movs	r2, #1
 8005d2a:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005d2c:	78fb      	ldrb	r3, [r7, #3]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	78fa      	ldrb	r2, [r7, #3]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d4a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8005d4c:	78fa      	ldrb	r2, [r7, #3]
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	4613      	mov	r3, r2
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	1a9b      	subs	r3, r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	440b      	add	r3, r1
 8005d5a:	334c      	adds	r3, #76	@ 0x4c
 8005d5c:	2204      	movs	r2, #4
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	e014      	b.n	8005d8c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005d62:	78fa      	ldrb	r2, [r7, #3]
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	4613      	mov	r3, r2
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	1a9b      	subs	r3, r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	334c      	adds	r3, #76	@ 0x4c
 8005d72:	2202      	movs	r2, #2
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	e009      	b.n	8005d8c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005d78:	78fa      	ldrb	r2, [r7, #3]
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	1a9b      	subs	r3, r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	440b      	add	r3, r1
 8005d86:	334c      	adds	r3, #76	@ 0x4c
 8005d88:	2202      	movs	r2, #2
 8005d8a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d8c:	78fa      	ldrb	r2, [r7, #3]
 8005d8e:	6879      	ldr	r1, [r7, #4]
 8005d90:	4613      	mov	r3, r2
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	1a9b      	subs	r3, r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	440b      	add	r3, r1
 8005d9a:	3326      	adds	r3, #38	@ 0x26
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00b      	beq.n	8005dba <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005da2:	78fa      	ldrb	r2, [r7, #3]
 8005da4:	6879      	ldr	r1, [r7, #4]
 8005da6:	4613      	mov	r3, r2
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	1a9b      	subs	r3, r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	440b      	add	r3, r1
 8005db0:	3326      	adds	r3, #38	@ 0x26
 8005db2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	f040 8136 	bne.w	8006026 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005dba:	78fb      	ldrb	r3, [r7, #3]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005dd0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005dd8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005de6:	461a      	mov	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	e11b      	b.n	8006026 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005dee:	78fa      	ldrb	r2, [r7, #3]
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	1a9b      	subs	r3, r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	334d      	adds	r3, #77	@ 0x4d
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b03      	cmp	r3, #3
 8005e02:	f040 8081 	bne.w	8005f08 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e06:	78fa      	ldrb	r2, [r7, #3]
 8005e08:	6879      	ldr	r1, [r7, #4]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	1a9b      	subs	r3, r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	440b      	add	r3, r1
 8005e14:	334d      	adds	r3, #77	@ 0x4d
 8005e16:	2202      	movs	r2, #2
 8005e18:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005e1a:	78fa      	ldrb	r2, [r7, #3]
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	1a9b      	subs	r3, r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	440b      	add	r3, r1
 8005e28:	331b      	adds	r3, #27
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	f040 80fa 	bne.w	8006026 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005e32:	78fa      	ldrb	r2, [r7, #3]
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	4613      	mov	r3, r2
 8005e38:	011b      	lsls	r3, r3, #4
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	440b      	add	r3, r1
 8005e40:	334c      	adds	r3, #76	@ 0x4c
 8005e42:	2202      	movs	r2, #2
 8005e44:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005e46:	78fb      	ldrb	r3, [r7, #3]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	78fa      	ldrb	r2, [r7, #3]
 8005e56:	0151      	lsls	r1, r2, #5
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	440a      	add	r2, r1
 8005e5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e64:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005e66:	78fb      	ldrb	r3, [r7, #3]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	78fa      	ldrb	r2, [r7, #3]
 8005e76:	0151      	lsls	r1, r2, #5
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	440a      	add	r2, r1
 8005e7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e84:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	78fa      	ldrb	r2, [r7, #3]
 8005e96:	0151      	lsls	r1, r2, #5
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	440a      	add	r2, r1
 8005e9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ea0:	f023 0320 	bic.w	r3, r3, #32
 8005ea4:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005ea6:	78fa      	ldrb	r2, [r7, #3]
 8005ea8:	6879      	ldr	r1, [r7, #4]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	1a9b      	subs	r3, r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	440b      	add	r3, r1
 8005eb4:	3326      	adds	r3, #38	@ 0x26
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00b      	beq.n	8005ed4 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005ebc:	78fa      	ldrb	r2, [r7, #3]
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	1a9b      	subs	r3, r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	3326      	adds	r3, #38	@ 0x26
 8005ecc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	f040 80a9 	bne.w	8006026 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005eea:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ef2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ef4:	78fb      	ldrb	r3, [r7, #3]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f00:	461a      	mov	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	e08e      	b.n	8006026 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005f08:	78fa      	ldrb	r2, [r7, #3]
 8005f0a:	6879      	ldr	r1, [r7, #4]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	011b      	lsls	r3, r3, #4
 8005f10:	1a9b      	subs	r3, r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	440b      	add	r3, r1
 8005f16:	334d      	adds	r3, #77	@ 0x4d
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d143      	bne.n	8005fa6 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f1e:	78fa      	ldrb	r2, [r7, #3]
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	4613      	mov	r3, r2
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	1a9b      	subs	r3, r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	440b      	add	r3, r1
 8005f2c:	334d      	adds	r3, #77	@ 0x4d
 8005f2e:	2202      	movs	r2, #2
 8005f30:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005f32:	78fa      	ldrb	r2, [r7, #3]
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	4613      	mov	r3, r2
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	1a9b      	subs	r3, r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	440b      	add	r3, r1
 8005f40:	334c      	adds	r3, #76	@ 0x4c
 8005f42:	2202      	movs	r2, #2
 8005f44:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005f46:	78fa      	ldrb	r2, [r7, #3]
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	1a9b      	subs	r3, r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	3326      	adds	r3, #38	@ 0x26
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00a      	beq.n	8005f72 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005f5c:	78fa      	ldrb	r2, [r7, #3]
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	4613      	mov	r3, r2
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	1a9b      	subs	r3, r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	3326      	adds	r3, #38	@ 0x26
 8005f6c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d159      	bne.n	8006026 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005f72:	78fb      	ldrb	r3, [r7, #3]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f88:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f90:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	e03f      	b.n	8006026 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005fa6:	78fa      	ldrb	r2, [r7, #3]
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	4613      	mov	r3, r2
 8005fac:	011b      	lsls	r3, r3, #4
 8005fae:	1a9b      	subs	r3, r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	440b      	add	r3, r1
 8005fb4:	334d      	adds	r3, #77	@ 0x4d
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d126      	bne.n	800600a <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005fbc:	78fa      	ldrb	r2, [r7, #3]
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	011b      	lsls	r3, r3, #4
 8005fc4:	1a9b      	subs	r3, r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	334d      	adds	r3, #77	@ 0x4d
 8005fcc:	2202      	movs	r2, #2
 8005fce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005fd0:	78fa      	ldrb	r2, [r7, #3]
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	1a9b      	subs	r3, r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	440b      	add	r3, r1
 8005fde:	3344      	adds	r3, #68	@ 0x44
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	1c59      	adds	r1, r3, #1
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	1a9b      	subs	r3, r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4403      	add	r3, r0
 8005ff0:	3344      	adds	r3, #68	@ 0x44
 8005ff2:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005ff4:	78fa      	ldrb	r2, [r7, #3]
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	1a9b      	subs	r3, r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	440b      	add	r3, r1
 8006002:	334c      	adds	r3, #76	@ 0x4c
 8006004:	2204      	movs	r2, #4
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	e00d      	b.n	8006026 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800600a:	78fa      	ldrb	r2, [r7, #3]
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	4613      	mov	r3, r2
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	1a9b      	subs	r3, r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	440b      	add	r3, r1
 8006018:	334d      	adds	r3, #77	@ 0x4d
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b02      	cmp	r3, #2
 800601e:	f000 8100 	beq.w	8006222 <HCD_HC_IN_IRQHandler+0xcca>
 8006022:	e000      	b.n	8006026 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006024:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006026:	78fa      	ldrb	r2, [r7, #3]
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	4613      	mov	r3, r2
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	1a9b      	subs	r3, r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	440b      	add	r3, r1
 8006034:	334c      	adds	r3, #76	@ 0x4c
 8006036:	781a      	ldrb	r2, [r3, #0]
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	4619      	mov	r1, r3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f009 fcf9 	bl	800fa34 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006042:	e0ef      	b.n	8006224 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	78fa      	ldrb	r2, [r7, #3]
 800604a:	4611      	mov	r1, r2
 800604c:	4618      	mov	r0, r3
 800604e:	f004 fd16 	bl	800aa7e <USB_ReadChInterrupts>
 8006052:	4603      	mov	r3, r0
 8006054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006058:	2b40      	cmp	r3, #64	@ 0x40
 800605a:	d12f      	bne.n	80060bc <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	4413      	add	r3, r2
 8006064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006068:	461a      	mov	r2, r3
 800606a:	2340      	movs	r3, #64	@ 0x40
 800606c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800606e:	78fa      	ldrb	r2, [r7, #3]
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	4613      	mov	r3, r2
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	1a9b      	subs	r3, r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	440b      	add	r3, r1
 800607c:	334d      	adds	r3, #77	@ 0x4d
 800607e:	2205      	movs	r2, #5
 8006080:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006082:	78fa      	ldrb	r2, [r7, #3]
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	4613      	mov	r3, r2
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	1a9b      	subs	r3, r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	440b      	add	r3, r1
 8006090:	331a      	adds	r3, #26
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d109      	bne.n	80060ac <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006098:	78fa      	ldrb	r2, [r7, #3]
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	4613      	mov	r3, r2
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	440b      	add	r3, r1
 80060a6:	3344      	adds	r3, #68	@ 0x44
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	78fa      	ldrb	r2, [r7, #3]
 80060b2:	4611      	mov	r1, r2
 80060b4:	4618      	mov	r0, r3
 80060b6:	f005 fa5a 	bl	800b56e <USB_HC_Halt>
 80060ba:	e0b3      	b.n	8006224 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	78fa      	ldrb	r2, [r7, #3]
 80060c2:	4611      	mov	r1, r2
 80060c4:	4618      	mov	r0, r3
 80060c6:	f004 fcda 	bl	800aa7e <USB_ReadChInterrupts>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	2b10      	cmp	r3, #16
 80060d2:	f040 80a7 	bne.w	8006224 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80060d6:	78fa      	ldrb	r2, [r7, #3]
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	1a9b      	subs	r3, r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	440b      	add	r3, r1
 80060e4:	3326      	adds	r3, #38	@ 0x26
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d11b      	bne.n	8006124 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80060ec:	78fa      	ldrb	r2, [r7, #3]
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	4613      	mov	r3, r2
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	1a9b      	subs	r3, r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	440b      	add	r3, r1
 80060fa:	3344      	adds	r3, #68	@ 0x44
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8006100:	78fa      	ldrb	r2, [r7, #3]
 8006102:	6879      	ldr	r1, [r7, #4]
 8006104:	4613      	mov	r3, r2
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	1a9b      	subs	r3, r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	334d      	adds	r3, #77	@ 0x4d
 8006110:	2204      	movs	r2, #4
 8006112:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	78fa      	ldrb	r2, [r7, #3]
 800611a:	4611      	mov	r1, r2
 800611c:	4618      	mov	r0, r3
 800611e:	f005 fa26 	bl	800b56e <USB_HC_Halt>
 8006122:	e03f      	b.n	80061a4 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006124:	78fa      	ldrb	r2, [r7, #3]
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	4613      	mov	r3, r2
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	3326      	adds	r3, #38	@ 0x26
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800613a:	78fa      	ldrb	r2, [r7, #3]
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	4613      	mov	r3, r2
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	1a9b      	subs	r3, r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	440b      	add	r3, r1
 8006148:	3326      	adds	r3, #38	@ 0x26
 800614a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800614c:	2b02      	cmp	r3, #2
 800614e:	d129      	bne.n	80061a4 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006150:	78fa      	ldrb	r2, [r7, #3]
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	4613      	mov	r3, r2
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	1a9b      	subs	r3, r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	3344      	adds	r3, #68	@ 0x44
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	799b      	ldrb	r3, [r3, #6]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <HCD_HC_IN_IRQHandler+0xc2a>
 800616c:	78fa      	ldrb	r2, [r7, #3]
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	4613      	mov	r3, r2
 8006172:	011b      	lsls	r3, r3, #4
 8006174:	1a9b      	subs	r3, r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	331b      	adds	r3, #27
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d110      	bne.n	80061a4 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8006182:	78fa      	ldrb	r2, [r7, #3]
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	4613      	mov	r3, r2
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	1a9b      	subs	r3, r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	440b      	add	r3, r1
 8006190:	334d      	adds	r3, #77	@ 0x4d
 8006192:	2204      	movs	r2, #4
 8006194:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	78fa      	ldrb	r2, [r7, #3]
 800619c:	4611      	mov	r1, r2
 800619e:	4618      	mov	r0, r3
 80061a0:	f005 f9e5 	bl	800b56e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80061a4:	78fa      	ldrb	r2, [r7, #3]
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	4613      	mov	r3, r2
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	1a9b      	subs	r3, r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	331b      	adds	r3, #27
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d129      	bne.n	800620e <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80061ba:	78fa      	ldrb	r2, [r7, #3]
 80061bc:	6879      	ldr	r1, [r7, #4]
 80061be:	4613      	mov	r3, r2
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	1a9b      	subs	r3, r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	440b      	add	r3, r1
 80061c8:	331b      	adds	r3, #27
 80061ca:	2200      	movs	r2, #0
 80061cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80061ce:	78fb      	ldrb	r3, [r7, #3]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	78fa      	ldrb	r2, [r7, #3]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061ec:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80061ee:	78fb      	ldrb	r3, [r7, #3]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	78fa      	ldrb	r2, [r7, #3]
 80061fe:	0151      	lsls	r1, r2, #5
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	440a      	add	r2, r1
 8006204:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006208:	f043 0320 	orr.w	r3, r3, #32
 800620c:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800620e:	78fb      	ldrb	r3, [r7, #3]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	4413      	add	r3, r2
 8006216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800621a:	461a      	mov	r2, r3
 800621c:	2310      	movs	r3, #16
 800621e:	6093      	str	r3, [r2, #8]
 8006220:	e000      	b.n	8006224 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8006222:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b086      	sub	sp, #24
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	460b      	mov	r3, r1
 8006234:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	78fa      	ldrb	r2, [r7, #3]
 8006246:	4611      	mov	r1, r2
 8006248:	4618      	mov	r0, r3
 800624a:	f004 fc18 	bl	800aa7e <USB_ReadChInterrupts>
 800624e:	4603      	mov	r3, r0
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b04      	cmp	r3, #4
 8006256:	d11b      	bne.n	8006290 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006258:	78fb      	ldrb	r3, [r7, #3]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	4413      	add	r3, r2
 8006260:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006264:	461a      	mov	r2, r3
 8006266:	2304      	movs	r3, #4
 8006268:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800626a:	78fa      	ldrb	r2, [r7, #3]
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	011b      	lsls	r3, r3, #4
 8006272:	1a9b      	subs	r3, r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	440b      	add	r3, r1
 8006278:	334d      	adds	r3, #77	@ 0x4d
 800627a:	2207      	movs	r2, #7
 800627c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	78fa      	ldrb	r2, [r7, #3]
 8006284:	4611      	mov	r1, r2
 8006286:	4618      	mov	r0, r3
 8006288:	f005 f971 	bl	800b56e <USB_HC_Halt>
 800628c:	f000 bc89 	b.w	8006ba2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	78fa      	ldrb	r2, [r7, #3]
 8006296:	4611      	mov	r1, r2
 8006298:	4618      	mov	r0, r3
 800629a:	f004 fbf0 	bl	800aa7e <USB_ReadChInterrupts>
 800629e:	4603      	mov	r3, r0
 80062a0:	f003 0320 	and.w	r3, r3, #32
 80062a4:	2b20      	cmp	r3, #32
 80062a6:	f040 8082 	bne.w	80063ae <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80062aa:	78fb      	ldrb	r3, [r7, #3]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062b6:	461a      	mov	r2, r3
 80062b8:	2320      	movs	r3, #32
 80062ba:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80062bc:	78fa      	ldrb	r2, [r7, #3]
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	4613      	mov	r3, r2
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	1a9b      	subs	r3, r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	3319      	adds	r3, #25
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d124      	bne.n	800631c <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80062d2:	78fa      	ldrb	r2, [r7, #3]
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	011b      	lsls	r3, r3, #4
 80062da:	1a9b      	subs	r3, r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	440b      	add	r3, r1
 80062e0:	3319      	adds	r3, #25
 80062e2:	2200      	movs	r2, #0
 80062e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80062e6:	78fa      	ldrb	r2, [r7, #3]
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	334c      	adds	r3, #76	@ 0x4c
 80062f6:	2202      	movs	r2, #2
 80062f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80062fa:	78fa      	ldrb	r2, [r7, #3]
 80062fc:	6879      	ldr	r1, [r7, #4]
 80062fe:	4613      	mov	r3, r2
 8006300:	011b      	lsls	r3, r3, #4
 8006302:	1a9b      	subs	r3, r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	440b      	add	r3, r1
 8006308:	334d      	adds	r3, #77	@ 0x4d
 800630a:	2203      	movs	r2, #3
 800630c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	78fa      	ldrb	r2, [r7, #3]
 8006314:	4611      	mov	r1, r2
 8006316:	4618      	mov	r0, r3
 8006318:	f005 f929 	bl	800b56e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800631c:	78fa      	ldrb	r2, [r7, #3]
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	4613      	mov	r3, r2
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	1a9b      	subs	r3, r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	440b      	add	r3, r1
 800632a:	331a      	adds	r3, #26
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b01      	cmp	r3, #1
 8006330:	f040 8437 	bne.w	8006ba2 <HCD_HC_OUT_IRQHandler+0x978>
 8006334:	78fa      	ldrb	r2, [r7, #3]
 8006336:	6879      	ldr	r1, [r7, #4]
 8006338:	4613      	mov	r3, r2
 800633a:	011b      	lsls	r3, r3, #4
 800633c:	1a9b      	subs	r3, r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	440b      	add	r3, r1
 8006342:	331b      	adds	r3, #27
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	f040 842b 	bne.w	8006ba2 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800634c:	78fa      	ldrb	r2, [r7, #3]
 800634e:	6879      	ldr	r1, [r7, #4]
 8006350:	4613      	mov	r3, r2
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	1a9b      	subs	r3, r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	440b      	add	r3, r1
 800635a:	3326      	adds	r3, #38	@ 0x26
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d009      	beq.n	8006376 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8006362:	78fa      	ldrb	r2, [r7, #3]
 8006364:	6879      	ldr	r1, [r7, #4]
 8006366:	4613      	mov	r3, r2
 8006368:	011b      	lsls	r3, r3, #4
 800636a:	1a9b      	subs	r3, r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	440b      	add	r3, r1
 8006370:	331b      	adds	r3, #27
 8006372:	2201      	movs	r2, #1
 8006374:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8006376:	78fa      	ldrb	r2, [r7, #3]
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	4613      	mov	r3, r2
 800637c:	011b      	lsls	r3, r3, #4
 800637e:	1a9b      	subs	r3, r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	440b      	add	r3, r1
 8006384:	334d      	adds	r3, #77	@ 0x4d
 8006386:	2203      	movs	r2, #3
 8006388:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	78fa      	ldrb	r2, [r7, #3]
 8006390:	4611      	mov	r1, r2
 8006392:	4618      	mov	r0, r3
 8006394:	f005 f8eb 	bl	800b56e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8006398:	78fa      	ldrb	r2, [r7, #3]
 800639a:	6879      	ldr	r1, [r7, #4]
 800639c:	4613      	mov	r3, r2
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	1a9b      	subs	r3, r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	440b      	add	r3, r1
 80063a6:	3344      	adds	r3, #68	@ 0x44
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	e3f9      	b.n	8006ba2 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	78fa      	ldrb	r2, [r7, #3]
 80063b4:	4611      	mov	r1, r2
 80063b6:	4618      	mov	r0, r3
 80063b8:	f004 fb61 	bl	800aa7e <USB_ReadChInterrupts>
 80063bc:	4603      	mov	r3, r0
 80063be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063c6:	d111      	bne.n	80063ec <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80063c8:	78fb      	ldrb	r3, [r7, #3]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063d4:	461a      	mov	r2, r3
 80063d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063da:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	78fa      	ldrb	r2, [r7, #3]
 80063e2:	4611      	mov	r1, r2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f005 f8c2 	bl	800b56e <USB_HC_Halt>
 80063ea:	e3da      	b.n	8006ba2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	78fa      	ldrb	r2, [r7, #3]
 80063f2:	4611      	mov	r1, r2
 80063f4:	4618      	mov	r0, r3
 80063f6:	f004 fb42 	bl	800aa7e <USB_ReadChInterrupts>
 80063fa:	4603      	mov	r3, r0
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b01      	cmp	r3, #1
 8006402:	d168      	bne.n	80064d6 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006404:	78fa      	ldrb	r2, [r7, #3]
 8006406:	6879      	ldr	r1, [r7, #4]
 8006408:	4613      	mov	r3, r2
 800640a:	011b      	lsls	r3, r3, #4
 800640c:	1a9b      	subs	r3, r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	440b      	add	r3, r1
 8006412:	3344      	adds	r3, #68	@ 0x44
 8006414:	2200      	movs	r2, #0
 8006416:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	78fa      	ldrb	r2, [r7, #3]
 800641e:	4611      	mov	r1, r2
 8006420:	4618      	mov	r0, r3
 8006422:	f004 fb2c 	bl	800aa7e <USB_ReadChInterrupts>
 8006426:	4603      	mov	r3, r0
 8006428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642c:	2b40      	cmp	r3, #64	@ 0x40
 800642e:	d112      	bne.n	8006456 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006430:	78fa      	ldrb	r2, [r7, #3]
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	4613      	mov	r3, r2
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	440b      	add	r3, r1
 800643e:	3319      	adds	r3, #25
 8006440:	2201      	movs	r2, #1
 8006442:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	4413      	add	r3, r2
 800644c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006450:	461a      	mov	r2, r3
 8006452:	2340      	movs	r3, #64	@ 0x40
 8006454:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8006456:	78fa      	ldrb	r2, [r7, #3]
 8006458:	6879      	ldr	r1, [r7, #4]
 800645a:	4613      	mov	r3, r2
 800645c:	011b      	lsls	r3, r3, #4
 800645e:	1a9b      	subs	r3, r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	440b      	add	r3, r1
 8006464:	331b      	adds	r3, #27
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d019      	beq.n	80064a0 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800646c:	78fa      	ldrb	r2, [r7, #3]
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	4613      	mov	r3, r2
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	1a9b      	subs	r3, r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	440b      	add	r3, r1
 800647a:	331b      	adds	r3, #27
 800647c:	2200      	movs	r2, #0
 800647e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	4413      	add	r3, r2
 8006488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	78fa      	ldrb	r2, [r7, #3]
 8006490:	0151      	lsls	r1, r2, #5
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	440a      	add	r2, r1
 8006496:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800649a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800649e:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ac:	461a      	mov	r2, r3
 80064ae:	2301      	movs	r3, #1
 80064b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80064b2:	78fa      	ldrb	r2, [r7, #3]
 80064b4:	6879      	ldr	r1, [r7, #4]
 80064b6:	4613      	mov	r3, r2
 80064b8:	011b      	lsls	r3, r3, #4
 80064ba:	1a9b      	subs	r3, r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	440b      	add	r3, r1
 80064c0:	334d      	adds	r3, #77	@ 0x4d
 80064c2:	2201      	movs	r2, #1
 80064c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	78fa      	ldrb	r2, [r7, #3]
 80064cc:	4611      	mov	r1, r2
 80064ce:	4618      	mov	r0, r3
 80064d0:	f005 f84d 	bl	800b56e <USB_HC_Halt>
 80064d4:	e365      	b.n	8006ba2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	78fa      	ldrb	r2, [r7, #3]
 80064dc:	4611      	mov	r1, r2
 80064de:	4618      	mov	r0, r3
 80064e0:	f004 facd 	bl	800aa7e <USB_ReadChInterrupts>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ea:	2b40      	cmp	r3, #64	@ 0x40
 80064ec:	d139      	bne.n	8006562 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80064ee:	78fa      	ldrb	r2, [r7, #3]
 80064f0:	6879      	ldr	r1, [r7, #4]
 80064f2:	4613      	mov	r3, r2
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	1a9b      	subs	r3, r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	440b      	add	r3, r1
 80064fc:	334d      	adds	r3, #77	@ 0x4d
 80064fe:	2205      	movs	r2, #5
 8006500:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006502:	78fa      	ldrb	r2, [r7, #3]
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	4613      	mov	r3, r2
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	1a9b      	subs	r3, r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	440b      	add	r3, r1
 8006510:	331a      	adds	r3, #26
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d109      	bne.n	800652c <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006518:	78fa      	ldrb	r2, [r7, #3]
 800651a:	6879      	ldr	r1, [r7, #4]
 800651c:	4613      	mov	r3, r2
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	1a9b      	subs	r3, r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	440b      	add	r3, r1
 8006526:	3319      	adds	r3, #25
 8006528:	2201      	movs	r2, #1
 800652a:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800652c:	78fa      	ldrb	r2, [r7, #3]
 800652e:	6879      	ldr	r1, [r7, #4]
 8006530:	4613      	mov	r3, r2
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	1a9b      	subs	r3, r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	440b      	add	r3, r1
 800653a:	3344      	adds	r3, #68	@ 0x44
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	78fa      	ldrb	r2, [r7, #3]
 8006546:	4611      	mov	r1, r2
 8006548:	4618      	mov	r0, r3
 800654a:	f005 f810 	bl	800b56e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	4413      	add	r3, r2
 8006556:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800655a:	461a      	mov	r2, r3
 800655c:	2340      	movs	r3, #64	@ 0x40
 800655e:	6093      	str	r3, [r2, #8]
 8006560:	e31f      	b.n	8006ba2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	78fa      	ldrb	r2, [r7, #3]
 8006568:	4611      	mov	r1, r2
 800656a:	4618      	mov	r0, r3
 800656c:	f004 fa87 	bl	800aa7e <USB_ReadChInterrupts>
 8006570:	4603      	mov	r3, r0
 8006572:	f003 0308 	and.w	r3, r3, #8
 8006576:	2b08      	cmp	r3, #8
 8006578:	d11a      	bne.n	80065b0 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800657a:	78fb      	ldrb	r3, [r7, #3]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	4413      	add	r3, r2
 8006582:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006586:	461a      	mov	r2, r3
 8006588:	2308      	movs	r3, #8
 800658a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800658c:	78fa      	ldrb	r2, [r7, #3]
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	4613      	mov	r3, r2
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	440b      	add	r3, r1
 800659a:	334d      	adds	r3, #77	@ 0x4d
 800659c:	2206      	movs	r2, #6
 800659e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	78fa      	ldrb	r2, [r7, #3]
 80065a6:	4611      	mov	r1, r2
 80065a8:	4618      	mov	r0, r3
 80065aa:	f004 ffe0 	bl	800b56e <USB_HC_Halt>
 80065ae:	e2f8      	b.n	8006ba2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	78fa      	ldrb	r2, [r7, #3]
 80065b6:	4611      	mov	r1, r2
 80065b8:	4618      	mov	r0, r3
 80065ba:	f004 fa60 	bl	800aa7e <USB_ReadChInterrupts>
 80065be:	4603      	mov	r3, r0
 80065c0:	f003 0310 	and.w	r3, r3, #16
 80065c4:	2b10      	cmp	r3, #16
 80065c6:	d144      	bne.n	8006652 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80065c8:	78fa      	ldrb	r2, [r7, #3]
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	4613      	mov	r3, r2
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	1a9b      	subs	r3, r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	3344      	adds	r3, #68	@ 0x44
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80065dc:	78fa      	ldrb	r2, [r7, #3]
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	1a9b      	subs	r3, r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	334d      	adds	r3, #77	@ 0x4d
 80065ec:	2204      	movs	r2, #4
 80065ee:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80065f0:	78fa      	ldrb	r2, [r7, #3]
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	4613      	mov	r3, r2
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	1a9b      	subs	r3, r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	440b      	add	r3, r1
 80065fe:	3319      	adds	r3, #25
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d114      	bne.n	8006630 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006606:	78fa      	ldrb	r2, [r7, #3]
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	4613      	mov	r3, r2
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	1a9b      	subs	r3, r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	440b      	add	r3, r1
 8006614:	3318      	adds	r3, #24
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d109      	bne.n	8006630 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800661c:	78fa      	ldrb	r2, [r7, #3]
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	4613      	mov	r3, r2
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	1a9b      	subs	r3, r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	3319      	adds	r3, #25
 800662c:	2201      	movs	r2, #1
 800662e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	78fa      	ldrb	r2, [r7, #3]
 8006636:	4611      	mov	r1, r2
 8006638:	4618      	mov	r0, r3
 800663a:	f004 ff98 	bl	800b56e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800663e:	78fb      	ldrb	r3, [r7, #3]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	4413      	add	r3, r2
 8006646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800664a:	461a      	mov	r2, r3
 800664c:	2310      	movs	r3, #16
 800664e:	6093      	str	r3, [r2, #8]
 8006650:	e2a7      	b.n	8006ba2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	78fa      	ldrb	r2, [r7, #3]
 8006658:	4611      	mov	r1, r2
 800665a:	4618      	mov	r0, r3
 800665c:	f004 fa0f 	bl	800aa7e <USB_ReadChInterrupts>
 8006660:	4603      	mov	r3, r0
 8006662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006666:	2b80      	cmp	r3, #128	@ 0x80
 8006668:	f040 8083 	bne.w	8006772 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	799b      	ldrb	r3, [r3, #6]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d111      	bne.n	8006698 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8006674:	78fa      	ldrb	r2, [r7, #3]
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	4613      	mov	r3, r2
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	1a9b      	subs	r3, r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	440b      	add	r3, r1
 8006682:	334d      	adds	r3, #77	@ 0x4d
 8006684:	2207      	movs	r2, #7
 8006686:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	78fa      	ldrb	r2, [r7, #3]
 800668e:	4611      	mov	r1, r2
 8006690:	4618      	mov	r0, r3
 8006692:	f004 ff6c 	bl	800b56e <USB_HC_Halt>
 8006696:	e062      	b.n	800675e <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006698:	78fa      	ldrb	r2, [r7, #3]
 800669a:	6879      	ldr	r1, [r7, #4]
 800669c:	4613      	mov	r3, r2
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	1a9b      	subs	r3, r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	440b      	add	r3, r1
 80066a6:	3344      	adds	r3, #68	@ 0x44
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	1c59      	adds	r1, r3, #1
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	4613      	mov	r3, r2
 80066b0:	011b      	lsls	r3, r3, #4
 80066b2:	1a9b      	subs	r3, r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4403      	add	r3, r0
 80066b8:	3344      	adds	r3, #68	@ 0x44
 80066ba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80066bc:	78fa      	ldrb	r2, [r7, #3]
 80066be:	6879      	ldr	r1, [r7, #4]
 80066c0:	4613      	mov	r3, r2
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	1a9b      	subs	r3, r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	440b      	add	r3, r1
 80066ca:	3344      	adds	r3, #68	@ 0x44
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d922      	bls.n	8006718 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80066d2:	78fa      	ldrb	r2, [r7, #3]
 80066d4:	6879      	ldr	r1, [r7, #4]
 80066d6:	4613      	mov	r3, r2
 80066d8:	011b      	lsls	r3, r3, #4
 80066da:	1a9b      	subs	r3, r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	440b      	add	r3, r1
 80066e0:	3344      	adds	r3, #68	@ 0x44
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80066e6:	78fa      	ldrb	r2, [r7, #3]
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	4613      	mov	r3, r2
 80066ec:	011b      	lsls	r3, r3, #4
 80066ee:	1a9b      	subs	r3, r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	440b      	add	r3, r1
 80066f4:	334c      	adds	r3, #76	@ 0x4c
 80066f6:	2204      	movs	r2, #4
 80066f8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80066fa:	78fa      	ldrb	r2, [r7, #3]
 80066fc:	6879      	ldr	r1, [r7, #4]
 80066fe:	4613      	mov	r3, r2
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	1a9b      	subs	r3, r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	440b      	add	r3, r1
 8006708:	334c      	adds	r3, #76	@ 0x4c
 800670a:	781a      	ldrb	r2, [r3, #0]
 800670c:	78fb      	ldrb	r3, [r7, #3]
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f009 f98f 	bl	800fa34 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006716:	e022      	b.n	800675e <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006718:	78fa      	ldrb	r2, [r7, #3]
 800671a:	6879      	ldr	r1, [r7, #4]
 800671c:	4613      	mov	r3, r2
 800671e:	011b      	lsls	r3, r3, #4
 8006720:	1a9b      	subs	r3, r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	440b      	add	r3, r1
 8006726:	334c      	adds	r3, #76	@ 0x4c
 8006728:	2202      	movs	r2, #2
 800672a:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	4413      	add	r3, r2
 8006734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006742:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800674a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800674c:	78fb      	ldrb	r3, [r7, #3]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	4413      	add	r3, r2
 8006754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006758:	461a      	mov	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800675e:	78fb      	ldrb	r3, [r7, #3]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	4413      	add	r3, r2
 8006766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800676a:	461a      	mov	r2, r3
 800676c:	2380      	movs	r3, #128	@ 0x80
 800676e:	6093      	str	r3, [r2, #8]
 8006770:	e217      	b.n	8006ba2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	78fa      	ldrb	r2, [r7, #3]
 8006778:	4611      	mov	r1, r2
 800677a:	4618      	mov	r0, r3
 800677c:	f004 f97f 	bl	800aa7e <USB_ReadChInterrupts>
 8006780:	4603      	mov	r3, r0
 8006782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800678a:	d11b      	bne.n	80067c4 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800678c:	78fa      	ldrb	r2, [r7, #3]
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	4613      	mov	r3, r2
 8006792:	011b      	lsls	r3, r3, #4
 8006794:	1a9b      	subs	r3, r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	440b      	add	r3, r1
 800679a:	334d      	adds	r3, #77	@ 0x4d
 800679c:	2209      	movs	r2, #9
 800679e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	78fa      	ldrb	r2, [r7, #3]
 80067a6:	4611      	mov	r1, r2
 80067a8:	4618      	mov	r0, r3
 80067aa:	f004 fee0 	bl	800b56e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80067ae:	78fb      	ldrb	r3, [r7, #3]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067ba:	461a      	mov	r2, r3
 80067bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067c0:	6093      	str	r3, [r2, #8]
 80067c2:	e1ee      	b.n	8006ba2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	78fa      	ldrb	r2, [r7, #3]
 80067ca:	4611      	mov	r1, r2
 80067cc:	4618      	mov	r0, r3
 80067ce:	f004 f956 	bl	800aa7e <USB_ReadChInterrupts>
 80067d2:	4603      	mov	r3, r0
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b02      	cmp	r3, #2
 80067da:	f040 81df 	bne.w	8006b9c <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80067de:	78fb      	ldrb	r3, [r7, #3]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067ea:	461a      	mov	r2, r3
 80067ec:	2302      	movs	r3, #2
 80067ee:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80067f0:	78fa      	ldrb	r2, [r7, #3]
 80067f2:	6879      	ldr	r1, [r7, #4]
 80067f4:	4613      	mov	r3, r2
 80067f6:	011b      	lsls	r3, r3, #4
 80067f8:	1a9b      	subs	r3, r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	440b      	add	r3, r1
 80067fe:	334d      	adds	r3, #77	@ 0x4d
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	2b01      	cmp	r3, #1
 8006804:	f040 8093 	bne.w	800692e <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006808:	78fa      	ldrb	r2, [r7, #3]
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	4613      	mov	r3, r2
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	1a9b      	subs	r3, r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	440b      	add	r3, r1
 8006816:	334d      	adds	r3, #77	@ 0x4d
 8006818:	2202      	movs	r2, #2
 800681a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800681c:	78fa      	ldrb	r2, [r7, #3]
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	4613      	mov	r3, r2
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	1a9b      	subs	r3, r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	440b      	add	r3, r1
 800682a:	334c      	adds	r3, #76	@ 0x4c
 800682c:	2201      	movs	r2, #1
 800682e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006830:	78fa      	ldrb	r2, [r7, #3]
 8006832:	6879      	ldr	r1, [r7, #4]
 8006834:	4613      	mov	r3, r2
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	1a9b      	subs	r3, r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	440b      	add	r3, r1
 800683e:	3326      	adds	r3, #38	@ 0x26
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b02      	cmp	r3, #2
 8006844:	d00b      	beq.n	800685e <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8006846:	78fa      	ldrb	r2, [r7, #3]
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	4613      	mov	r3, r2
 800684c:	011b      	lsls	r3, r3, #4
 800684e:	1a9b      	subs	r3, r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	440b      	add	r3, r1
 8006854:	3326      	adds	r3, #38	@ 0x26
 8006856:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006858:	2b03      	cmp	r3, #3
 800685a:	f040 8190 	bne.w	8006b7e <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	799b      	ldrb	r3, [r3, #6]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d115      	bne.n	8006892 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8006866:	78fa      	ldrb	r2, [r7, #3]
 8006868:	6879      	ldr	r1, [r7, #4]
 800686a:	4613      	mov	r3, r2
 800686c:	011b      	lsls	r3, r3, #4
 800686e:	1a9b      	subs	r3, r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	440b      	add	r3, r1
 8006874:	333d      	adds	r3, #61	@ 0x3d
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	78fa      	ldrb	r2, [r7, #3]
 800687a:	f083 0301 	eor.w	r3, r3, #1
 800687e:	b2d8      	uxtb	r0, r3
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	4613      	mov	r3, r2
 8006884:	011b      	lsls	r3, r3, #4
 8006886:	1a9b      	subs	r3, r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	440b      	add	r3, r1
 800688c:	333d      	adds	r3, #61	@ 0x3d
 800688e:	4602      	mov	r2, r0
 8006890:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	799b      	ldrb	r3, [r3, #6]
 8006896:	2b01      	cmp	r3, #1
 8006898:	f040 8171 	bne.w	8006b7e <HCD_HC_OUT_IRQHandler+0x954>
 800689c:	78fa      	ldrb	r2, [r7, #3]
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	4613      	mov	r3, r2
 80068a2:	011b      	lsls	r3, r3, #4
 80068a4:	1a9b      	subs	r3, r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	440b      	add	r3, r1
 80068aa:	3334      	adds	r3, #52	@ 0x34
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 8165 	beq.w	8006b7e <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80068b4:	78fa      	ldrb	r2, [r7, #3]
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	4613      	mov	r3, r2
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	1a9b      	subs	r3, r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	440b      	add	r3, r1
 80068c2:	3334      	adds	r3, #52	@ 0x34
 80068c4:	6819      	ldr	r1, [r3, #0]
 80068c6:	78fa      	ldrb	r2, [r7, #3]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	4613      	mov	r3, r2
 80068cc:	011b      	lsls	r3, r3, #4
 80068ce:	1a9b      	subs	r3, r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4403      	add	r3, r0
 80068d4:	3328      	adds	r3, #40	@ 0x28
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	440b      	add	r3, r1
 80068da:	1e59      	subs	r1, r3, #1
 80068dc:	78fa      	ldrb	r2, [r7, #3]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	4613      	mov	r3, r2
 80068e2:	011b      	lsls	r3, r3, #4
 80068e4:	1a9b      	subs	r3, r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4403      	add	r3, r0
 80068ea:	3328      	adds	r3, #40	@ 0x28
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80068f2:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 813f 	beq.w	8006b7e <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006900:	78fa      	ldrb	r2, [r7, #3]
 8006902:	6879      	ldr	r1, [r7, #4]
 8006904:	4613      	mov	r3, r2
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	1a9b      	subs	r3, r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	440b      	add	r3, r1
 800690e:	333d      	adds	r3, #61	@ 0x3d
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	78fa      	ldrb	r2, [r7, #3]
 8006914:	f083 0301 	eor.w	r3, r3, #1
 8006918:	b2d8      	uxtb	r0, r3
 800691a:	6879      	ldr	r1, [r7, #4]
 800691c:	4613      	mov	r3, r2
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	1a9b      	subs	r3, r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	440b      	add	r3, r1
 8006926:	333d      	adds	r3, #61	@ 0x3d
 8006928:	4602      	mov	r2, r0
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	e127      	b.n	8006b7e <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800692e:	78fa      	ldrb	r2, [r7, #3]
 8006930:	6879      	ldr	r1, [r7, #4]
 8006932:	4613      	mov	r3, r2
 8006934:	011b      	lsls	r3, r3, #4
 8006936:	1a9b      	subs	r3, r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	440b      	add	r3, r1
 800693c:	334d      	adds	r3, #77	@ 0x4d
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	2b03      	cmp	r3, #3
 8006942:	d120      	bne.n	8006986 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006944:	78fa      	ldrb	r2, [r7, #3]
 8006946:	6879      	ldr	r1, [r7, #4]
 8006948:	4613      	mov	r3, r2
 800694a:	011b      	lsls	r3, r3, #4
 800694c:	1a9b      	subs	r3, r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	440b      	add	r3, r1
 8006952:	334d      	adds	r3, #77	@ 0x4d
 8006954:	2202      	movs	r2, #2
 8006956:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006958:	78fa      	ldrb	r2, [r7, #3]
 800695a:	6879      	ldr	r1, [r7, #4]
 800695c:	4613      	mov	r3, r2
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	1a9b      	subs	r3, r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	440b      	add	r3, r1
 8006966:	331b      	adds	r3, #27
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	2b01      	cmp	r3, #1
 800696c:	f040 8107 	bne.w	8006b7e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006970:	78fa      	ldrb	r2, [r7, #3]
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	4613      	mov	r3, r2
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	1a9b      	subs	r3, r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	440b      	add	r3, r1
 800697e:	334c      	adds	r3, #76	@ 0x4c
 8006980:	2202      	movs	r2, #2
 8006982:	701a      	strb	r2, [r3, #0]
 8006984:	e0fb      	b.n	8006b7e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006986:	78fa      	ldrb	r2, [r7, #3]
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	011b      	lsls	r3, r3, #4
 800698e:	1a9b      	subs	r3, r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	440b      	add	r3, r1
 8006994:	334d      	adds	r3, #77	@ 0x4d
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b04      	cmp	r3, #4
 800699a:	d13a      	bne.n	8006a12 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800699c:	78fa      	ldrb	r2, [r7, #3]
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	4613      	mov	r3, r2
 80069a2:	011b      	lsls	r3, r3, #4
 80069a4:	1a9b      	subs	r3, r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	440b      	add	r3, r1
 80069aa:	334d      	adds	r3, #77	@ 0x4d
 80069ac:	2202      	movs	r2, #2
 80069ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80069b0:	78fa      	ldrb	r2, [r7, #3]
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	4613      	mov	r3, r2
 80069b6:	011b      	lsls	r3, r3, #4
 80069b8:	1a9b      	subs	r3, r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	440b      	add	r3, r1
 80069be:	334c      	adds	r3, #76	@ 0x4c
 80069c0:	2202      	movs	r2, #2
 80069c2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80069c4:	78fa      	ldrb	r2, [r7, #3]
 80069c6:	6879      	ldr	r1, [r7, #4]
 80069c8:	4613      	mov	r3, r2
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	1a9b      	subs	r3, r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	440b      	add	r3, r1
 80069d2:	331b      	adds	r3, #27
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	f040 80d1 	bne.w	8006b7e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80069dc:	78fa      	ldrb	r2, [r7, #3]
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	4613      	mov	r3, r2
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	1a9b      	subs	r3, r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	440b      	add	r3, r1
 80069ea:	331b      	adds	r3, #27
 80069ec:	2200      	movs	r2, #0
 80069ee:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	78fa      	ldrb	r2, [r7, #3]
 8006a00:	0151      	lsls	r1, r2, #5
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	440a      	add	r2, r1
 8006a06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a0e:	6053      	str	r3, [r2, #4]
 8006a10:	e0b5      	b.n	8006b7e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006a12:	78fa      	ldrb	r2, [r7, #3]
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	4613      	mov	r3, r2
 8006a18:	011b      	lsls	r3, r3, #4
 8006a1a:	1a9b      	subs	r3, r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	440b      	add	r3, r1
 8006a20:	334d      	adds	r3, #77	@ 0x4d
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b05      	cmp	r3, #5
 8006a26:	d114      	bne.n	8006a52 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006a28:	78fa      	ldrb	r2, [r7, #3]
 8006a2a:	6879      	ldr	r1, [r7, #4]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	011b      	lsls	r3, r3, #4
 8006a30:	1a9b      	subs	r3, r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	440b      	add	r3, r1
 8006a36:	334d      	adds	r3, #77	@ 0x4d
 8006a38:	2202      	movs	r2, #2
 8006a3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006a3c:	78fa      	ldrb	r2, [r7, #3]
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	4613      	mov	r3, r2
 8006a42:	011b      	lsls	r3, r3, #4
 8006a44:	1a9b      	subs	r3, r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	440b      	add	r3, r1
 8006a4a:	334c      	adds	r3, #76	@ 0x4c
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	e095      	b.n	8006b7e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006a52:	78fa      	ldrb	r2, [r7, #3]
 8006a54:	6879      	ldr	r1, [r7, #4]
 8006a56:	4613      	mov	r3, r2
 8006a58:	011b      	lsls	r3, r3, #4
 8006a5a:	1a9b      	subs	r3, r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	440b      	add	r3, r1
 8006a60:	334d      	adds	r3, #77	@ 0x4d
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	2b06      	cmp	r3, #6
 8006a66:	d114      	bne.n	8006a92 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006a68:	78fa      	ldrb	r2, [r7, #3]
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	011b      	lsls	r3, r3, #4
 8006a70:	1a9b      	subs	r3, r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	440b      	add	r3, r1
 8006a76:	334d      	adds	r3, #77	@ 0x4d
 8006a78:	2202      	movs	r2, #2
 8006a7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006a7c:	78fa      	ldrb	r2, [r7, #3]
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	4613      	mov	r3, r2
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	1a9b      	subs	r3, r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	440b      	add	r3, r1
 8006a8a:	334c      	adds	r3, #76	@ 0x4c
 8006a8c:	2205      	movs	r2, #5
 8006a8e:	701a      	strb	r2, [r3, #0]
 8006a90:	e075      	b.n	8006b7e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006a92:	78fa      	ldrb	r2, [r7, #3]
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	4613      	mov	r3, r2
 8006a98:	011b      	lsls	r3, r3, #4
 8006a9a:	1a9b      	subs	r3, r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	440b      	add	r3, r1
 8006aa0:	334d      	adds	r3, #77	@ 0x4d
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	2b07      	cmp	r3, #7
 8006aa6:	d00a      	beq.n	8006abe <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006aa8:	78fa      	ldrb	r2, [r7, #3]
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	4613      	mov	r3, r2
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	1a9b      	subs	r3, r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	440b      	add	r3, r1
 8006ab6:	334d      	adds	r3, #77	@ 0x4d
 8006ab8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006aba:	2b09      	cmp	r3, #9
 8006abc:	d170      	bne.n	8006ba0 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006abe:	78fa      	ldrb	r2, [r7, #3]
 8006ac0:	6879      	ldr	r1, [r7, #4]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	1a9b      	subs	r3, r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	440b      	add	r3, r1
 8006acc:	334d      	adds	r3, #77	@ 0x4d
 8006ace:	2202      	movs	r2, #2
 8006ad0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006ad2:	78fa      	ldrb	r2, [r7, #3]
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	011b      	lsls	r3, r3, #4
 8006ada:	1a9b      	subs	r3, r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	440b      	add	r3, r1
 8006ae0:	3344      	adds	r3, #68	@ 0x44
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	1c59      	adds	r1, r3, #1
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	011b      	lsls	r3, r3, #4
 8006aec:	1a9b      	subs	r3, r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4403      	add	r3, r0
 8006af2:	3344      	adds	r3, #68	@ 0x44
 8006af4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006af6:	78fa      	ldrb	r2, [r7, #3]
 8006af8:	6879      	ldr	r1, [r7, #4]
 8006afa:	4613      	mov	r3, r2
 8006afc:	011b      	lsls	r3, r3, #4
 8006afe:	1a9b      	subs	r3, r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	440b      	add	r3, r1
 8006b04:	3344      	adds	r3, #68	@ 0x44
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d914      	bls.n	8006b36 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006b0c:	78fa      	ldrb	r2, [r7, #3]
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	4613      	mov	r3, r2
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	1a9b      	subs	r3, r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	440b      	add	r3, r1
 8006b1a:	3344      	adds	r3, #68	@ 0x44
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006b20:	78fa      	ldrb	r2, [r7, #3]
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	4613      	mov	r3, r2
 8006b26:	011b      	lsls	r3, r3, #4
 8006b28:	1a9b      	subs	r3, r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	440b      	add	r3, r1
 8006b2e:	334c      	adds	r3, #76	@ 0x4c
 8006b30:	2204      	movs	r2, #4
 8006b32:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006b34:	e022      	b.n	8006b7c <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006b36:	78fa      	ldrb	r2, [r7, #3]
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	011b      	lsls	r3, r3, #4
 8006b3e:	1a9b      	subs	r3, r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	440b      	add	r3, r1
 8006b44:	334c      	adds	r3, #76	@ 0x4c
 8006b46:	2202      	movs	r2, #2
 8006b48:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006b60:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b68:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006b6a:	78fb      	ldrb	r3, [r7, #3]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b76:	461a      	mov	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006b7c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006b7e:	78fa      	ldrb	r2, [r7, #3]
 8006b80:	6879      	ldr	r1, [r7, #4]
 8006b82:	4613      	mov	r3, r2
 8006b84:	011b      	lsls	r3, r3, #4
 8006b86:	1a9b      	subs	r3, r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	440b      	add	r3, r1
 8006b8c:	334c      	adds	r3, #76	@ 0x4c
 8006b8e:	781a      	ldrb	r2, [r3, #0]
 8006b90:	78fb      	ldrb	r3, [r7, #3]
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f008 ff4d 	bl	800fa34 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006b9a:	e002      	b.n	8006ba2 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8006b9c:	bf00      	nop
 8006b9e:	e000      	b.n	8006ba2 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8006ba0:	bf00      	nop
  }
}
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	@ 0x28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	f003 030f 	and.w	r3, r3, #15
 8006bc8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	0c5b      	lsrs	r3, r3, #17
 8006bce:	f003 030f 	and.w	r3, r3, #15
 8006bd2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	091b      	lsrs	r3, r3, #4
 8006bd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bdc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d004      	beq.n	8006bee <HCD_RXQLVL_IRQHandler+0x46>
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	2b05      	cmp	r3, #5
 8006be8:	f000 80b6 	beq.w	8006d58 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006bec:	e0b7      	b.n	8006d5e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 80b3 	beq.w	8006d5c <HCD_RXQLVL_IRQHandler+0x1b4>
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	011b      	lsls	r3, r3, #4
 8006bfe:	1a9b      	subs	r3, r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	440b      	add	r3, r1
 8006c04:	332c      	adds	r3, #44	@ 0x2c
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 80a7 	beq.w	8006d5c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006c0e:	6879      	ldr	r1, [r7, #4]
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	4613      	mov	r3, r2
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	1a9b      	subs	r3, r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	3338      	adds	r3, #56	@ 0x38
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	18d1      	adds	r1, r2, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	1a9b      	subs	r3, r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4403      	add	r3, r0
 8006c32:	3334      	adds	r3, #52	@ 0x34
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4299      	cmp	r1, r3
 8006c38:	f200 8083 	bhi.w	8006d42 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6818      	ldr	r0, [r3, #0]
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	4613      	mov	r3, r2
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	1a9b      	subs	r3, r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	440b      	add	r3, r1
 8006c4e:	332c      	adds	r3, #44	@ 0x2c
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	b292      	uxth	r2, r2
 8006c56:	4619      	mov	r1, r3
 8006c58:	f003 fea6 	bl	800a9a8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8006c5c:	6879      	ldr	r1, [r7, #4]
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	4613      	mov	r3, r2
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	1a9b      	subs	r3, r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	440b      	add	r3, r1
 8006c6a:	332c      	adds	r3, #44	@ 0x2c
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	18d1      	adds	r1, r2, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	4613      	mov	r3, r2
 8006c78:	011b      	lsls	r3, r3, #4
 8006c7a:	1a9b      	subs	r3, r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4403      	add	r3, r0
 8006c80:	332c      	adds	r3, #44	@ 0x2c
 8006c82:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	011b      	lsls	r3, r3, #4
 8006c8c:	1a9b      	subs	r3, r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	440b      	add	r3, r1
 8006c92:	3338      	adds	r3, #56	@ 0x38
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	18d1      	adds	r1, r2, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	011b      	lsls	r3, r3, #4
 8006ca2:	1a9b      	subs	r3, r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4403      	add	r3, r0
 8006ca8:	3338      	adds	r3, #56	@ 0x38
 8006caa:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	0cdb      	lsrs	r3, r3, #19
 8006cbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cc0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006cc2:	6879      	ldr	r1, [r7, #4]
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	1a9b      	subs	r3, r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	3328      	adds	r3, #40	@ 0x28
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d13f      	bne.n	8006d5c <HCD_RXQLVL_IRQHandler+0x1b4>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d03c      	beq.n	8006d5c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006cf8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d00:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d0e:	461a      	mov	r2, r3
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8006d14:	6879      	ldr	r1, [r7, #4]
 8006d16:	69ba      	ldr	r2, [r7, #24]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	011b      	lsls	r3, r3, #4
 8006d1c:	1a9b      	subs	r3, r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	440b      	add	r3, r1
 8006d22:	333c      	adds	r3, #60	@ 0x3c
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	f083 0301 	eor.w	r3, r3, #1
 8006d2a:	b2d8      	uxtb	r0, r3
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	4613      	mov	r3, r2
 8006d32:	011b      	lsls	r3, r3, #4
 8006d34:	1a9b      	subs	r3, r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	440b      	add	r3, r1
 8006d3a:	333c      	adds	r3, #60	@ 0x3c
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	701a      	strb	r2, [r3, #0]
      break;
 8006d40:	e00c      	b.n	8006d5c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	4613      	mov	r3, r2
 8006d48:	011b      	lsls	r3, r3, #4
 8006d4a:	1a9b      	subs	r3, r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	440b      	add	r3, r1
 8006d50:	334c      	adds	r3, #76	@ 0x4c
 8006d52:	2204      	movs	r2, #4
 8006d54:	701a      	strb	r2, [r3, #0]
      break;
 8006d56:	e001      	b.n	8006d5c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8006d58:	bf00      	nop
 8006d5a:	e000      	b.n	8006d5e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006d5c:	bf00      	nop
  }
}
 8006d5e:	bf00      	nop
 8006d60:	3728      	adds	r7, #40	@ 0x28
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b086      	sub	sp, #24
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006d92:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d10b      	bne.n	8006db6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d102      	bne.n	8006dae <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f008 fe27 	bl	800f9fc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f043 0302 	orr.w	r3, r3, #2
 8006db4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f003 0308 	and.w	r3, r3, #8
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d132      	bne.n	8006e26 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	f043 0308 	orr.w	r3, r3, #8
 8006dc6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d126      	bne.n	8006e20 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	7a5b      	ldrb	r3, [r3, #9]
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d113      	bne.n	8006e02 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006de0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006de4:	d106      	bne.n	8006df4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2102      	movs	r1, #2
 8006dec:	4618      	mov	r0, r3
 8006dee:	f003 ff51 	bl	800ac94 <USB_InitFSLSPClkSel>
 8006df2:	e011      	b.n	8006e18 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2101      	movs	r1, #1
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f003 ff4a 	bl	800ac94 <USB_InitFSLSPClkSel>
 8006e00:	e00a      	b.n	8006e18 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	79db      	ldrb	r3, [r3, #7]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d106      	bne.n	8006e18 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e10:	461a      	mov	r2, r3
 8006e12:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006e16:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f008 fe19 	bl	800fa50 <HAL_HCD_PortEnabled_Callback>
 8006e1e:	e002      	b.n	8006e26 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f008 fe23 	bl	800fa6c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f003 0320 	and.w	r3, r3, #32
 8006e2c:	2b20      	cmp	r3, #32
 8006e2e:	d103      	bne.n	8006e38 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f043 0320 	orr.w	r3, r3, #32
 8006e36:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006e3e:	461a      	mov	r2, r3
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	6013      	str	r3, [r2, #0]
}
 8006e44:	bf00      	nop
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e08b      	b.n	8006f76 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f8b5 	bl	8006fe2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2224      	movs	r2, #36	@ 0x24
 8006e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0201 	bic.w	r2, r2, #1
 8006e8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006e9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006eac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d107      	bne.n	8006ec6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ec2:	609a      	str	r2, [r3, #8]
 8006ec4:	e006      	b.n	8006ed4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689a      	ldr	r2, [r3, #8]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006ed2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d108      	bne.n	8006eee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006eea:	605a      	str	r2, [r3, #4]
 8006eec:	e007      	b.n	8006efe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006efc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	6859      	ldr	r1, [r3, #4]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	4b1d      	ldr	r3, [pc, #116]	@ (8006f80 <HAL_I2C_Init+0x134>)
 8006f0a:	430b      	orrs	r3, r1
 8006f0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68da      	ldr	r2, [r3, #12]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691a      	ldr	r2, [r3, #16]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	69d9      	ldr	r1, [r3, #28]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a1a      	ldr	r2, [r3, #32]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f042 0201 	orr.w	r2, r2, #1
 8006f56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	02008000 	.word	0x02008000

08006f84 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e021      	b.n	8006fda <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2224      	movs	r2, #36	@ 0x24
 8006f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0201 	bic.w	r2, r2, #1
 8006fac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f821 	bl	8006ff6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006fea:	bf00      	nop
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006ffe:	bf00      	nop
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
	...

0800700c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af02      	add	r7, sp, #8
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	4608      	mov	r0, r1
 8007016:	4611      	mov	r1, r2
 8007018:	461a      	mov	r2, r3
 800701a:	4603      	mov	r3, r0
 800701c:	817b      	strh	r3, [r7, #10]
 800701e:	460b      	mov	r3, r1
 8007020:	813b      	strh	r3, [r7, #8]
 8007022:	4613      	mov	r3, r2
 8007024:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b20      	cmp	r3, #32
 8007030:	f040 80f9 	bne.w	8007226 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <HAL_I2C_Mem_Write+0x34>
 800703a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800703c:	2b00      	cmp	r3, #0
 800703e:	d105      	bne.n	800704c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007046:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e0ed      	b.n	8007228 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007052:	2b01      	cmp	r3, #1
 8007054:	d101      	bne.n	800705a <HAL_I2C_Mem_Write+0x4e>
 8007056:	2302      	movs	r3, #2
 8007058:	e0e6      	b.n	8007228 <HAL_I2C_Mem_Write+0x21c>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007062:	f7fd f905 	bl	8004270 <HAL_GetTick>
 8007066:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	2319      	movs	r3, #25
 800706e:	2201      	movs	r2, #1
 8007070:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 fadd 	bl	8007634 <I2C_WaitOnFlagUntilTimeout>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e0d1      	b.n	8007228 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2221      	movs	r2, #33	@ 0x21
 8007088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2240      	movs	r2, #64	@ 0x40
 8007090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6a3a      	ldr	r2, [r7, #32]
 800709e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80070a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070ac:	88f8      	ldrh	r0, [r7, #6]
 80070ae:	893a      	ldrh	r2, [r7, #8]
 80070b0:	8979      	ldrh	r1, [r7, #10]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	9301      	str	r3, [sp, #4]
 80070b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	4603      	mov	r3, r0
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 f9ed 	bl	800749c <I2C_RequestMemoryWrite>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e0a9      	b.n	8007228 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070d8:	b29b      	uxth	r3, r3
 80070da:	2bff      	cmp	r3, #255	@ 0xff
 80070dc:	d90e      	bls.n	80070fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	22ff      	movs	r2, #255	@ 0xff
 80070e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	8979      	ldrh	r1, [r7, #10]
 80070ec:	2300      	movs	r3, #0
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 fc61 	bl	80079bc <I2C_TransferConfig>
 80070fa:	e00f      	b.n	800711c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007100:	b29a      	uxth	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800710a:	b2da      	uxtb	r2, r3
 800710c:	8979      	ldrh	r1, [r7, #10]
 800710e:	2300      	movs	r3, #0
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 fc50 	bl	80079bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 fae0 	bl	80076e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e07b      	b.n	8007228 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007134:	781a      	ldrb	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007140:	1c5a      	adds	r2, r3, #1
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800714a:	b29b      	uxth	r3, r3
 800714c:	3b01      	subs	r3, #1
 800714e:	b29a      	uxth	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007158:	3b01      	subs	r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007164:	b29b      	uxth	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d034      	beq.n	80071d4 <HAL_I2C_Mem_Write+0x1c8>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800716e:	2b00      	cmp	r3, #0
 8007170:	d130      	bne.n	80071d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007178:	2200      	movs	r2, #0
 800717a:	2180      	movs	r1, #128	@ 0x80
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 fa59 	bl	8007634 <I2C_WaitOnFlagUntilTimeout>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e04d      	b.n	8007228 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007190:	b29b      	uxth	r3, r3
 8007192:	2bff      	cmp	r3, #255	@ 0xff
 8007194:	d90e      	bls.n	80071b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	22ff      	movs	r2, #255	@ 0xff
 800719a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	8979      	ldrh	r1, [r7, #10]
 80071a4:	2300      	movs	r3, #0
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 fc05 	bl	80079bc <I2C_TransferConfig>
 80071b2:	e00f      	b.n	80071d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071c2:	b2da      	uxtb	r2, r3
 80071c4:	8979      	ldrh	r1, [r7, #10]
 80071c6:	2300      	movs	r3, #0
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 fbf4 	bl	80079bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071d8:	b29b      	uxth	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d19e      	bne.n	800711c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 fac6 	bl	8007774 <I2C_WaitOnSTOPFlagUntilTimeout>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e01a      	b.n	8007228 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2220      	movs	r2, #32
 80071f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6859      	ldr	r1, [r3, #4]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	4b0a      	ldr	r3, [pc, #40]	@ (8007230 <HAL_I2C_Mem_Write+0x224>)
 8007206:	400b      	ands	r3, r1
 8007208:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2220      	movs	r2, #32
 800720e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	e000      	b.n	8007228 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007226:	2302      	movs	r3, #2
  }
}
 8007228:	4618      	mov	r0, r3
 800722a:	3718      	adds	r7, #24
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	fe00e800 	.word	0xfe00e800

08007234 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b088      	sub	sp, #32
 8007238:	af02      	add	r7, sp, #8
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	4608      	mov	r0, r1
 800723e:	4611      	mov	r1, r2
 8007240:	461a      	mov	r2, r3
 8007242:	4603      	mov	r3, r0
 8007244:	817b      	strh	r3, [r7, #10]
 8007246:	460b      	mov	r3, r1
 8007248:	813b      	strh	r3, [r7, #8]
 800724a:	4613      	mov	r3, r2
 800724c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b20      	cmp	r3, #32
 8007258:	f040 80fd 	bne.w	8007456 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <HAL_I2C_Mem_Read+0x34>
 8007262:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007264:	2b00      	cmp	r3, #0
 8007266:	d105      	bne.n	8007274 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800726e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e0f1      	b.n	8007458 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800727a:	2b01      	cmp	r3, #1
 800727c:	d101      	bne.n	8007282 <HAL_I2C_Mem_Read+0x4e>
 800727e:	2302      	movs	r3, #2
 8007280:	e0ea      	b.n	8007458 <HAL_I2C_Mem_Read+0x224>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800728a:	f7fc fff1 	bl	8004270 <HAL_GetTick>
 800728e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	2319      	movs	r3, #25
 8007296:	2201      	movs	r2, #1
 8007298:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 f9c9 	bl	8007634 <I2C_WaitOnFlagUntilTimeout>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e0d5      	b.n	8007458 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2222      	movs	r2, #34	@ 0x22
 80072b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2240      	movs	r2, #64	@ 0x40
 80072b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a3a      	ldr	r2, [r7, #32]
 80072c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80072cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072d4:	88f8      	ldrh	r0, [r7, #6]
 80072d6:	893a      	ldrh	r2, [r7, #8]
 80072d8:	8979      	ldrh	r1, [r7, #10]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	9301      	str	r3, [sp, #4]
 80072de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	4603      	mov	r3, r0
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 f92d 	bl	8007544 <I2C_RequestMemoryRead>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e0ad      	b.n	8007458 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007300:	b29b      	uxth	r3, r3
 8007302:	2bff      	cmp	r3, #255	@ 0xff
 8007304:	d90e      	bls.n	8007324 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	22ff      	movs	r2, #255	@ 0xff
 800730a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007310:	b2da      	uxtb	r2, r3
 8007312:	8979      	ldrh	r1, [r7, #10]
 8007314:	4b52      	ldr	r3, [pc, #328]	@ (8007460 <HAL_I2C_Mem_Read+0x22c>)
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 fb4d 	bl	80079bc <I2C_TransferConfig>
 8007322:	e00f      	b.n	8007344 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007328:	b29a      	uxth	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007332:	b2da      	uxtb	r2, r3
 8007334:	8979      	ldrh	r1, [r7, #10]
 8007336:	4b4a      	ldr	r3, [pc, #296]	@ (8007460 <HAL_I2C_Mem_Read+0x22c>)
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 fb3c 	bl	80079bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734a:	2200      	movs	r2, #0
 800734c:	2104      	movs	r1, #4
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 f970 	bl	8007634 <I2C_WaitOnFlagUntilTimeout>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e07c      	b.n	8007458 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007368:	b2d2      	uxtb	r2, r2
 800736a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007370:	1c5a      	adds	r2, r3, #1
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800737a:	3b01      	subs	r3, #1
 800737c:	b29a      	uxth	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007386:	b29b      	uxth	r3, r3
 8007388:	3b01      	subs	r3, #1
 800738a:	b29a      	uxth	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007394:	b29b      	uxth	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d034      	beq.n	8007404 <HAL_I2C_Mem_Read+0x1d0>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d130      	bne.n	8007404 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a8:	2200      	movs	r2, #0
 80073aa:	2180      	movs	r1, #128	@ 0x80
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 f941 	bl	8007634 <I2C_WaitOnFlagUntilTimeout>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e04d      	b.n	8007458 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	2bff      	cmp	r3, #255	@ 0xff
 80073c4:	d90e      	bls.n	80073e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	22ff      	movs	r2, #255	@ 0xff
 80073ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	8979      	ldrh	r1, [r7, #10]
 80073d4:	2300      	movs	r3, #0
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f000 faed 	bl	80079bc <I2C_TransferConfig>
 80073e2:	e00f      	b.n	8007404 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	8979      	ldrh	r1, [r7, #10]
 80073f6:	2300      	movs	r3, #0
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 fadc 	bl	80079bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d19a      	bne.n	8007344 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 f9ae 	bl	8007774 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e01a      	b.n	8007458 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2220      	movs	r2, #32
 8007428:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6859      	ldr	r1, [r3, #4]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	4b0b      	ldr	r3, [pc, #44]	@ (8007464 <HAL_I2C_Mem_Read+0x230>)
 8007436:	400b      	ands	r3, r1
 8007438:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2220      	movs	r2, #32
 800743e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	e000      	b.n	8007458 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007456:	2302      	movs	r3, #2
  }
}
 8007458:	4618      	mov	r0, r3
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	80002400 	.word	0x80002400
 8007464:	fe00e800 	.word	0xfe00e800

08007468 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007476:	b2db      	uxtb	r3, r3
}
 8007478:	4618      	mov	r0, r3
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8007490:	4618      	mov	r0, r3
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af02      	add	r7, sp, #8
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	4608      	mov	r0, r1
 80074a6:	4611      	mov	r1, r2
 80074a8:	461a      	mov	r2, r3
 80074aa:	4603      	mov	r3, r0
 80074ac:	817b      	strh	r3, [r7, #10]
 80074ae:	460b      	mov	r3, r1
 80074b0:	813b      	strh	r3, [r7, #8]
 80074b2:	4613      	mov	r3, r2
 80074b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80074b6:	88fb      	ldrh	r3, [r7, #6]
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	8979      	ldrh	r1, [r7, #10]
 80074bc:	4b20      	ldr	r3, [pc, #128]	@ (8007540 <I2C_RequestMemoryWrite+0xa4>)
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 fa79 	bl	80079bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	69b9      	ldr	r1, [r7, #24]
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 f909 	bl	80076e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e02c      	b.n	8007538 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074de:	88fb      	ldrh	r3, [r7, #6]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d105      	bne.n	80074f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80074e4:	893b      	ldrh	r3, [r7, #8]
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80074ee:	e015      	b.n	800751c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80074f0:	893b      	ldrh	r3, [r7, #8]
 80074f2:	0a1b      	lsrs	r3, r3, #8
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074fe:	69fa      	ldr	r2, [r7, #28]
 8007500:	69b9      	ldr	r1, [r7, #24]
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 f8ef 	bl	80076e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e012      	b.n	8007538 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007512:	893b      	ldrh	r3, [r7, #8]
 8007514:	b2da      	uxtb	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	2200      	movs	r2, #0
 8007524:	2180      	movs	r1, #128	@ 0x80
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 f884 	bl	8007634 <I2C_WaitOnFlagUntilTimeout>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e000      	b.n	8007538 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	80002000 	.word	0x80002000

08007544 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af02      	add	r7, sp, #8
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	4608      	mov	r0, r1
 800754e:	4611      	mov	r1, r2
 8007550:	461a      	mov	r2, r3
 8007552:	4603      	mov	r3, r0
 8007554:	817b      	strh	r3, [r7, #10]
 8007556:	460b      	mov	r3, r1
 8007558:	813b      	strh	r3, [r7, #8]
 800755a:	4613      	mov	r3, r2
 800755c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800755e:	88fb      	ldrh	r3, [r7, #6]
 8007560:	b2da      	uxtb	r2, r3
 8007562:	8979      	ldrh	r1, [r7, #10]
 8007564:	4b20      	ldr	r3, [pc, #128]	@ (80075e8 <I2C_RequestMemoryRead+0xa4>)
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	2300      	movs	r3, #0
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 fa26 	bl	80079bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007570:	69fa      	ldr	r2, [r7, #28]
 8007572:	69b9      	ldr	r1, [r7, #24]
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f000 f8b6 	bl	80076e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e02c      	b.n	80075de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007584:	88fb      	ldrh	r3, [r7, #6]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d105      	bne.n	8007596 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800758a:	893b      	ldrh	r3, [r7, #8]
 800758c:	b2da      	uxtb	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	629a      	str	r2, [r3, #40]	@ 0x28
 8007594:	e015      	b.n	80075c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007596:	893b      	ldrh	r3, [r7, #8]
 8007598:	0a1b      	lsrs	r3, r3, #8
 800759a:	b29b      	uxth	r3, r3
 800759c:	b2da      	uxtb	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075a4:	69fa      	ldr	r2, [r7, #28]
 80075a6:	69b9      	ldr	r1, [r7, #24]
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 f89c 	bl	80076e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e012      	b.n	80075de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80075b8:	893b      	ldrh	r3, [r7, #8]
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	2200      	movs	r2, #0
 80075ca:	2140      	movs	r1, #64	@ 0x40
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 f831 	bl	8007634 <I2C_WaitOnFlagUntilTimeout>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e000      	b.n	80075de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	80002000 	.word	0x80002000

080075ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d103      	bne.n	800760a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2200      	movs	r2, #0
 8007608:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b01      	cmp	r3, #1
 8007616:	d007      	beq.n	8007628 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699a      	ldr	r2, [r3, #24]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0201 	orr.w	r2, r2, #1
 8007626:	619a      	str	r2, [r3, #24]
  }
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	603b      	str	r3, [r7, #0]
 8007640:	4613      	mov	r3, r2
 8007642:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007644:	e03b      	b.n	80076be <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007646:	69ba      	ldr	r2, [r7, #24]
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 f8d6 	bl	80077fc <I2C_IsErrorOccurred>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e041      	b.n	80076de <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007660:	d02d      	beq.n	80076be <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007662:	f7fc fe05 	bl	8004270 <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	429a      	cmp	r2, r3
 8007670:	d302      	bcc.n	8007678 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d122      	bne.n	80076be <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	699a      	ldr	r2, [r3, #24]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	4013      	ands	r3, r2
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	429a      	cmp	r2, r3
 8007686:	bf0c      	ite	eq
 8007688:	2301      	moveq	r3, #1
 800768a:	2300      	movne	r3, #0
 800768c:	b2db      	uxtb	r3, r3
 800768e:	461a      	mov	r2, r3
 8007690:	79fb      	ldrb	r3, [r7, #7]
 8007692:	429a      	cmp	r2, r3
 8007694:	d113      	bne.n	80076be <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800769a:	f043 0220 	orr.w	r2, r3, #32
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e00f      	b.n	80076de <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	699a      	ldr	r2, [r3, #24]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4013      	ands	r3, r2
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	bf0c      	ite	eq
 80076ce:	2301      	moveq	r3, #1
 80076d0:	2300      	movne	r3, #0
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	461a      	mov	r2, r3
 80076d6:	79fb      	ldrb	r3, [r7, #7]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d0b4      	beq.n	8007646 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80076f2:	e033      	b.n	800775c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	68b9      	ldr	r1, [r7, #8]
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 f87f 	bl	80077fc <I2C_IsErrorOccurred>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e031      	b.n	800776c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770e:	d025      	beq.n	800775c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007710:	f7fc fdae 	bl	8004270 <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	429a      	cmp	r2, r3
 800771e:	d302      	bcc.n	8007726 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d11a      	bne.n	800775c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	f003 0302 	and.w	r3, r3, #2
 8007730:	2b02      	cmp	r3, #2
 8007732:	d013      	beq.n	800775c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007738:	f043 0220 	orr.w	r2, r3, #32
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2220      	movs	r2, #32
 8007744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e007      	b.n	800776c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	2b02      	cmp	r3, #2
 8007768:	d1c4      	bne.n	80076f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007780:	e02f      	b.n	80077e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	68b9      	ldr	r1, [r7, #8]
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 f838 	bl	80077fc <I2C_IsErrorOccurred>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e02d      	b.n	80077f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007796:	f7fc fd6b 	bl	8004270 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d302      	bcc.n	80077ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d11a      	bne.n	80077e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	f003 0320 	and.w	r3, r3, #32
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d013      	beq.n	80077e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077be:	f043 0220 	orr.w	r2, r3, #32
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2220      	movs	r2, #32
 80077ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e007      	b.n	80077f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	f003 0320 	and.w	r3, r3, #32
 80077ec:	2b20      	cmp	r3, #32
 80077ee:	d1c8      	bne.n	8007782 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08a      	sub	sp, #40	@ 0x28
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007808:	2300      	movs	r3, #0
 800780a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007816:	2300      	movs	r3, #0
 8007818:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	f003 0310 	and.w	r3, r3, #16
 8007824:	2b00      	cmp	r3, #0
 8007826:	d068      	beq.n	80078fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2210      	movs	r2, #16
 800782e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007830:	e049      	b.n	80078c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007838:	d045      	beq.n	80078c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800783a:	f7fc fd19 	bl	8004270 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	429a      	cmp	r2, r3
 8007848:	d302      	bcc.n	8007850 <I2C_IsErrorOccurred+0x54>
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d13a      	bne.n	80078c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800785a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007862:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800786e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007872:	d121      	bne.n	80078b8 <I2C_IsErrorOccurred+0xbc>
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800787a:	d01d      	beq.n	80078b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800787c:	7cfb      	ldrb	r3, [r7, #19]
 800787e:	2b20      	cmp	r3, #32
 8007880:	d01a      	beq.n	80078b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007890:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007892:	f7fc fced 	bl	8004270 <HAL_GetTick>
 8007896:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007898:	e00e      	b.n	80078b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800789a:	f7fc fce9 	bl	8004270 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	2b19      	cmp	r3, #25
 80078a6:	d907      	bls.n	80078b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	f043 0320 	orr.w	r3, r3, #32
 80078ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80078b6:	e006      	b.n	80078c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	f003 0320 	and.w	r3, r3, #32
 80078c2:	2b20      	cmp	r3, #32
 80078c4:	d1e9      	bne.n	800789a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	f003 0320 	and.w	r3, r3, #32
 80078d0:	2b20      	cmp	r3, #32
 80078d2:	d003      	beq.n	80078dc <I2C_IsErrorOccurred+0xe0>
 80078d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d0aa      	beq.n	8007832 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80078dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d103      	bne.n	80078ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2220      	movs	r2, #32
 80078ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	f043 0304 	orr.w	r3, r3, #4
 80078f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00b      	beq.n	8007924 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	f043 0301 	orr.w	r3, r3, #1
 8007912:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800791c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00b      	beq.n	8007946 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	f043 0308 	orr.w	r3, r3, #8
 8007934:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800793e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00b      	beq.n	8007968 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	f043 0302 	orr.w	r3, r3, #2
 8007956:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007960:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007968:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800796c:	2b00      	cmp	r3, #0
 800796e:	d01c      	beq.n	80079aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f7ff fe3b 	bl	80075ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	6859      	ldr	r1, [r3, #4]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	4b0d      	ldr	r3, [pc, #52]	@ (80079b8 <I2C_IsErrorOccurred+0x1bc>)
 8007982:	400b      	ands	r3, r1
 8007984:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	431a      	orrs	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2220      	movs	r2, #32
 8007996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80079aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3728      	adds	r7, #40	@ 0x28
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	fe00e800 	.word	0xfe00e800

080079bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	607b      	str	r3, [r7, #4]
 80079c6:	460b      	mov	r3, r1
 80079c8:	817b      	strh	r3, [r7, #10]
 80079ca:	4613      	mov	r3, r2
 80079cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80079ce:	897b      	ldrh	r3, [r7, #10]
 80079d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80079d4:	7a7b      	ldrb	r3, [r7, #9]
 80079d6:	041b      	lsls	r3, r3, #16
 80079d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80079dc:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079ea:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	6a3b      	ldr	r3, [r7, #32]
 80079f4:	0d5b      	lsrs	r3, r3, #21
 80079f6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80079fa:	4b08      	ldr	r3, [pc, #32]	@ (8007a1c <I2C_TransferConfig+0x60>)
 80079fc:	430b      	orrs	r3, r1
 80079fe:	43db      	mvns	r3, r3
 8007a00:	ea02 0103 	and.w	r1, r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007a0e:	bf00      	nop
 8007a10:	371c      	adds	r7, #28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	03ff63ff 	.word	0x03ff63ff

08007a20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b20      	cmp	r3, #32
 8007a34:	d138      	bne.n	8007aa8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d101      	bne.n	8007a44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007a40:	2302      	movs	r3, #2
 8007a42:	e032      	b.n	8007aaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2224      	movs	r2, #36	@ 0x24
 8007a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f022 0201 	bic.w	r2, r2, #1
 8007a62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007a72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6819      	ldr	r1, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f042 0201 	orr.w	r2, r2, #1
 8007a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2220      	movs	r2, #32
 8007a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	e000      	b.n	8007aaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007aa8:	2302      	movs	r3, #2
  }
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b085      	sub	sp, #20
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	d139      	bne.n	8007b40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d101      	bne.n	8007ada <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	e033      	b.n	8007b42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2224      	movs	r2, #36	@ 0x24
 8007ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f022 0201 	bic.w	r2, r2, #1
 8007af8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007b08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	021b      	lsls	r3, r3, #8
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f042 0201 	orr.w	r2, r2, #1
 8007b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	e000      	b.n	8007b42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007b40:	2302      	movs	r3, #2
  }
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
	...

08007b50 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007b50:	b480      	push	{r7}
 8007b52:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007b54:	4b05      	ldr	r3, [pc, #20]	@ (8007b6c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	4a04      	ldr	r2, [pc, #16]	@ (8007b6c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007b5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b5e:	60d3      	str	r3, [r2, #12]
}
 8007b60:	bf00      	nop
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	58024800 	.word	0x58024800

08007b70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b08c      	sub	sp, #48	@ 0x30
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d102      	bne.n	8007b84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	f000 bc1f 	b.w	80083c2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 80b3 	beq.w	8007cf8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b92:	4b95      	ldr	r3, [pc, #596]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b9c:	4b92      	ldr	r3, [pc, #584]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba4:	2b10      	cmp	r3, #16
 8007ba6:	d007      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x48>
 8007ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007baa:	2b18      	cmp	r3, #24
 8007bac:	d112      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x64>
 8007bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb0:	f003 0303 	and.w	r3, r3, #3
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d10d      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bb8:	4b8b      	ldr	r3, [pc, #556]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 8098 	beq.w	8007cf6 <HAL_RCC_OscConfig+0x186>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f040 8093 	bne.w	8007cf6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e3f6      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bdc:	d106      	bne.n	8007bec <HAL_RCC_OscConfig+0x7c>
 8007bde:	4b82      	ldr	r3, [pc, #520]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a81      	ldr	r2, [pc, #516]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	e058      	b.n	8007c9e <HAL_RCC_OscConfig+0x12e>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d112      	bne.n	8007c1a <HAL_RCC_OscConfig+0xaa>
 8007bf4:	4b7c      	ldr	r3, [pc, #496]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a7b      	ldr	r2, [pc, #492]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	4b79      	ldr	r3, [pc, #484]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a78      	ldr	r2, [pc, #480]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c06:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007c0a:	6013      	str	r3, [r2, #0]
 8007c0c:	4b76      	ldr	r3, [pc, #472]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a75      	ldr	r2, [pc, #468]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c16:	6013      	str	r3, [r2, #0]
 8007c18:	e041      	b.n	8007c9e <HAL_RCC_OscConfig+0x12e>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c22:	d112      	bne.n	8007c4a <HAL_RCC_OscConfig+0xda>
 8007c24:	4b70      	ldr	r3, [pc, #448]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a6f      	ldr	r2, [pc, #444]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c2e:	6013      	str	r3, [r2, #0]
 8007c30:	4b6d      	ldr	r3, [pc, #436]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a6c      	ldr	r2, [pc, #432]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c36:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007c3a:	6013      	str	r3, [r2, #0]
 8007c3c:	4b6a      	ldr	r3, [pc, #424]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a69      	ldr	r2, [pc, #420]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c46:	6013      	str	r3, [r2, #0]
 8007c48:	e029      	b.n	8007c9e <HAL_RCC_OscConfig+0x12e>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8007c52:	d112      	bne.n	8007c7a <HAL_RCC_OscConfig+0x10a>
 8007c54:	4b64      	ldr	r3, [pc, #400]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a63      	ldr	r2, [pc, #396]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c5e:	6013      	str	r3, [r2, #0]
 8007c60:	4b61      	ldr	r3, [pc, #388]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a60      	ldr	r2, [pc, #384]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	4b5e      	ldr	r3, [pc, #376]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a5d      	ldr	r2, [pc, #372]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c76:	6013      	str	r3, [r2, #0]
 8007c78:	e011      	b.n	8007c9e <HAL_RCC_OscConfig+0x12e>
 8007c7a:	4b5b      	ldr	r3, [pc, #364]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a5a      	ldr	r2, [pc, #360]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c84:	6013      	str	r3, [r2, #0]
 8007c86:	4b58      	ldr	r3, [pc, #352]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a57      	ldr	r2, [pc, #348]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c90:	6013      	str	r3, [r2, #0]
 8007c92:	4b55      	ldr	r3, [pc, #340]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a54      	ldr	r2, [pc, #336]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007c98:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007c9c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d013      	beq.n	8007cce <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca6:	f7fc fae3 	bl	8004270 <HAL_GetTick>
 8007caa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007cac:	e008      	b.n	8007cc0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cae:	f7fc fadf 	bl	8004270 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	2b64      	cmp	r3, #100	@ 0x64
 8007cba:	d901      	bls.n	8007cc0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e380      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007cc0:	4b49      	ldr	r3, [pc, #292]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d0f0      	beq.n	8007cae <HAL_RCC_OscConfig+0x13e>
 8007ccc:	e014      	b.n	8007cf8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cce:	f7fc facf 	bl	8004270 <HAL_GetTick>
 8007cd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007cd4:	e008      	b.n	8007ce8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cd6:	f7fc facb 	bl	8004270 <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	2b64      	cmp	r3, #100	@ 0x64
 8007ce2:	d901      	bls.n	8007ce8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e36c      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ce8:	4b3f      	ldr	r3, [pc, #252]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1f0      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x166>
 8007cf4:	e000      	b.n	8007cf8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cf6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 808c 	beq.w	8007e1e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d06:	4b38      	ldr	r3, [pc, #224]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d0e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d10:	4b35      	ldr	r3, [pc, #212]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d14:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d007      	beq.n	8007d2c <HAL_RCC_OscConfig+0x1bc>
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	2b18      	cmp	r3, #24
 8007d20:	d137      	bne.n	8007d92 <HAL_RCC_OscConfig+0x222>
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	f003 0303 	and.w	r3, r3, #3
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d132      	bne.n	8007d92 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0304 	and.w	r3, r3, #4
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d005      	beq.n	8007d44 <HAL_RCC_OscConfig+0x1d4>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e33e      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007d44:	4b28      	ldr	r3, [pc, #160]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f023 0219 	bic.w	r2, r3, #25
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	4925      	ldr	r1, [pc, #148]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d56:	f7fc fa8b 	bl	8004270 <HAL_GetTick>
 8007d5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d5c:	e008      	b.n	8007d70 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d5e:	f7fc fa87 	bl	8004270 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d901      	bls.n	8007d70 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e328      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d70:	4b1d      	ldr	r3, [pc, #116]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d0f0      	beq.n	8007d5e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	061b      	lsls	r3, r3, #24
 8007d8a:	4917      	ldr	r1, [pc, #92]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d90:	e045      	b.n	8007e1e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d028      	beq.n	8007dec <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007d9a:	4b13      	ldr	r3, [pc, #76]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f023 0219 	bic.w	r2, r3, #25
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	4910      	ldr	r1, [pc, #64]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007da8:	4313      	orrs	r3, r2
 8007daa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dac:	f7fc fa60 	bl	8004270 <HAL_GetTick>
 8007db0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007db2:	e008      	b.n	8007dc6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007db4:	f7fc fa5c 	bl	8004270 <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d901      	bls.n	8007dc6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e2fd      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dc6:	4b08      	ldr	r3, [pc, #32]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0304 	and.w	r3, r3, #4
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d0f0      	beq.n	8007db4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dd2:	4b05      	ldr	r3, [pc, #20]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	061b      	lsls	r3, r3, #24
 8007de0:	4901      	ldr	r1, [pc, #4]	@ (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	604b      	str	r3, [r1, #4]
 8007de6:	e01a      	b.n	8007e1e <HAL_RCC_OscConfig+0x2ae>
 8007de8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007dec:	4b97      	ldr	r3, [pc, #604]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a96      	ldr	r2, [pc, #600]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007df2:	f023 0301 	bic.w	r3, r3, #1
 8007df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007df8:	f7fc fa3a 	bl	8004270 <HAL_GetTick>
 8007dfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007dfe:	e008      	b.n	8007e12 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e00:	f7fc fa36 	bl	8004270 <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d901      	bls.n	8007e12 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e2d7      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e12:	4b8e      	ldr	r3, [pc, #568]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0304 	and.w	r3, r3, #4
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1f0      	bne.n	8007e00 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0310 	and.w	r3, r3, #16
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d06a      	beq.n	8007f00 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e2a:	4b88      	ldr	r3, [pc, #544]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e32:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e34:	4b85      	ldr	r3, [pc, #532]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e38:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	2b08      	cmp	r3, #8
 8007e3e:	d007      	beq.n	8007e50 <HAL_RCC_OscConfig+0x2e0>
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	2b18      	cmp	r3, #24
 8007e44:	d11b      	bne.n	8007e7e <HAL_RCC_OscConfig+0x30e>
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f003 0303 	and.w	r3, r3, #3
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d116      	bne.n	8007e7e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e50:	4b7e      	ldr	r3, [pc, #504]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d005      	beq.n	8007e68 <HAL_RCC_OscConfig+0x2f8>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	2b80      	cmp	r3, #128	@ 0x80
 8007e62:	d001      	beq.n	8007e68 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e2ac      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e68:	4b78      	ldr	r3, [pc, #480]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a1b      	ldr	r3, [r3, #32]
 8007e74:	061b      	lsls	r3, r3, #24
 8007e76:	4975      	ldr	r1, [pc, #468]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e7c:	e040      	b.n	8007f00 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	69db      	ldr	r3, [r3, #28]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d023      	beq.n	8007ece <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007e86:	4b71      	ldr	r3, [pc, #452]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a70      	ldr	r2, [pc, #448]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e92:	f7fc f9ed 	bl	8004270 <HAL_GetTick>
 8007e96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e98:	e008      	b.n	8007eac <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007e9a:	f7fc f9e9 	bl	8004270 <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d901      	bls.n	8007eac <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e28a      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007eac:	4b67      	ldr	r3, [pc, #412]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0f0      	beq.n	8007e9a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007eb8:	4b64      	ldr	r3, [pc, #400]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a1b      	ldr	r3, [r3, #32]
 8007ec4:	061b      	lsls	r3, r3, #24
 8007ec6:	4961      	ldr	r1, [pc, #388]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	60cb      	str	r3, [r1, #12]
 8007ecc:	e018      	b.n	8007f00 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007ece:	4b5f      	ldr	r3, [pc, #380]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a5e      	ldr	r2, [pc, #376]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007ed4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eda:	f7fc f9c9 	bl	8004270 <HAL_GetTick>
 8007ede:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ee0:	e008      	b.n	8007ef4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007ee2:	f7fc f9c5 	bl	8004270 <HAL_GetTick>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d901      	bls.n	8007ef4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e266      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ef4:	4b55      	ldr	r3, [pc, #340]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1f0      	bne.n	8007ee2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0308 	and.w	r3, r3, #8
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d036      	beq.n	8007f7a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d019      	beq.n	8007f48 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f14:	4b4d      	ldr	r3, [pc, #308]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007f16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f18:	4a4c      	ldr	r2, [pc, #304]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007f1a:	f043 0301 	orr.w	r3, r3, #1
 8007f1e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f20:	f7fc f9a6 	bl	8004270 <HAL_GetTick>
 8007f24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f26:	e008      	b.n	8007f3a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f28:	f7fc f9a2 	bl	8004270 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d901      	bls.n	8007f3a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e243      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f3a:	4b44      	ldr	r3, [pc, #272]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0f0      	beq.n	8007f28 <HAL_RCC_OscConfig+0x3b8>
 8007f46:	e018      	b.n	8007f7a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f48:	4b40      	ldr	r3, [pc, #256]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f4c:	4a3f      	ldr	r2, [pc, #252]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007f4e:	f023 0301 	bic.w	r3, r3, #1
 8007f52:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f54:	f7fc f98c 	bl	8004270 <HAL_GetTick>
 8007f58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f5a:	e008      	b.n	8007f6e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f5c:	f7fc f988 	bl	8004270 <HAL_GetTick>
 8007f60:	4602      	mov	r2, r0
 8007f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d901      	bls.n	8007f6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e229      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f6e:	4b37      	ldr	r3, [pc, #220]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1f0      	bne.n	8007f5c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0320 	and.w	r3, r3, #32
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d036      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d019      	beq.n	8007fc2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f8e:	4b2f      	ldr	r3, [pc, #188]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a2e      	ldr	r2, [pc, #184]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007f94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007f98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f9a:	f7fc f969 	bl	8004270 <HAL_GetTick>
 8007f9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fa0:	e008      	b.n	8007fb4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fa2:	f7fc f965 	bl	8004270 <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d901      	bls.n	8007fb4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e206      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fb4:	4b25      	ldr	r3, [pc, #148]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d0f0      	beq.n	8007fa2 <HAL_RCC_OscConfig+0x432>
 8007fc0:	e018      	b.n	8007ff4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007fc2:	4b22      	ldr	r3, [pc, #136]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a21      	ldr	r2, [pc, #132]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007fc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fcc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007fce:	f7fc f94f 	bl	8004270 <HAL_GetTick>
 8007fd2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fd4:	e008      	b.n	8007fe8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fd6:	f7fc f94b 	bl	8004270 <HAL_GetTick>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d901      	bls.n	8007fe8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e1ec      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fe8:	4b18      	ldr	r3, [pc, #96]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1f0      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0304 	and.w	r3, r3, #4
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 80af 	beq.w	8008160 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008002:	4b13      	ldr	r3, [pc, #76]	@ (8008050 <HAL_RCC_OscConfig+0x4e0>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a12      	ldr	r2, [pc, #72]	@ (8008050 <HAL_RCC_OscConfig+0x4e0>)
 8008008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800800c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800800e:	f7fc f92f 	bl	8004270 <HAL_GetTick>
 8008012:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008014:	e008      	b.n	8008028 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008016:	f7fc f92b 	bl	8004270 <HAL_GetTick>
 800801a:	4602      	mov	r2, r0
 800801c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	2b64      	cmp	r3, #100	@ 0x64
 8008022:	d901      	bls.n	8008028 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e1cc      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008028:	4b09      	ldr	r3, [pc, #36]	@ (8008050 <HAL_RCC_OscConfig+0x4e0>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008030:	2b00      	cmp	r3, #0
 8008032:	d0f0      	beq.n	8008016 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d10b      	bne.n	8008054 <HAL_RCC_OscConfig+0x4e4>
 800803c:	4b03      	ldr	r3, [pc, #12]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 800803e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008040:	4a02      	ldr	r2, [pc, #8]	@ (800804c <HAL_RCC_OscConfig+0x4dc>)
 8008042:	f043 0301 	orr.w	r3, r3, #1
 8008046:	6713      	str	r3, [r2, #112]	@ 0x70
 8008048:	e05b      	b.n	8008102 <HAL_RCC_OscConfig+0x592>
 800804a:	bf00      	nop
 800804c:	58024400 	.word	0x58024400
 8008050:	58024800 	.word	0x58024800
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d112      	bne.n	8008082 <HAL_RCC_OscConfig+0x512>
 800805c:	4b9d      	ldr	r3, [pc, #628]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 800805e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008060:	4a9c      	ldr	r2, [pc, #624]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 8008062:	f023 0301 	bic.w	r3, r3, #1
 8008066:	6713      	str	r3, [r2, #112]	@ 0x70
 8008068:	4b9a      	ldr	r3, [pc, #616]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 800806a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800806c:	4a99      	ldr	r2, [pc, #612]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 800806e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008072:	6713      	str	r3, [r2, #112]	@ 0x70
 8008074:	4b97      	ldr	r3, [pc, #604]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 8008076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008078:	4a96      	ldr	r2, [pc, #600]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 800807a:	f023 0304 	bic.w	r3, r3, #4
 800807e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008080:	e03f      	b.n	8008102 <HAL_RCC_OscConfig+0x592>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	2b05      	cmp	r3, #5
 8008088:	d112      	bne.n	80080b0 <HAL_RCC_OscConfig+0x540>
 800808a:	4b92      	ldr	r3, [pc, #584]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 800808c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800808e:	4a91      	ldr	r2, [pc, #580]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 8008090:	f043 0304 	orr.w	r3, r3, #4
 8008094:	6713      	str	r3, [r2, #112]	@ 0x70
 8008096:	4b8f      	ldr	r3, [pc, #572]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 8008098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800809a:	4a8e      	ldr	r2, [pc, #568]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 800809c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80080a2:	4b8c      	ldr	r3, [pc, #560]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80080a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080a6:	4a8b      	ldr	r2, [pc, #556]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80080a8:	f043 0301 	orr.w	r3, r3, #1
 80080ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80080ae:	e028      	b.n	8008102 <HAL_RCC_OscConfig+0x592>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	2b85      	cmp	r3, #133	@ 0x85
 80080b6:	d112      	bne.n	80080de <HAL_RCC_OscConfig+0x56e>
 80080b8:	4b86      	ldr	r3, [pc, #536]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80080ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080bc:	4a85      	ldr	r2, [pc, #532]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80080be:	f043 0304 	orr.w	r3, r3, #4
 80080c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80080c4:	4b83      	ldr	r3, [pc, #524]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80080c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080c8:	4a82      	ldr	r2, [pc, #520]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80080ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80080d0:	4b80      	ldr	r3, [pc, #512]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80080d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080d4:	4a7f      	ldr	r2, [pc, #508]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80080d6:	f043 0301 	orr.w	r3, r3, #1
 80080da:	6713      	str	r3, [r2, #112]	@ 0x70
 80080dc:	e011      	b.n	8008102 <HAL_RCC_OscConfig+0x592>
 80080de:	4b7d      	ldr	r3, [pc, #500]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80080e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080e2:	4a7c      	ldr	r2, [pc, #496]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80080e4:	f023 0301 	bic.w	r3, r3, #1
 80080e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80080ea:	4b7a      	ldr	r3, [pc, #488]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80080ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ee:	4a79      	ldr	r2, [pc, #484]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80080f0:	f023 0304 	bic.w	r3, r3, #4
 80080f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80080f6:	4b77      	ldr	r3, [pc, #476]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80080f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080fa:	4a76      	ldr	r2, [pc, #472]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80080fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008100:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d015      	beq.n	8008136 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800810a:	f7fc f8b1 	bl	8004270 <HAL_GetTick>
 800810e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008110:	e00a      	b.n	8008128 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008112:	f7fc f8ad 	bl	8004270 <HAL_GetTick>
 8008116:	4602      	mov	r2, r0
 8008118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008120:	4293      	cmp	r3, r2
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e14c      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008128:	4b6a      	ldr	r3, [pc, #424]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 800812a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800812c:	f003 0302 	and.w	r3, r3, #2
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0ee      	beq.n	8008112 <HAL_RCC_OscConfig+0x5a2>
 8008134:	e014      	b.n	8008160 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008136:	f7fc f89b 	bl	8004270 <HAL_GetTick>
 800813a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800813c:	e00a      	b.n	8008154 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800813e:	f7fc f897 	bl	8004270 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800814c:	4293      	cmp	r3, r2
 800814e:	d901      	bls.n	8008154 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8008150:	2303      	movs	r3, #3
 8008152:	e136      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008154:	4b5f      	ldr	r3, [pc, #380]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 8008156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1ee      	bne.n	800813e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 812b 	beq.w	80083c0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800816a:	4b5a      	ldr	r3, [pc, #360]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008172:	2b18      	cmp	r3, #24
 8008174:	f000 80bb 	beq.w	80082ee <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800817c:	2b02      	cmp	r3, #2
 800817e:	f040 8095 	bne.w	80082ac <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008182:	4b54      	ldr	r3, [pc, #336]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a53      	ldr	r2, [pc, #332]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 8008188:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800818c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800818e:	f7fc f86f 	bl	8004270 <HAL_GetTick>
 8008192:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008194:	e008      	b.n	80081a8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008196:	f7fc f86b 	bl	8004270 <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d901      	bls.n	80081a8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e10c      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081a8:	4b4a      	ldr	r3, [pc, #296]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1f0      	bne.n	8008196 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081b4:	4b47      	ldr	r3, [pc, #284]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80081b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80081b8:	4b47      	ldr	r3, [pc, #284]	@ (80082d8 <HAL_RCC_OscConfig+0x768>)
 80081ba:	4013      	ands	r3, r2
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80081c4:	0112      	lsls	r2, r2, #4
 80081c6:	430a      	orrs	r2, r1
 80081c8:	4942      	ldr	r1, [pc, #264]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	628b      	str	r3, [r1, #40]	@ 0x28
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081d2:	3b01      	subs	r3, #1
 80081d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081dc:	3b01      	subs	r3, #1
 80081de:	025b      	lsls	r3, r3, #9
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	431a      	orrs	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e8:	3b01      	subs	r3, #1
 80081ea:	041b      	lsls	r3, r3, #16
 80081ec:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80081f0:	431a      	orrs	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f6:	3b01      	subs	r3, #1
 80081f8:	061b      	lsls	r3, r3, #24
 80081fa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80081fe:	4935      	ldr	r1, [pc, #212]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 8008200:	4313      	orrs	r3, r2
 8008202:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008204:	4b33      	ldr	r3, [pc, #204]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 8008206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008208:	4a32      	ldr	r2, [pc, #200]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 800820a:	f023 0301 	bic.w	r3, r3, #1
 800820e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008210:	4b30      	ldr	r3, [pc, #192]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 8008212:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008214:	4b31      	ldr	r3, [pc, #196]	@ (80082dc <HAL_RCC_OscConfig+0x76c>)
 8008216:	4013      	ands	r3, r2
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800821c:	00d2      	lsls	r2, r2, #3
 800821e:	492d      	ldr	r1, [pc, #180]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 8008220:	4313      	orrs	r3, r2
 8008222:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008224:	4b2b      	ldr	r3, [pc, #172]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 8008226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008228:	f023 020c 	bic.w	r2, r3, #12
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008230:	4928      	ldr	r1, [pc, #160]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 8008232:	4313      	orrs	r3, r2
 8008234:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008236:	4b27      	ldr	r3, [pc, #156]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 8008238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823a:	f023 0202 	bic.w	r2, r3, #2
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008242:	4924      	ldr	r1, [pc, #144]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 8008244:	4313      	orrs	r3, r2
 8008246:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008248:	4b22      	ldr	r3, [pc, #136]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 800824a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824c:	4a21      	ldr	r2, [pc, #132]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 800824e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008252:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008254:	4b1f      	ldr	r3, [pc, #124]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 8008256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008258:	4a1e      	ldr	r2, [pc, #120]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 800825a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800825e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008260:	4b1c      	ldr	r3, [pc, #112]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 8008262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008264:	4a1b      	ldr	r2, [pc, #108]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 8008266:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800826a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800826c:	4b19      	ldr	r3, [pc, #100]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 800826e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008270:	4a18      	ldr	r2, [pc, #96]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 8008272:	f043 0301 	orr.w	r3, r3, #1
 8008276:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008278:	4b16      	ldr	r3, [pc, #88]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a15      	ldr	r2, [pc, #84]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 800827e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008284:	f7fb fff4 	bl	8004270 <HAL_GetTick>
 8008288:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800828a:	e008      	b.n	800829e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800828c:	f7fb fff0 	bl	8004270 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b02      	cmp	r3, #2
 8008298:	d901      	bls.n	800829e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e091      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800829e:	4b0d      	ldr	r3, [pc, #52]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0f0      	beq.n	800828c <HAL_RCC_OscConfig+0x71c>
 80082aa:	e089      	b.n	80083c0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082ac:	4b09      	ldr	r3, [pc, #36]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a08      	ldr	r2, [pc, #32]	@ (80082d4 <HAL_RCC_OscConfig+0x764>)
 80082b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b8:	f7fb ffda 	bl	8004270 <HAL_GetTick>
 80082bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082be:	e00f      	b.n	80082e0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082c0:	f7fb ffd6 	bl	8004270 <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d908      	bls.n	80082e0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e077      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
 80082d2:	bf00      	nop
 80082d4:	58024400 	.word	0x58024400
 80082d8:	fffffc0c 	.word	0xfffffc0c
 80082dc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082e0:	4b3a      	ldr	r3, [pc, #232]	@ (80083cc <HAL_RCC_OscConfig+0x85c>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1e9      	bne.n	80082c0 <HAL_RCC_OscConfig+0x750>
 80082ec:	e068      	b.n	80083c0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80082ee:	4b37      	ldr	r3, [pc, #220]	@ (80083cc <HAL_RCC_OscConfig+0x85c>)
 80082f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80082f4:	4b35      	ldr	r3, [pc, #212]	@ (80083cc <HAL_RCC_OscConfig+0x85c>)
 80082f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082f8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d031      	beq.n	8008366 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f003 0203 	and.w	r2, r3, #3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800830c:	429a      	cmp	r2, r3
 800830e:	d12a      	bne.n	8008366 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	091b      	lsrs	r3, r3, #4
 8008314:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800831c:	429a      	cmp	r2, r3
 800831e:	d122      	bne.n	8008366 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800832a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800832c:	429a      	cmp	r2, r3
 800832e:	d11a      	bne.n	8008366 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	0a5b      	lsrs	r3, r3, #9
 8008334:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800833c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800833e:	429a      	cmp	r2, r3
 8008340:	d111      	bne.n	8008366 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	0c1b      	lsrs	r3, r3, #16
 8008346:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800834e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008350:	429a      	cmp	r2, r3
 8008352:	d108      	bne.n	8008366 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	0e1b      	lsrs	r3, r3, #24
 8008358:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008360:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008362:	429a      	cmp	r2, r3
 8008364:	d001      	beq.n	800836a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e02b      	b.n	80083c2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800836a:	4b18      	ldr	r3, [pc, #96]	@ (80083cc <HAL_RCC_OscConfig+0x85c>)
 800836c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800836e:	08db      	lsrs	r3, r3, #3
 8008370:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008374:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	429a      	cmp	r2, r3
 800837e:	d01f      	beq.n	80083c0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008380:	4b12      	ldr	r3, [pc, #72]	@ (80083cc <HAL_RCC_OscConfig+0x85c>)
 8008382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008384:	4a11      	ldr	r2, [pc, #68]	@ (80083cc <HAL_RCC_OscConfig+0x85c>)
 8008386:	f023 0301 	bic.w	r3, r3, #1
 800838a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800838c:	f7fb ff70 	bl	8004270 <HAL_GetTick>
 8008390:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008392:	bf00      	nop
 8008394:	f7fb ff6c 	bl	8004270 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839c:	4293      	cmp	r3, r2
 800839e:	d0f9      	beq.n	8008394 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80083a0:	4b0a      	ldr	r3, [pc, #40]	@ (80083cc <HAL_RCC_OscConfig+0x85c>)
 80083a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083a4:	4b0a      	ldr	r3, [pc, #40]	@ (80083d0 <HAL_RCC_OscConfig+0x860>)
 80083a6:	4013      	ands	r3, r2
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80083ac:	00d2      	lsls	r2, r2, #3
 80083ae:	4907      	ldr	r1, [pc, #28]	@ (80083cc <HAL_RCC_OscConfig+0x85c>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80083b4:	4b05      	ldr	r3, [pc, #20]	@ (80083cc <HAL_RCC_OscConfig+0x85c>)
 80083b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b8:	4a04      	ldr	r2, [pc, #16]	@ (80083cc <HAL_RCC_OscConfig+0x85c>)
 80083ba:	f043 0301 	orr.w	r3, r3, #1
 80083be:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3730      	adds	r7, #48	@ 0x30
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	58024400 	.word	0x58024400
 80083d0:	ffff0007 	.word	0xffff0007

080083d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d101      	bne.n	80083e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e19c      	b.n	8008722 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80083e8:	4b8a      	ldr	r3, [pc, #552]	@ (8008614 <HAL_RCC_ClockConfig+0x240>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 030f 	and.w	r3, r3, #15
 80083f0:	683a      	ldr	r2, [r7, #0]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d910      	bls.n	8008418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083f6:	4b87      	ldr	r3, [pc, #540]	@ (8008614 <HAL_RCC_ClockConfig+0x240>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f023 020f 	bic.w	r2, r3, #15
 80083fe:	4985      	ldr	r1, [pc, #532]	@ (8008614 <HAL_RCC_ClockConfig+0x240>)
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	4313      	orrs	r3, r2
 8008404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008406:	4b83      	ldr	r3, [pc, #524]	@ (8008614 <HAL_RCC_ClockConfig+0x240>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 030f 	and.w	r3, r3, #15
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	429a      	cmp	r2, r3
 8008412:	d001      	beq.n	8008418 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e184      	b.n	8008722 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0304 	and.w	r3, r3, #4
 8008420:	2b00      	cmp	r3, #0
 8008422:	d010      	beq.n	8008446 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	691a      	ldr	r2, [r3, #16]
 8008428:	4b7b      	ldr	r3, [pc, #492]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008430:	429a      	cmp	r2, r3
 8008432:	d908      	bls.n	8008446 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008434:	4b78      	ldr	r3, [pc, #480]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	4975      	ldr	r1, [pc, #468]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 8008442:	4313      	orrs	r3, r2
 8008444:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0308 	and.w	r3, r3, #8
 800844e:	2b00      	cmp	r3, #0
 8008450:	d010      	beq.n	8008474 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	695a      	ldr	r2, [r3, #20]
 8008456:	4b70      	ldr	r3, [pc, #448]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800845e:	429a      	cmp	r2, r3
 8008460:	d908      	bls.n	8008474 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008462:	4b6d      	ldr	r3, [pc, #436]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	496a      	ldr	r1, [pc, #424]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 8008470:	4313      	orrs	r3, r2
 8008472:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0310 	and.w	r3, r3, #16
 800847c:	2b00      	cmp	r3, #0
 800847e:	d010      	beq.n	80084a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	699a      	ldr	r2, [r3, #24]
 8008484:	4b64      	ldr	r3, [pc, #400]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 8008486:	69db      	ldr	r3, [r3, #28]
 8008488:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800848c:	429a      	cmp	r2, r3
 800848e:	d908      	bls.n	80084a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008490:	4b61      	ldr	r3, [pc, #388]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	495e      	ldr	r1, [pc, #376]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0320 	and.w	r3, r3, #32
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d010      	beq.n	80084d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	69da      	ldr	r2, [r3, #28]
 80084b2:	4b59      	ldr	r3, [pc, #356]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d908      	bls.n	80084d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80084be:	4b56      	ldr	r3, [pc, #344]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	4953      	ldr	r1, [pc, #332]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 80084cc:	4313      	orrs	r3, r2
 80084ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0302 	and.w	r3, r3, #2
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d010      	beq.n	80084fe <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68da      	ldr	r2, [r3, #12]
 80084e0:	4b4d      	ldr	r3, [pc, #308]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	f003 030f 	and.w	r3, r3, #15
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d908      	bls.n	80084fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084ec:	4b4a      	ldr	r3, [pc, #296]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	f023 020f 	bic.w	r2, r3, #15
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	4947      	ldr	r1, [pc, #284]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	2b00      	cmp	r3, #0
 8008508:	d055      	beq.n	80085b6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800850a:	4b43      	ldr	r3, [pc, #268]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	4940      	ldr	r1, [pc, #256]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 8008518:	4313      	orrs	r3, r2
 800851a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	2b02      	cmp	r3, #2
 8008522:	d107      	bne.n	8008534 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008524:	4b3c      	ldr	r3, [pc, #240]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d121      	bne.n	8008574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e0f6      	b.n	8008722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	2b03      	cmp	r3, #3
 800853a:	d107      	bne.n	800854c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800853c:	4b36      	ldr	r3, [pc, #216]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d115      	bne.n	8008574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e0ea      	b.n	8008722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d107      	bne.n	8008564 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008554:	4b30      	ldr	r3, [pc, #192]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800855c:	2b00      	cmp	r3, #0
 800855e:	d109      	bne.n	8008574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e0de      	b.n	8008722 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008564:	4b2c      	ldr	r3, [pc, #176]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0304 	and.w	r3, r3, #4
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e0d6      	b.n	8008722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008574:	4b28      	ldr	r3, [pc, #160]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	f023 0207 	bic.w	r2, r3, #7
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	4925      	ldr	r1, [pc, #148]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 8008582:	4313      	orrs	r3, r2
 8008584:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008586:	f7fb fe73 	bl	8004270 <HAL_GetTick>
 800858a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800858c:	e00a      	b.n	80085a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800858e:	f7fb fe6f 	bl	8004270 <HAL_GetTick>
 8008592:	4602      	mov	r2, r0
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800859c:	4293      	cmp	r3, r2
 800859e:	d901      	bls.n	80085a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e0be      	b.n	8008722 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085a4:	4b1c      	ldr	r3, [pc, #112]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	00db      	lsls	r3, r3, #3
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d1eb      	bne.n	800858e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0302 	and.w	r3, r3, #2
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d010      	beq.n	80085e4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	68da      	ldr	r2, [r3, #12]
 80085c6:	4b14      	ldr	r3, [pc, #80]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	f003 030f 	and.w	r3, r3, #15
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d208      	bcs.n	80085e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085d2:	4b11      	ldr	r3, [pc, #68]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	f023 020f 	bic.w	r2, r3, #15
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	490e      	ldr	r1, [pc, #56]	@ (8008618 <HAL_RCC_ClockConfig+0x244>)
 80085e0:	4313      	orrs	r3, r2
 80085e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80085e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008614 <HAL_RCC_ClockConfig+0x240>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 030f 	and.w	r3, r3, #15
 80085ec:	683a      	ldr	r2, [r7, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d214      	bcs.n	800861c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085f2:	4b08      	ldr	r3, [pc, #32]	@ (8008614 <HAL_RCC_ClockConfig+0x240>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f023 020f 	bic.w	r2, r3, #15
 80085fa:	4906      	ldr	r1, [pc, #24]	@ (8008614 <HAL_RCC_ClockConfig+0x240>)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	4313      	orrs	r3, r2
 8008600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008602:	4b04      	ldr	r3, [pc, #16]	@ (8008614 <HAL_RCC_ClockConfig+0x240>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 030f 	and.w	r3, r3, #15
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	429a      	cmp	r2, r3
 800860e:	d005      	beq.n	800861c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e086      	b.n	8008722 <HAL_RCC_ClockConfig+0x34e>
 8008614:	52002000 	.word	0x52002000
 8008618:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0304 	and.w	r3, r3, #4
 8008624:	2b00      	cmp	r3, #0
 8008626:	d010      	beq.n	800864a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	691a      	ldr	r2, [r3, #16]
 800862c:	4b3f      	ldr	r3, [pc, #252]	@ (800872c <HAL_RCC_ClockConfig+0x358>)
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008634:	429a      	cmp	r2, r3
 8008636:	d208      	bcs.n	800864a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008638:	4b3c      	ldr	r3, [pc, #240]	@ (800872c <HAL_RCC_ClockConfig+0x358>)
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	4939      	ldr	r1, [pc, #228]	@ (800872c <HAL_RCC_ClockConfig+0x358>)
 8008646:	4313      	orrs	r3, r2
 8008648:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0308 	and.w	r3, r3, #8
 8008652:	2b00      	cmp	r3, #0
 8008654:	d010      	beq.n	8008678 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	695a      	ldr	r2, [r3, #20]
 800865a:	4b34      	ldr	r3, [pc, #208]	@ (800872c <HAL_RCC_ClockConfig+0x358>)
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008662:	429a      	cmp	r2, r3
 8008664:	d208      	bcs.n	8008678 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008666:	4b31      	ldr	r3, [pc, #196]	@ (800872c <HAL_RCC_ClockConfig+0x358>)
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	492e      	ldr	r1, [pc, #184]	@ (800872c <HAL_RCC_ClockConfig+0x358>)
 8008674:	4313      	orrs	r3, r2
 8008676:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0310 	and.w	r3, r3, #16
 8008680:	2b00      	cmp	r3, #0
 8008682:	d010      	beq.n	80086a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	699a      	ldr	r2, [r3, #24]
 8008688:	4b28      	ldr	r3, [pc, #160]	@ (800872c <HAL_RCC_ClockConfig+0x358>)
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008690:	429a      	cmp	r2, r3
 8008692:	d208      	bcs.n	80086a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008694:	4b25      	ldr	r3, [pc, #148]	@ (800872c <HAL_RCC_ClockConfig+0x358>)
 8008696:	69db      	ldr	r3, [r3, #28]
 8008698:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	4922      	ldr	r1, [pc, #136]	@ (800872c <HAL_RCC_ClockConfig+0x358>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0320 	and.w	r3, r3, #32
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d010      	beq.n	80086d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	69da      	ldr	r2, [r3, #28]
 80086b6:	4b1d      	ldr	r3, [pc, #116]	@ (800872c <HAL_RCC_ClockConfig+0x358>)
 80086b8:	6a1b      	ldr	r3, [r3, #32]
 80086ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80086be:	429a      	cmp	r2, r3
 80086c0:	d208      	bcs.n	80086d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80086c2:	4b1a      	ldr	r3, [pc, #104]	@ (800872c <HAL_RCC_ClockConfig+0x358>)
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	4917      	ldr	r1, [pc, #92]	@ (800872c <HAL_RCC_ClockConfig+0x358>)
 80086d0:	4313      	orrs	r3, r2
 80086d2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80086d4:	f000 f834 	bl	8008740 <HAL_RCC_GetSysClockFreq>
 80086d8:	4602      	mov	r2, r0
 80086da:	4b14      	ldr	r3, [pc, #80]	@ (800872c <HAL_RCC_ClockConfig+0x358>)
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	0a1b      	lsrs	r3, r3, #8
 80086e0:	f003 030f 	and.w	r3, r3, #15
 80086e4:	4912      	ldr	r1, [pc, #72]	@ (8008730 <HAL_RCC_ClockConfig+0x35c>)
 80086e6:	5ccb      	ldrb	r3, [r1, r3]
 80086e8:	f003 031f 	and.w	r3, r3, #31
 80086ec:	fa22 f303 	lsr.w	r3, r2, r3
 80086f0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80086f2:	4b0e      	ldr	r3, [pc, #56]	@ (800872c <HAL_RCC_ClockConfig+0x358>)
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	f003 030f 	and.w	r3, r3, #15
 80086fa:	4a0d      	ldr	r2, [pc, #52]	@ (8008730 <HAL_RCC_ClockConfig+0x35c>)
 80086fc:	5cd3      	ldrb	r3, [r2, r3]
 80086fe:	f003 031f 	and.w	r3, r3, #31
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	fa22 f303 	lsr.w	r3, r2, r3
 8008708:	4a0a      	ldr	r2, [pc, #40]	@ (8008734 <HAL_RCC_ClockConfig+0x360>)
 800870a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800870c:	4a0a      	ldr	r2, [pc, #40]	@ (8008738 <HAL_RCC_ClockConfig+0x364>)
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008712:	4b0a      	ldr	r3, [pc, #40]	@ (800873c <HAL_RCC_ClockConfig+0x368>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4618      	mov	r0, r3
 8008718:	f7fb fd60 	bl	80041dc <HAL_InitTick>
 800871c:	4603      	mov	r3, r0
 800871e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008720:	7bfb      	ldrb	r3, [r7, #15]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3718      	adds	r7, #24
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	58024400 	.word	0x58024400
 8008730:	0801159c 	.word	0x0801159c
 8008734:	24000040 	.word	0x24000040
 8008738:	2400003c 	.word	0x2400003c
 800873c:	24000044 	.word	0x24000044

08008740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008740:	b480      	push	{r7}
 8008742:	b089      	sub	sp, #36	@ 0x24
 8008744:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008746:	4bb3      	ldr	r3, [pc, #716]	@ (8008a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800874e:	2b18      	cmp	r3, #24
 8008750:	f200 8155 	bhi.w	80089fe <HAL_RCC_GetSysClockFreq+0x2be>
 8008754:	a201      	add	r2, pc, #4	@ (adr r2, 800875c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875a:	bf00      	nop
 800875c:	080087c1 	.word	0x080087c1
 8008760:	080089ff 	.word	0x080089ff
 8008764:	080089ff 	.word	0x080089ff
 8008768:	080089ff 	.word	0x080089ff
 800876c:	080089ff 	.word	0x080089ff
 8008770:	080089ff 	.word	0x080089ff
 8008774:	080089ff 	.word	0x080089ff
 8008778:	080089ff 	.word	0x080089ff
 800877c:	080087e7 	.word	0x080087e7
 8008780:	080089ff 	.word	0x080089ff
 8008784:	080089ff 	.word	0x080089ff
 8008788:	080089ff 	.word	0x080089ff
 800878c:	080089ff 	.word	0x080089ff
 8008790:	080089ff 	.word	0x080089ff
 8008794:	080089ff 	.word	0x080089ff
 8008798:	080089ff 	.word	0x080089ff
 800879c:	080087ed 	.word	0x080087ed
 80087a0:	080089ff 	.word	0x080089ff
 80087a4:	080089ff 	.word	0x080089ff
 80087a8:	080089ff 	.word	0x080089ff
 80087ac:	080089ff 	.word	0x080089ff
 80087b0:	080089ff 	.word	0x080089ff
 80087b4:	080089ff 	.word	0x080089ff
 80087b8:	080089ff 	.word	0x080089ff
 80087bc:	080087f3 	.word	0x080087f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087c0:	4b94      	ldr	r3, [pc, #592]	@ (8008a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 0320 	and.w	r3, r3, #32
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d009      	beq.n	80087e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087cc:	4b91      	ldr	r3, [pc, #580]	@ (8008a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	08db      	lsrs	r3, r3, #3
 80087d2:	f003 0303 	and.w	r3, r3, #3
 80087d6:	4a90      	ldr	r2, [pc, #576]	@ (8008a18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80087d8:	fa22 f303 	lsr.w	r3, r2, r3
 80087dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80087de:	e111      	b.n	8008a04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80087e0:	4b8d      	ldr	r3, [pc, #564]	@ (8008a18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80087e2:	61bb      	str	r3, [r7, #24]
      break;
 80087e4:	e10e      	b.n	8008a04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80087e6:	4b8d      	ldr	r3, [pc, #564]	@ (8008a1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80087e8:	61bb      	str	r3, [r7, #24]
      break;
 80087ea:	e10b      	b.n	8008a04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80087ec:	4b8c      	ldr	r3, [pc, #560]	@ (8008a20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80087ee:	61bb      	str	r3, [r7, #24]
      break;
 80087f0:	e108      	b.n	8008a04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087f2:	4b88      	ldr	r3, [pc, #544]	@ (8008a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f6:	f003 0303 	and.w	r3, r3, #3
 80087fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80087fc:	4b85      	ldr	r3, [pc, #532]	@ (8008a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008800:	091b      	lsrs	r3, r3, #4
 8008802:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008806:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008808:	4b82      	ldr	r3, [pc, #520]	@ (8008a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800880a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880c:	f003 0301 	and.w	r3, r3, #1
 8008810:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008812:	4b80      	ldr	r3, [pc, #512]	@ (8008a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008816:	08db      	lsrs	r3, r3, #3
 8008818:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	fb02 f303 	mul.w	r3, r2, r3
 8008822:	ee07 3a90 	vmov	s15, r3
 8008826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800882a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 80e1 	beq.w	80089f8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2b02      	cmp	r3, #2
 800883a:	f000 8083 	beq.w	8008944 <HAL_RCC_GetSysClockFreq+0x204>
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	2b02      	cmp	r3, #2
 8008842:	f200 80a1 	bhi.w	8008988 <HAL_RCC_GetSysClockFreq+0x248>
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d003      	beq.n	8008854 <HAL_RCC_GetSysClockFreq+0x114>
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d056      	beq.n	8008900 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008852:	e099      	b.n	8008988 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008854:	4b6f      	ldr	r3, [pc, #444]	@ (8008a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0320 	and.w	r3, r3, #32
 800885c:	2b00      	cmp	r3, #0
 800885e:	d02d      	beq.n	80088bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008860:	4b6c      	ldr	r3, [pc, #432]	@ (8008a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	08db      	lsrs	r3, r3, #3
 8008866:	f003 0303 	and.w	r3, r3, #3
 800886a:	4a6b      	ldr	r2, [pc, #428]	@ (8008a18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800886c:	fa22 f303 	lsr.w	r3, r2, r3
 8008870:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	ee07 3a90 	vmov	s15, r3
 8008878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	ee07 3a90 	vmov	s15, r3
 8008882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800888a:	4b62      	ldr	r3, [pc, #392]	@ (8008a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800888c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800888e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008892:	ee07 3a90 	vmov	s15, r3
 8008896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800889a:	ed97 6a02 	vldr	s12, [r7, #8]
 800889e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80088ba:	e087      	b.n	80089cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	ee07 3a90 	vmov	s15, r3
 80088c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008a28 <HAL_RCC_GetSysClockFreq+0x2e8>
 80088ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ce:	4b51      	ldr	r3, [pc, #324]	@ (8008a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d6:	ee07 3a90 	vmov	s15, r3
 80088da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088de:	ed97 6a02 	vldr	s12, [r7, #8]
 80088e2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80088fe:	e065      	b.n	80089cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	ee07 3a90 	vmov	s15, r3
 8008906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008a2c <HAL_RCC_GetSysClockFreq+0x2ec>
 800890e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008912:	4b40      	ldr	r3, [pc, #256]	@ (8008a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800891a:	ee07 3a90 	vmov	s15, r3
 800891e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008922:	ed97 6a02 	vldr	s12, [r7, #8]
 8008926:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800892a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800892e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800893a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800893e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008942:	e043      	b.n	80089cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	ee07 3a90 	vmov	s15, r3
 800894a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008a30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008956:	4b2f      	ldr	r3, [pc, #188]	@ (8008a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800895a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800895e:	ee07 3a90 	vmov	s15, r3
 8008962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008966:	ed97 6a02 	vldr	s12, [r7, #8]
 800896a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800896e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800897a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800897e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008982:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008986:	e021      	b.n	80089cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	ee07 3a90 	vmov	s15, r3
 800898e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008992:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008a2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800899a:	4b1e      	ldr	r3, [pc, #120]	@ (8008a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800899c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800899e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a2:	ee07 3a90 	vmov	s15, r3
 80089a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80089ae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80089ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80089cc:	4b11      	ldr	r3, [pc, #68]	@ (8008a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089d0:	0a5b      	lsrs	r3, r3, #9
 80089d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089d6:	3301      	adds	r3, #1
 80089d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	ee07 3a90 	vmov	s15, r3
 80089e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80089e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089f0:	ee17 3a90 	vmov	r3, s15
 80089f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80089f6:	e005      	b.n	8008a04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	61bb      	str	r3, [r7, #24]
      break;
 80089fc:	e002      	b.n	8008a04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80089fe:	4b07      	ldr	r3, [pc, #28]	@ (8008a1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008a00:	61bb      	str	r3, [r7, #24]
      break;
 8008a02:	bf00      	nop
  }

  return sysclockfreq;
 8008a04:	69bb      	ldr	r3, [r7, #24]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3724      	adds	r7, #36	@ 0x24
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	58024400 	.word	0x58024400
 8008a18:	03d09000 	.word	0x03d09000
 8008a1c:	003d0900 	.word	0x003d0900
 8008a20:	016e3600 	.word	0x016e3600
 8008a24:	46000000 	.word	0x46000000
 8008a28:	4c742400 	.word	0x4c742400
 8008a2c:	4a742400 	.word	0x4a742400
 8008a30:	4bb71b00 	.word	0x4bb71b00

08008a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8008a3a:	f7ff fe81 	bl	8008740 <HAL_RCC_GetSysClockFreq>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	4b10      	ldr	r3, [pc, #64]	@ (8008a84 <HAL_RCC_GetHCLKFreq+0x50>)
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	0a1b      	lsrs	r3, r3, #8
 8008a46:	f003 030f 	and.w	r3, r3, #15
 8008a4a:	490f      	ldr	r1, [pc, #60]	@ (8008a88 <HAL_RCC_GetHCLKFreq+0x54>)
 8008a4c:	5ccb      	ldrb	r3, [r1, r3]
 8008a4e:	f003 031f 	and.w	r3, r3, #31
 8008a52:	fa22 f303 	lsr.w	r3, r2, r3
 8008a56:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008a58:	4b0a      	ldr	r3, [pc, #40]	@ (8008a84 <HAL_RCC_GetHCLKFreq+0x50>)
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	f003 030f 	and.w	r3, r3, #15
 8008a60:	4a09      	ldr	r2, [pc, #36]	@ (8008a88 <HAL_RCC_GetHCLKFreq+0x54>)
 8008a62:	5cd3      	ldrb	r3, [r2, r3]
 8008a64:	f003 031f 	and.w	r3, r3, #31
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a6e:	4a07      	ldr	r2, [pc, #28]	@ (8008a8c <HAL_RCC_GetHCLKFreq+0x58>)
 8008a70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a72:	4a07      	ldr	r2, [pc, #28]	@ (8008a90 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008a78:	4b04      	ldr	r3, [pc, #16]	@ (8008a8c <HAL_RCC_GetHCLKFreq+0x58>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3708      	adds	r7, #8
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	58024400 	.word	0x58024400
 8008a88:	0801159c 	.word	0x0801159c
 8008a8c:	24000040 	.word	0x24000040
 8008a90:	2400003c 	.word	0x2400003c

08008a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8008a98:	f7ff ffcc 	bl	8008a34 <HAL_RCC_GetHCLKFreq>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	4b06      	ldr	r3, [pc, #24]	@ (8008ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	091b      	lsrs	r3, r3, #4
 8008aa4:	f003 0307 	and.w	r3, r3, #7
 8008aa8:	4904      	ldr	r1, [pc, #16]	@ (8008abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8008aaa:	5ccb      	ldrb	r3, [r1, r3]
 8008aac:	f003 031f 	and.w	r3, r3, #31
 8008ab0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	58024400 	.word	0x58024400
 8008abc:	0801159c 	.word	0x0801159c

08008ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8008ac4:	f7ff ffb6 	bl	8008a34 <HAL_RCC_GetHCLKFreq>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	4b06      	ldr	r3, [pc, #24]	@ (8008ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	0a1b      	lsrs	r3, r3, #8
 8008ad0:	f003 0307 	and.w	r3, r3, #7
 8008ad4:	4904      	ldr	r1, [pc, #16]	@ (8008ae8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008ad6:	5ccb      	ldrb	r3, [r1, r3]
 8008ad8:	f003 031f 	and.w	r3, r3, #31
 8008adc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	58024400 	.word	0x58024400
 8008ae8:	0801159c 	.word	0x0801159c

08008aec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008af0:	b0c8      	sub	sp, #288	@ 0x120
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008af8:	2300      	movs	r3, #0
 8008afa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008afe:	2300      	movs	r3, #0
 8008b00:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008b10:	2500      	movs	r5, #0
 8008b12:	ea54 0305 	orrs.w	r3, r4, r5
 8008b16:	d049      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008b22:	d02f      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008b24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008b28:	d828      	bhi.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008b2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b2e:	d01a      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008b30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b34:	d822      	bhi.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008b3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b3e:	d007      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b40:	e01c      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b42:	4ba7      	ldr	r3, [pc, #668]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b46:	4aa6      	ldr	r2, [pc, #664]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b4e:	e01a      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b54:	3308      	adds	r3, #8
 8008b56:	2102      	movs	r1, #2
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f001 fc43 	bl	800a3e4 <RCCEx_PLL2_Config>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b64:	e00f      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b6a:	3328      	adds	r3, #40	@ 0x28
 8008b6c:	2102      	movs	r1, #2
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f001 fcea 	bl	800a548 <RCCEx_PLL3_Config>
 8008b74:	4603      	mov	r3, r0
 8008b76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b7a:	e004      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b82:	e000      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d10a      	bne.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008b8e:	4b94      	ldr	r3, [pc, #592]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b92:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b9c:	4a90      	ldr	r2, [pc, #576]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b9e:	430b      	orrs	r3, r1
 8008ba0:	6513      	str	r3, [r2, #80]	@ 0x50
 8008ba2:	e003      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ba8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008bb8:	f04f 0900 	mov.w	r9, #0
 8008bbc:	ea58 0309 	orrs.w	r3, r8, r9
 8008bc0:	d047      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bc8:	2b04      	cmp	r3, #4
 8008bca:	d82a      	bhi.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd2:	bf00      	nop
 8008bd4:	08008be9 	.word	0x08008be9
 8008bd8:	08008bf7 	.word	0x08008bf7
 8008bdc:	08008c0d 	.word	0x08008c0d
 8008be0:	08008c2b 	.word	0x08008c2b
 8008be4:	08008c2b 	.word	0x08008c2b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008be8:	4b7d      	ldr	r3, [pc, #500]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bec:	4a7c      	ldr	r2, [pc, #496]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bf4:	e01a      	b.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bfa:	3308      	adds	r3, #8
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f001 fbf0 	bl	800a3e4 <RCCEx_PLL2_Config>
 8008c04:	4603      	mov	r3, r0
 8008c06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c0a:	e00f      	b.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c10:	3328      	adds	r3, #40	@ 0x28
 8008c12:	2100      	movs	r1, #0
 8008c14:	4618      	mov	r0, r3
 8008c16:	f001 fc97 	bl	800a548 <RCCEx_PLL3_Config>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c20:	e004      	b.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008c28:	e000      	b.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10a      	bne.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c34:	4b6a      	ldr	r3, [pc, #424]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c38:	f023 0107 	bic.w	r1, r3, #7
 8008c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c42:	4a67      	ldr	r2, [pc, #412]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c44:	430b      	orrs	r3, r1
 8008c46:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c48:	e003      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c4e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8008c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008c5e:	f04f 0b00 	mov.w	fp, #0
 8008c62:	ea5a 030b 	orrs.w	r3, sl, fp
 8008c66:	d054      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8008c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c6e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008c72:	d036      	beq.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008c74:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008c78:	d82f      	bhi.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c7e:	d032      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008c80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c84:	d829      	bhi.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008c86:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c88:	d02f      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8008c8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c8c:	d825      	bhi.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008c8e:	2b80      	cmp	r3, #128	@ 0x80
 8008c90:	d018      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8008c92:	2b80      	cmp	r3, #128	@ 0x80
 8008c94:	d821      	bhi.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d002      	beq.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8008c9a:	2b40      	cmp	r3, #64	@ 0x40
 8008c9c:	d007      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8008c9e:	e01c      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ca0:	4b4f      	ldr	r3, [pc, #316]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca4:	4a4e      	ldr	r2, [pc, #312]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008caa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008cac:	e01e      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cb2:	3308      	adds	r3, #8
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f001 fb94 	bl	800a3e4 <RCCEx_PLL2_Config>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008cc2:	e013      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cc8:	3328      	adds	r3, #40	@ 0x28
 8008cca:	2100      	movs	r1, #0
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f001 fc3b 	bl	800a548 <RCCEx_PLL3_Config>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008cd8:	e008      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ce0:	e004      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008ce2:	bf00      	nop
 8008ce4:	e002      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008ce6:	bf00      	nop
 8008ce8:	e000      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008cea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10a      	bne.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008cf4:	4b3a      	ldr	r3, [pc, #232]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cf8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d02:	4a37      	ldr	r2, [pc, #220]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d04:	430b      	orrs	r3, r1
 8008d06:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d08:	e003      	b.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8008d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008d1e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008d22:	2300      	movs	r3, #0
 8008d24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008d28:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	d05c      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8008d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d38:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008d3c:	d03b      	beq.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008d3e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008d42:	d834      	bhi.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008d44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d48:	d037      	beq.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8008d4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d4e:	d82e      	bhi.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008d50:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008d54:	d033      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008d56:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008d5a:	d828      	bhi.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008d5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d60:	d01a      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8008d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d66:	d822      	bhi.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d003      	beq.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8008d6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d70:	d007      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8008d72:	e01c      	b.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d74:	4b1a      	ldr	r3, [pc, #104]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d78:	4a19      	ldr	r2, [pc, #100]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008d80:	e01e      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d86:	3308      	adds	r3, #8
 8008d88:	2100      	movs	r1, #0
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f001 fb2a 	bl	800a3e4 <RCCEx_PLL2_Config>
 8008d90:	4603      	mov	r3, r0
 8008d92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008d96:	e013      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d9c:	3328      	adds	r3, #40	@ 0x28
 8008d9e:	2100      	movs	r1, #0
 8008da0:	4618      	mov	r0, r3
 8008da2:	f001 fbd1 	bl	800a548 <RCCEx_PLL3_Config>
 8008da6:	4603      	mov	r3, r0
 8008da8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008dac:	e008      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008db4:	e004      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008db6:	bf00      	nop
 8008db8:	e002      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008dba:	bf00      	nop
 8008dbc:	e000      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10d      	bne.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8008dc8:	4b05      	ldr	r3, [pc, #20]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dcc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dd6:	4a02      	ldr	r2, [pc, #8]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008dd8:	430b      	orrs	r3, r1
 8008dda:	6513      	str	r3, [r2, #80]	@ 0x50
 8008ddc:	e006      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008dde:	bf00      	nop
 8008de0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008de8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008df8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008e02:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008e06:	460b      	mov	r3, r1
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	d03a      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e12:	2b30      	cmp	r3, #48	@ 0x30
 8008e14:	d01f      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8008e16:	2b30      	cmp	r3, #48	@ 0x30
 8008e18:	d819      	bhi.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008e1a:	2b20      	cmp	r3, #32
 8008e1c:	d00c      	beq.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008e1e:	2b20      	cmp	r3, #32
 8008e20:	d815      	bhi.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d019      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008e26:	2b10      	cmp	r3, #16
 8008e28:	d111      	bne.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e2a:	4bae      	ldr	r3, [pc, #696]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e2e:	4aad      	ldr	r2, [pc, #692]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008e36:	e011      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e3c:	3308      	adds	r3, #8
 8008e3e:	2102      	movs	r1, #2
 8008e40:	4618      	mov	r0, r3
 8008e42:	f001 facf 	bl	800a3e4 <RCCEx_PLL2_Config>
 8008e46:	4603      	mov	r3, r0
 8008e48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008e4c:	e006      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e54:	e002      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008e56:	bf00      	nop
 8008e58:	e000      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10a      	bne.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008e64:	4b9f      	ldr	r3, [pc, #636]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e68:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e72:	4a9c      	ldr	r2, [pc, #624]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e74:	430b      	orrs	r3, r1
 8008e76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e78:	e003      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e7e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008e8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e92:	2300      	movs	r3, #0
 8008e94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008e98:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	d051      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ea8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008eac:	d035      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008eae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008eb2:	d82e      	bhi.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008eb4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008eb8:	d031      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8008eba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008ebe:	d828      	bhi.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ec4:	d01a      	beq.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008eca:	d822      	bhi.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d003      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ed4:	d007      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8008ed6:	e01c      	b.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ed8:	4b82      	ldr	r3, [pc, #520]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008edc:	4a81      	ldr	r2, [pc, #516]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008ee4:	e01c      	b.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eea:	3308      	adds	r3, #8
 8008eec:	2100      	movs	r1, #0
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f001 fa78 	bl	800a3e4 <RCCEx_PLL2_Config>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008efa:	e011      	b.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f00:	3328      	adds	r3, #40	@ 0x28
 8008f02:	2100      	movs	r1, #0
 8008f04:	4618      	mov	r0, r3
 8008f06:	f001 fb1f 	bl	800a548 <RCCEx_PLL3_Config>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008f10:	e006      	b.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008f18:	e002      	b.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008f1a:	bf00      	nop
 8008f1c:	e000      	b.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d10a      	bne.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008f28:	4b6e      	ldr	r3, [pc, #440]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f2c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f36:	4a6b      	ldr	r2, [pc, #428]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f38:	430b      	orrs	r3, r1
 8008f3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f3c:	e003      	b.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f42:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008f52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008f56:	2300      	movs	r3, #0
 8008f58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008f5c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008f60:	460b      	mov	r3, r1
 8008f62:	4313      	orrs	r3, r2
 8008f64:	d053      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f70:	d033      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008f72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f76:	d82c      	bhi.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008f78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f7c:	d02f      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8008f7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f82:	d826      	bhi.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008f84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f88:	d02b      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008f8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f8e:	d820      	bhi.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008f90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f94:	d012      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008f96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f9a:	d81a      	bhi.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d022      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8008fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fa4:	d115      	bne.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008faa:	3308      	adds	r3, #8
 8008fac:	2101      	movs	r1, #1
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f001 fa18 	bl	800a3e4 <RCCEx_PLL2_Config>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008fba:	e015      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fc0:	3328      	adds	r3, #40	@ 0x28
 8008fc2:	2101      	movs	r1, #1
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f001 fabf 	bl	800a548 <RCCEx_PLL3_Config>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008fd0:	e00a      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008fd8:	e006      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008fda:	bf00      	nop
 8008fdc:	e004      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008fde:	bf00      	nop
 8008fe0:	e002      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008fe2:	bf00      	nop
 8008fe4:	e000      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fe8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10a      	bne.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008ff0:	4b3c      	ldr	r3, [pc, #240]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ff4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ffc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ffe:	4a39      	ldr	r2, [pc, #228]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009000:	430b      	orrs	r3, r1
 8009002:	6513      	str	r3, [r2, #80]	@ 0x50
 8009004:	e003      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009006:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800900a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800900e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800901a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800901e:	2300      	movs	r3, #0
 8009020:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009024:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009028:	460b      	mov	r3, r1
 800902a:	4313      	orrs	r3, r2
 800902c:	d060      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800902e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009032:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009036:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800903a:	d039      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800903c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009040:	d832      	bhi.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009042:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009046:	d035      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009048:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800904c:	d82c      	bhi.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800904e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009052:	d031      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009058:	d826      	bhi.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800905a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800905e:	d02d      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009060:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009064:	d820      	bhi.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009066:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800906a:	d012      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800906c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009070:	d81a      	bhi.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009072:	2b00      	cmp	r3, #0
 8009074:	d024      	beq.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009076:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800907a:	d115      	bne.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800907c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009080:	3308      	adds	r3, #8
 8009082:	2101      	movs	r1, #1
 8009084:	4618      	mov	r0, r3
 8009086:	f001 f9ad 	bl	800a3e4 <RCCEx_PLL2_Config>
 800908a:	4603      	mov	r3, r0
 800908c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009090:	e017      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009096:	3328      	adds	r3, #40	@ 0x28
 8009098:	2101      	movs	r1, #1
 800909a:	4618      	mov	r0, r3
 800909c:	f001 fa54 	bl	800a548 <RCCEx_PLL3_Config>
 80090a0:	4603      	mov	r3, r0
 80090a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80090a6:	e00c      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80090ae:	e008      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80090b0:	bf00      	nop
 80090b2:	e006      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80090b4:	bf00      	nop
 80090b6:	e004      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80090b8:	bf00      	nop
 80090ba:	e002      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80090bc:	bf00      	nop
 80090be:	e000      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80090c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10e      	bne.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80090ca:	4b06      	ldr	r3, [pc, #24]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80090d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80090da:	4a02      	ldr	r2, [pc, #8]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090dc:	430b      	orrs	r3, r1
 80090de:	6593      	str	r3, [r2, #88]	@ 0x58
 80090e0:	e006      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80090e2:	bf00      	nop
 80090e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80090f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80090fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009100:	2300      	movs	r3, #0
 8009102:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009106:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800910a:	460b      	mov	r3, r1
 800910c:	4313      	orrs	r3, r2
 800910e:	d037      	beq.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009110:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009114:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009116:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800911a:	d00e      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800911c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009120:	d816      	bhi.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009122:	2b00      	cmp	r3, #0
 8009124:	d018      	beq.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800912a:	d111      	bne.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800912c:	4bc4      	ldr	r3, [pc, #784]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800912e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009130:	4ac3      	ldr	r2, [pc, #780]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009138:	e00f      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800913a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800913e:	3308      	adds	r3, #8
 8009140:	2101      	movs	r1, #1
 8009142:	4618      	mov	r0, r3
 8009144:	f001 f94e 	bl	800a3e4 <RCCEx_PLL2_Config>
 8009148:	4603      	mov	r3, r0
 800914a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800914e:	e004      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009156:	e000      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800915a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10a      	bne.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009162:	4bb7      	ldr	r3, [pc, #732]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009166:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800916a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800916e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009170:	4ab3      	ldr	r2, [pc, #716]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009172:	430b      	orrs	r3, r1
 8009174:	6513      	str	r3, [r2, #80]	@ 0x50
 8009176:	e003      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009178:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800917c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009180:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009188:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800918c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009190:	2300      	movs	r3, #0
 8009192:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009196:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800919a:	460b      	mov	r3, r1
 800919c:	4313      	orrs	r3, r2
 800919e:	d039      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80091a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091a6:	2b03      	cmp	r3, #3
 80091a8:	d81c      	bhi.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80091aa:	a201      	add	r2, pc, #4	@ (adr r2, 80091b0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80091ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b0:	080091ed 	.word	0x080091ed
 80091b4:	080091c1 	.word	0x080091c1
 80091b8:	080091cf 	.word	0x080091cf
 80091bc:	080091ed 	.word	0x080091ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091c0:	4b9f      	ldr	r3, [pc, #636]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c4:	4a9e      	ldr	r2, [pc, #632]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80091cc:	e00f      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091d2:	3308      	adds	r3, #8
 80091d4:	2102      	movs	r1, #2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f001 f904 	bl	800a3e4 <RCCEx_PLL2_Config>
 80091dc:	4603      	mov	r3, r0
 80091de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80091e2:	e004      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80091ea:	e000      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80091ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10a      	bne.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80091f6:	4b92      	ldr	r3, [pc, #584]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091fa:	f023 0103 	bic.w	r1, r3, #3
 80091fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009204:	4a8e      	ldr	r2, [pc, #568]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009206:	430b      	orrs	r3, r1
 8009208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800920a:	e003      	b.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800920c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009210:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009214:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009220:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009224:	2300      	movs	r3, #0
 8009226:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800922a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800922e:	460b      	mov	r3, r1
 8009230:	4313      	orrs	r3, r2
 8009232:	f000 8099 	beq.w	8009368 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009236:	4b83      	ldr	r3, [pc, #524]	@ (8009444 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a82      	ldr	r2, [pc, #520]	@ (8009444 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800923c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009240:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009242:	f7fb f815 	bl	8004270 <HAL_GetTick>
 8009246:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800924a:	e00b      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800924c:	f7fb f810 	bl	8004270 <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	2b64      	cmp	r3, #100	@ 0x64
 800925a:	d903      	bls.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009262:	e005      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009264:	4b77      	ldr	r3, [pc, #476]	@ (8009444 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800926c:	2b00      	cmp	r3, #0
 800926e:	d0ed      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009270:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009274:	2b00      	cmp	r3, #0
 8009276:	d173      	bne.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009278:	4b71      	ldr	r3, [pc, #452]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800927a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800927c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009280:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009284:	4053      	eors	r3, r2
 8009286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800928a:	2b00      	cmp	r3, #0
 800928c:	d015      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800928e:	4b6c      	ldr	r3, [pc, #432]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009296:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800929a:	4b69      	ldr	r3, [pc, #420]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800929c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800929e:	4a68      	ldr	r2, [pc, #416]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092a4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80092a6:	4b66      	ldr	r3, [pc, #408]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092aa:	4a65      	ldr	r2, [pc, #404]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092b0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80092b2:	4a63      	ldr	r2, [pc, #396]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80092ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80092c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092c6:	d118      	bne.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092c8:	f7fa ffd2 	bl	8004270 <HAL_GetTick>
 80092cc:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092d0:	e00d      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092d2:	f7fa ffcd 	bl	8004270 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80092dc:	1ad2      	subs	r2, r2, r3
 80092de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d903      	bls.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80092e6:	2303      	movs	r3, #3
 80092e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80092ec:	e005      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092ee:	4b54      	ldr	r3, [pc, #336]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092f2:	f003 0302 	and.w	r3, r3, #2
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0eb      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80092fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d129      	bne.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009302:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009306:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800930a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800930e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009312:	d10e      	bne.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009314:	4b4a      	ldr	r3, [pc, #296]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800931c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009320:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009324:	091a      	lsrs	r2, r3, #4
 8009326:	4b48      	ldr	r3, [pc, #288]	@ (8009448 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009328:	4013      	ands	r3, r2
 800932a:	4a45      	ldr	r2, [pc, #276]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800932c:	430b      	orrs	r3, r1
 800932e:	6113      	str	r3, [r2, #16]
 8009330:	e005      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009332:	4b43      	ldr	r3, [pc, #268]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	4a42      	ldr	r2, [pc, #264]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009338:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800933c:	6113      	str	r3, [r2, #16]
 800933e:	4b40      	ldr	r3, [pc, #256]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009340:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009342:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009346:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800934a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800934e:	4a3c      	ldr	r2, [pc, #240]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009350:	430b      	orrs	r3, r1
 8009352:	6713      	str	r3, [r2, #112]	@ 0x70
 8009354:	e008      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009356:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800935a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800935e:	e003      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009360:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009364:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800936c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009370:	f002 0301 	and.w	r3, r2, #1
 8009374:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009378:	2300      	movs	r3, #0
 800937a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800937e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009382:	460b      	mov	r3, r1
 8009384:	4313      	orrs	r3, r2
 8009386:	f000 8090 	beq.w	80094aa <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800938a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800938e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009392:	2b28      	cmp	r3, #40	@ 0x28
 8009394:	d870      	bhi.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009396:	a201      	add	r2, pc, #4	@ (adr r2, 800939c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800939c:	08009481 	.word	0x08009481
 80093a0:	08009479 	.word	0x08009479
 80093a4:	08009479 	.word	0x08009479
 80093a8:	08009479 	.word	0x08009479
 80093ac:	08009479 	.word	0x08009479
 80093b0:	08009479 	.word	0x08009479
 80093b4:	08009479 	.word	0x08009479
 80093b8:	08009479 	.word	0x08009479
 80093bc:	0800944d 	.word	0x0800944d
 80093c0:	08009479 	.word	0x08009479
 80093c4:	08009479 	.word	0x08009479
 80093c8:	08009479 	.word	0x08009479
 80093cc:	08009479 	.word	0x08009479
 80093d0:	08009479 	.word	0x08009479
 80093d4:	08009479 	.word	0x08009479
 80093d8:	08009479 	.word	0x08009479
 80093dc:	08009463 	.word	0x08009463
 80093e0:	08009479 	.word	0x08009479
 80093e4:	08009479 	.word	0x08009479
 80093e8:	08009479 	.word	0x08009479
 80093ec:	08009479 	.word	0x08009479
 80093f0:	08009479 	.word	0x08009479
 80093f4:	08009479 	.word	0x08009479
 80093f8:	08009479 	.word	0x08009479
 80093fc:	08009481 	.word	0x08009481
 8009400:	08009479 	.word	0x08009479
 8009404:	08009479 	.word	0x08009479
 8009408:	08009479 	.word	0x08009479
 800940c:	08009479 	.word	0x08009479
 8009410:	08009479 	.word	0x08009479
 8009414:	08009479 	.word	0x08009479
 8009418:	08009479 	.word	0x08009479
 800941c:	08009481 	.word	0x08009481
 8009420:	08009479 	.word	0x08009479
 8009424:	08009479 	.word	0x08009479
 8009428:	08009479 	.word	0x08009479
 800942c:	08009479 	.word	0x08009479
 8009430:	08009479 	.word	0x08009479
 8009434:	08009479 	.word	0x08009479
 8009438:	08009479 	.word	0x08009479
 800943c:	08009481 	.word	0x08009481
 8009440:	58024400 	.word	0x58024400
 8009444:	58024800 	.word	0x58024800
 8009448:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800944c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009450:	3308      	adds	r3, #8
 8009452:	2101      	movs	r1, #1
 8009454:	4618      	mov	r0, r3
 8009456:	f000 ffc5 	bl	800a3e4 <RCCEx_PLL2_Config>
 800945a:	4603      	mov	r3, r0
 800945c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009460:	e00f      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009466:	3328      	adds	r3, #40	@ 0x28
 8009468:	2101      	movs	r1, #1
 800946a:	4618      	mov	r0, r3
 800946c:	f001 f86c 	bl	800a548 <RCCEx_PLL3_Config>
 8009470:	4603      	mov	r3, r0
 8009472:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009476:	e004      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800947e:	e000      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009482:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009486:	2b00      	cmp	r3, #0
 8009488:	d10b      	bne.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800948a:	4bc0      	ldr	r3, [pc, #768]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800948c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800948e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009492:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009496:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800949a:	4abc      	ldr	r2, [pc, #752]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800949c:	430b      	orrs	r3, r1
 800949e:	6553      	str	r3, [r2, #84]	@ 0x54
 80094a0:	e003      	b.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80094aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b2:	f002 0302 	and.w	r3, r2, #2
 80094b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80094ba:	2300      	movs	r3, #0
 80094bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80094c0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80094c4:	460b      	mov	r3, r1
 80094c6:	4313      	orrs	r3, r2
 80094c8:	d043      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80094ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094d2:	2b05      	cmp	r3, #5
 80094d4:	d824      	bhi.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80094d6:	a201      	add	r2, pc, #4	@ (adr r2, 80094dc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80094d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094dc:	08009529 	.word	0x08009529
 80094e0:	080094f5 	.word	0x080094f5
 80094e4:	0800950b 	.word	0x0800950b
 80094e8:	08009529 	.word	0x08009529
 80094ec:	08009529 	.word	0x08009529
 80094f0:	08009529 	.word	0x08009529
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094f8:	3308      	adds	r3, #8
 80094fa:	2101      	movs	r1, #1
 80094fc:	4618      	mov	r0, r3
 80094fe:	f000 ff71 	bl	800a3e4 <RCCEx_PLL2_Config>
 8009502:	4603      	mov	r3, r0
 8009504:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009508:	e00f      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800950a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800950e:	3328      	adds	r3, #40	@ 0x28
 8009510:	2101      	movs	r1, #1
 8009512:	4618      	mov	r0, r3
 8009514:	f001 f818 	bl	800a548 <RCCEx_PLL3_Config>
 8009518:	4603      	mov	r3, r0
 800951a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800951e:	e004      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009526:	e000      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8009528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800952a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10b      	bne.n	800954a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009532:	4b96      	ldr	r3, [pc, #600]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009536:	f023 0107 	bic.w	r1, r3, #7
 800953a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800953e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009542:	4a92      	ldr	r2, [pc, #584]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009544:	430b      	orrs	r3, r1
 8009546:	6553      	str	r3, [r2, #84]	@ 0x54
 8009548:	e003      	b.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800954a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800954e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955a:	f002 0304 	and.w	r3, r2, #4
 800955e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009562:	2300      	movs	r3, #0
 8009564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009568:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800956c:	460b      	mov	r3, r1
 800956e:	4313      	orrs	r3, r2
 8009570:	d043      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009572:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009576:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800957a:	2b05      	cmp	r3, #5
 800957c:	d824      	bhi.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800957e:	a201      	add	r2, pc, #4	@ (adr r2, 8009584 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8009580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009584:	080095d1 	.word	0x080095d1
 8009588:	0800959d 	.word	0x0800959d
 800958c:	080095b3 	.word	0x080095b3
 8009590:	080095d1 	.word	0x080095d1
 8009594:	080095d1 	.word	0x080095d1
 8009598:	080095d1 	.word	0x080095d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800959c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095a0:	3308      	adds	r3, #8
 80095a2:	2101      	movs	r1, #1
 80095a4:	4618      	mov	r0, r3
 80095a6:	f000 ff1d 	bl	800a3e4 <RCCEx_PLL2_Config>
 80095aa:	4603      	mov	r3, r0
 80095ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80095b0:	e00f      	b.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095b6:	3328      	adds	r3, #40	@ 0x28
 80095b8:	2101      	movs	r1, #1
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 ffc4 	bl	800a548 <RCCEx_PLL3_Config>
 80095c0:	4603      	mov	r3, r0
 80095c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80095c6:	e004      	b.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80095ce:	e000      	b.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80095d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d10b      	bne.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80095da:	4b6c      	ldr	r3, [pc, #432]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80095dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095de:	f023 0107 	bic.w	r1, r3, #7
 80095e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80095ea:	4a68      	ldr	r2, [pc, #416]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80095ec:	430b      	orrs	r3, r1
 80095ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80095f0:	e003      	b.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80095fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009602:	f002 0320 	and.w	r3, r2, #32
 8009606:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800960a:	2300      	movs	r3, #0
 800960c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009610:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009614:	460b      	mov	r3, r1
 8009616:	4313      	orrs	r3, r2
 8009618:	d055      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800961a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800961e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009622:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009626:	d033      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009628:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800962c:	d82c      	bhi.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800962e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009632:	d02f      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009638:	d826      	bhi.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800963a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800963e:	d02b      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009640:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009644:	d820      	bhi.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009646:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800964a:	d012      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800964c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009650:	d81a      	bhi.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009652:	2b00      	cmp	r3, #0
 8009654:	d022      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009656:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800965a:	d115      	bne.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800965c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009660:	3308      	adds	r3, #8
 8009662:	2100      	movs	r1, #0
 8009664:	4618      	mov	r0, r3
 8009666:	f000 febd 	bl	800a3e4 <RCCEx_PLL2_Config>
 800966a:	4603      	mov	r3, r0
 800966c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009670:	e015      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009672:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009676:	3328      	adds	r3, #40	@ 0x28
 8009678:	2102      	movs	r1, #2
 800967a:	4618      	mov	r0, r3
 800967c:	f000 ff64 	bl	800a548 <RCCEx_PLL3_Config>
 8009680:	4603      	mov	r3, r0
 8009682:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009686:	e00a      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800968e:	e006      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009690:	bf00      	nop
 8009692:	e004      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009694:	bf00      	nop
 8009696:	e002      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009698:	bf00      	nop
 800969a:	e000      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800969c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800969e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d10b      	bne.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80096a6:	4b39      	ldr	r3, [pc, #228]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80096a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80096ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80096b6:	4a35      	ldr	r2, [pc, #212]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80096b8:	430b      	orrs	r3, r1
 80096ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80096bc:	e003      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80096c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80096d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80096d6:	2300      	movs	r3, #0
 80096d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80096dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80096e0:	460b      	mov	r3, r1
 80096e2:	4313      	orrs	r3, r2
 80096e4:	d058      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80096e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80096ee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80096f2:	d033      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80096f4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80096f8:	d82c      	bhi.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80096fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096fe:	d02f      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009704:	d826      	bhi.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009706:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800970a:	d02b      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800970c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009710:	d820      	bhi.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009712:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009716:	d012      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8009718:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800971c:	d81a      	bhi.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800971e:	2b00      	cmp	r3, #0
 8009720:	d022      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8009722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009726:	d115      	bne.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800972c:	3308      	adds	r3, #8
 800972e:	2100      	movs	r1, #0
 8009730:	4618      	mov	r0, r3
 8009732:	f000 fe57 	bl	800a3e4 <RCCEx_PLL2_Config>
 8009736:	4603      	mov	r3, r0
 8009738:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800973c:	e015      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800973e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009742:	3328      	adds	r3, #40	@ 0x28
 8009744:	2102      	movs	r1, #2
 8009746:	4618      	mov	r0, r3
 8009748:	f000 fefe 	bl	800a548 <RCCEx_PLL3_Config>
 800974c:	4603      	mov	r3, r0
 800974e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009752:	e00a      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800975a:	e006      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800975c:	bf00      	nop
 800975e:	e004      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009760:	bf00      	nop
 8009762:	e002      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009764:	bf00      	nop
 8009766:	e000      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800976a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10e      	bne.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009772:	4b06      	ldr	r3, [pc, #24]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009776:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800977a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800977e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009782:	4a02      	ldr	r2, [pc, #8]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009784:	430b      	orrs	r3, r1
 8009786:	6593      	str	r3, [r2, #88]	@ 0x58
 8009788:	e006      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800978a:	bf00      	nop
 800978c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009790:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009794:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009798:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80097a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80097a8:	2300      	movs	r3, #0
 80097aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80097ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80097b2:	460b      	mov	r3, r1
 80097b4:	4313      	orrs	r3, r2
 80097b6:	d055      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80097b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80097c0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80097c4:	d033      	beq.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80097c6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80097ca:	d82c      	bhi.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80097cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097d0:	d02f      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80097d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097d6:	d826      	bhi.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80097d8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80097dc:	d02b      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80097de:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80097e2:	d820      	bhi.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80097e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097e8:	d012      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80097ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097ee:	d81a      	bhi.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d022      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80097f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097f8:	d115      	bne.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097fe:	3308      	adds	r3, #8
 8009800:	2100      	movs	r1, #0
 8009802:	4618      	mov	r0, r3
 8009804:	f000 fdee 	bl	800a3e4 <RCCEx_PLL2_Config>
 8009808:	4603      	mov	r3, r0
 800980a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800980e:	e015      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009814:	3328      	adds	r3, #40	@ 0x28
 8009816:	2102      	movs	r1, #2
 8009818:	4618      	mov	r0, r3
 800981a:	f000 fe95 	bl	800a548 <RCCEx_PLL3_Config>
 800981e:	4603      	mov	r3, r0
 8009820:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009824:	e00a      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800982c:	e006      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800982e:	bf00      	nop
 8009830:	e004      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009832:	bf00      	nop
 8009834:	e002      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009836:	bf00      	nop
 8009838:	e000      	b.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800983a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800983c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10b      	bne.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009844:	4ba1      	ldr	r3, [pc, #644]	@ (8009acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009848:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800984c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009850:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009854:	4a9d      	ldr	r2, [pc, #628]	@ (8009acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009856:	430b      	orrs	r3, r1
 8009858:	6593      	str	r3, [r2, #88]	@ 0x58
 800985a:	e003      	b.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800985c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009860:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	f002 0308 	and.w	r3, r2, #8
 8009870:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009874:	2300      	movs	r3, #0
 8009876:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800987a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800987e:	460b      	mov	r3, r1
 8009880:	4313      	orrs	r3, r2
 8009882:	d01e      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009884:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009888:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800988c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009890:	d10c      	bne.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009892:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009896:	3328      	adds	r3, #40	@ 0x28
 8009898:	2102      	movs	r1, #2
 800989a:	4618      	mov	r0, r3
 800989c:	f000 fe54 	bl	800a548 <RCCEx_PLL3_Config>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d002      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80098ac:	4b87      	ldr	r3, [pc, #540]	@ (8009acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80098ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098b0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80098b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098bc:	4a83      	ldr	r2, [pc, #524]	@ (8009acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80098be:	430b      	orrs	r3, r1
 80098c0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80098c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	f002 0310 	and.w	r3, r2, #16
 80098ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80098d2:	2300      	movs	r3, #0
 80098d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80098d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80098dc:	460b      	mov	r3, r1
 80098de:	4313      	orrs	r3, r2
 80098e0:	d01e      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80098e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80098ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098ee:	d10c      	bne.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80098f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098f4:	3328      	adds	r3, #40	@ 0x28
 80098f6:	2102      	movs	r1, #2
 80098f8:	4618      	mov	r0, r3
 80098fa:	f000 fe25 	bl	800a548 <RCCEx_PLL3_Config>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800990a:	4b70      	ldr	r3, [pc, #448]	@ (8009acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800990c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800990e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009916:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800991a:	4a6c      	ldr	r2, [pc, #432]	@ (8009acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800991c:	430b      	orrs	r3, r1
 800991e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009920:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009928:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800992c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009930:	2300      	movs	r3, #0
 8009932:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009936:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800993a:	460b      	mov	r3, r1
 800993c:	4313      	orrs	r3, r2
 800993e:	d03e      	beq.n	80099be <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009940:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009944:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009948:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800994c:	d022      	beq.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800994e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009952:	d81b      	bhi.n	800998c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009954:	2b00      	cmp	r3, #0
 8009956:	d003      	beq.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8009958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800995c:	d00b      	beq.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800995e:	e015      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009964:	3308      	adds	r3, #8
 8009966:	2100      	movs	r1, #0
 8009968:	4618      	mov	r0, r3
 800996a:	f000 fd3b 	bl	800a3e4 <RCCEx_PLL2_Config>
 800996e:	4603      	mov	r3, r0
 8009970:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009974:	e00f      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009976:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800997a:	3328      	adds	r3, #40	@ 0x28
 800997c:	2102      	movs	r1, #2
 800997e:	4618      	mov	r0, r3
 8009980:	f000 fde2 	bl	800a548 <RCCEx_PLL3_Config>
 8009984:	4603      	mov	r3, r0
 8009986:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800998a:	e004      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009992:	e000      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8009994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009996:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10b      	bne.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800999e:	4b4b      	ldr	r3, [pc, #300]	@ (8009acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80099a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099a2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80099a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80099ae:	4a47      	ldr	r2, [pc, #284]	@ (8009acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80099b0:	430b      	orrs	r3, r1
 80099b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80099b4:	e003      	b.n	80099be <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80099ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80099be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80099ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099cc:	2300      	movs	r3, #0
 80099ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80099d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80099d4:	460b      	mov	r3, r1
 80099d6:	4313      	orrs	r3, r2
 80099d8:	d03b      	beq.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80099da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80099e6:	d01f      	beq.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80099e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80099ec:	d818      	bhi.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80099ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099f2:	d003      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80099f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099f8:	d007      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80099fa:	e011      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099fc:	4b33      	ldr	r3, [pc, #204]	@ (8009acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80099fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a00:	4a32      	ldr	r2, [pc, #200]	@ (8009acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009a02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009a08:	e00f      	b.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a0e:	3328      	adds	r3, #40	@ 0x28
 8009a10:	2101      	movs	r1, #1
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 fd98 	bl	800a548 <RCCEx_PLL3_Config>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8009a1e:	e004      	b.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009a26:	e000      	b.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8009a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10b      	bne.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009a32:	4b26      	ldr	r3, [pc, #152]	@ (8009acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a36:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a42:	4a22      	ldr	r2, [pc, #136]	@ (8009acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009a44:	430b      	orrs	r3, r1
 8009a46:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a48:	e003      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a4e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009a5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a60:	2300      	movs	r3, #0
 8009a62:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a64:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	d034      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d003      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8009a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a7c:	d007      	beq.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8009a7e:	e011      	b.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a80:	4b12      	ldr	r3, [pc, #72]	@ (8009acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a84:	4a11      	ldr	r2, [pc, #68]	@ (8009acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009a8c:	e00e      	b.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a92:	3308      	adds	r3, #8
 8009a94:	2102      	movs	r1, #2
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 fca4 	bl	800a3e4 <RCCEx_PLL2_Config>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009aa2:	e003      	b.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10d      	bne.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009ab4:	4b05      	ldr	r3, [pc, #20]	@ (8009acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ab8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ac2:	4a02      	ldr	r2, [pc, #8]	@ (8009acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009ac4:	430b      	orrs	r3, r1
 8009ac6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ac8:	e006      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8009aca:	bf00      	nop
 8009acc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ad0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ad4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009ae4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009aea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009aee:	460b      	mov	r3, r1
 8009af0:	4313      	orrs	r3, r2
 8009af2:	d00c      	beq.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009af8:	3328      	adds	r3, #40	@ 0x28
 8009afa:	2102      	movs	r1, #2
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 fd23 	bl	800a548 <RCCEx_PLL3_Config>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d002      	beq.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009b1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b20:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009b24:	460b      	mov	r3, r1
 8009b26:	4313      	orrs	r3, r2
 8009b28:	d038      	beq.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b36:	d018      	beq.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8009b38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b3c:	d811      	bhi.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8009b3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b42:	d014      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8009b44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b48:	d80b      	bhi.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d011      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8009b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b52:	d106      	bne.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b54:	4bc3      	ldr	r3, [pc, #780]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b58:	4ac2      	ldr	r2, [pc, #776]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009b5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009b60:	e008      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009b68:	e004      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009b6a:	bf00      	nop
 8009b6c:	e002      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009b6e:	bf00      	nop
 8009b70:	e000      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10b      	bne.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b7c:	4bb9      	ldr	r3, [pc, #740]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b80:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b8c:	4ab5      	ldr	r2, [pc, #724]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009b8e:	430b      	orrs	r3, r1
 8009b90:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b92:	e003      	b.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b98:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009ba8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009baa:	2300      	movs	r3, #0
 8009bac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	d009      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009bb8:	4baa      	ldr	r3, [pc, #680]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bbc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009bc6:	4aa7      	ldr	r2, [pc, #668]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009bc8:	430b      	orrs	r3, r1
 8009bca:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009bd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8009bda:	2300      	movs	r3, #0
 8009bdc:	657b      	str	r3, [r7, #84]	@ 0x54
 8009bde:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009be2:	460b      	mov	r3, r1
 8009be4:	4313      	orrs	r3, r2
 8009be6:	d009      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009be8:	4b9e      	ldr	r3, [pc, #632]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bec:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bf6:	4a9b      	ldr	r2, [pc, #620]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009bf8:	430b      	orrs	r3, r1
 8009bfa:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8009bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009c08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c0e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009c12:	460b      	mov	r3, r1
 8009c14:	4313      	orrs	r3, r2
 8009c16:	d009      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8009c18:	4b92      	ldr	r3, [pc, #584]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c1c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8009c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c26:	4a8f      	ldr	r2, [pc, #572]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c28:	430b      	orrs	r3, r1
 8009c2a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c34:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009c38:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c3e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009c42:	460b      	mov	r3, r1
 8009c44:	4313      	orrs	r3, r2
 8009c46:	d00e      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009c48:	4b86      	ldr	r3, [pc, #536]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	4a85      	ldr	r2, [pc, #532]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009c52:	6113      	str	r3, [r2, #16]
 8009c54:	4b83      	ldr	r3, [pc, #524]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c56:	6919      	ldr	r1, [r3, #16]
 8009c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009c60:	4a80      	ldr	r2, [pc, #512]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c62:	430b      	orrs	r3, r1
 8009c64:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009c72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c74:	2300      	movs	r3, #0
 8009c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c78:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	d009      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009c82:	4b78      	ldr	r3, [pc, #480]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c86:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c90:	4a74      	ldr	r2, [pc, #464]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c92:	430b      	orrs	r3, r1
 8009c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009ca2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ca8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009cac:	460b      	mov	r3, r1
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	d00a      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009cb2:	4b6c      	ldr	r3, [pc, #432]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cb6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cc2:	4a68      	ldr	r2, [pc, #416]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009cc4:	430b      	orrs	r3, r1
 8009cc6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009cd4:	f003 0301 	and.w	r3, r3, #1
 8009cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cda:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	d011      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ce8:	3308      	adds	r3, #8
 8009cea:	2100      	movs	r1, #0
 8009cec:	4618      	mov	r0, r3
 8009cee:	f000 fb79 	bl	800a3e4 <RCCEx_PLL2_Config>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009cf8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d003      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	2100      	movs	r1, #0
 8009d12:	6239      	str	r1, [r7, #32]
 8009d14:	f003 0302 	and.w	r3, r3, #2
 8009d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d1a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4313      	orrs	r3, r2
 8009d22:	d011      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d28:	3308      	adds	r3, #8
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 fb59 	bl	800a3e4 <RCCEx_PLL2_Config>
 8009d32:	4603      	mov	r3, r0
 8009d34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009d38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d003      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d50:	2100      	movs	r1, #0
 8009d52:	61b9      	str	r1, [r7, #24]
 8009d54:	f003 0304 	and.w	r3, r3, #4
 8009d58:	61fb      	str	r3, [r7, #28]
 8009d5a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009d5e:	460b      	mov	r3, r1
 8009d60:	4313      	orrs	r3, r2
 8009d62:	d011      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d68:	3308      	adds	r3, #8
 8009d6a:	2102      	movs	r1, #2
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 fb39 	bl	800a3e4 <RCCEx_PLL2_Config>
 8009d72:	4603      	mov	r3, r0
 8009d74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009d78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d003      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d84:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d90:	2100      	movs	r1, #0
 8009d92:	6139      	str	r1, [r7, #16]
 8009d94:	f003 0308 	and.w	r3, r3, #8
 8009d98:	617b      	str	r3, [r7, #20]
 8009d9a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4313      	orrs	r3, r2
 8009da2:	d011      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009da8:	3328      	adds	r3, #40	@ 0x28
 8009daa:	2100      	movs	r1, #0
 8009dac:	4618      	mov	r0, r3
 8009dae:	f000 fbcb 	bl	800a548 <RCCEx_PLL3_Config>
 8009db2:	4603      	mov	r3, r0
 8009db4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8009db8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d003      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009dc4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	60b9      	str	r1, [r7, #8]
 8009dd4:	f003 0310 	and.w	r3, r3, #16
 8009dd8:	60fb      	str	r3, [r7, #12]
 8009dda:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009dde:	460b      	mov	r3, r1
 8009de0:	4313      	orrs	r3, r2
 8009de2:	d011      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009de8:	3328      	adds	r3, #40	@ 0x28
 8009dea:	2101      	movs	r1, #1
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 fbab 	bl	800a548 <RCCEx_PLL3_Config>
 8009df2:	4603      	mov	r3, r0
 8009df4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009df8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d003      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e10:	2100      	movs	r1, #0
 8009e12:	6039      	str	r1, [r7, #0]
 8009e14:	f003 0320 	and.w	r3, r3, #32
 8009e18:	607b      	str	r3, [r7, #4]
 8009e1a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009e1e:	460b      	mov	r3, r1
 8009e20:	4313      	orrs	r3, r2
 8009e22:	d011      	beq.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e28:	3328      	adds	r3, #40	@ 0x28
 8009e2a:	2102      	movs	r1, #2
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 fb8b 	bl	800a548 <RCCEx_PLL3_Config>
 8009e32:	4603      	mov	r3, r0
 8009e34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009e38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d003      	beq.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8009e48:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d101      	bne.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	e000      	b.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e62:	bf00      	nop
 8009e64:	58024400 	.word	0x58024400

08009e68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009e6c:	f7fe fde2 	bl	8008a34 <HAL_RCC_GetHCLKFreq>
 8009e70:	4602      	mov	r2, r0
 8009e72:	4b06      	ldr	r3, [pc, #24]	@ (8009e8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009e74:	6a1b      	ldr	r3, [r3, #32]
 8009e76:	091b      	lsrs	r3, r3, #4
 8009e78:	f003 0307 	and.w	r3, r3, #7
 8009e7c:	4904      	ldr	r1, [pc, #16]	@ (8009e90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009e7e:	5ccb      	ldrb	r3, [r1, r3]
 8009e80:	f003 031f 	and.w	r3, r3, #31
 8009e84:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	58024400 	.word	0x58024400
 8009e90:	0801159c 	.word	0x0801159c

08009e94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b089      	sub	sp, #36	@ 0x24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e9c:	4ba1      	ldr	r3, [pc, #644]	@ (800a124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea0:	f003 0303 	and.w	r3, r3, #3
 8009ea4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009ea6:	4b9f      	ldr	r3, [pc, #636]	@ (800a124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eaa:	0b1b      	lsrs	r3, r3, #12
 8009eac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009eb0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009eb2:	4b9c      	ldr	r3, [pc, #624]	@ (800a124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb6:	091b      	lsrs	r3, r3, #4
 8009eb8:	f003 0301 	and.w	r3, r3, #1
 8009ebc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009ebe:	4b99      	ldr	r3, [pc, #612]	@ (800a124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ec2:	08db      	lsrs	r3, r3, #3
 8009ec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	fb02 f303 	mul.w	r3, r2, r3
 8009ece:	ee07 3a90 	vmov	s15, r3
 8009ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ed6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f000 8111 	beq.w	800a104 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	f000 8083 	beq.w	8009ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	f200 80a1 	bhi.w	800a034 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d003      	beq.n	8009f00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d056      	beq.n	8009fac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009efe:	e099      	b.n	800a034 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f00:	4b88      	ldr	r3, [pc, #544]	@ (800a124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f003 0320 	and.w	r3, r3, #32
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d02d      	beq.n	8009f68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f0c:	4b85      	ldr	r3, [pc, #532]	@ (800a124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	08db      	lsrs	r3, r3, #3
 8009f12:	f003 0303 	and.w	r3, r3, #3
 8009f16:	4a84      	ldr	r2, [pc, #528]	@ (800a128 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009f18:	fa22 f303 	lsr.w	r3, r2, r3
 8009f1c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	ee07 3a90 	vmov	s15, r3
 8009f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	ee07 3a90 	vmov	s15, r3
 8009f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f36:	4b7b      	ldr	r3, [pc, #492]	@ (800a124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f3e:	ee07 3a90 	vmov	s15, r3
 8009f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a12c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009f66:	e087      	b.n	800a078 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	ee07 3a90 	vmov	s15, r3
 8009f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a130 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f7a:	4b6a      	ldr	r3, [pc, #424]	@ (800a124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f82:	ee07 3a90 	vmov	s15, r3
 8009f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a12c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009faa:	e065      	b.n	800a078 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	ee07 3a90 	vmov	s15, r3
 8009fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fb6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a134 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fbe:	4b59      	ldr	r3, [pc, #356]	@ (800a124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fc6:	ee07 3a90 	vmov	s15, r3
 8009fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fd2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a12c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fee:	e043      	b.n	800a078 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	ee07 3a90 	vmov	s15, r3
 8009ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a138 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a002:	4b48      	ldr	r3, [pc, #288]	@ (800a124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a00a:	ee07 3a90 	vmov	s15, r3
 800a00e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a012:	ed97 6a03 	vldr	s12, [r7, #12]
 800a016:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a12c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a01a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a01e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a02a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a02e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a032:	e021      	b.n	800a078 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	ee07 3a90 	vmov	s15, r3
 800a03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a134 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a046:	4b37      	ldr	r3, [pc, #220]	@ (800a124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a04e:	ee07 3a90 	vmov	s15, r3
 800a052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a056:	ed97 6a03 	vldr	s12, [r7, #12]
 800a05a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a12c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a05e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a06a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a06e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a076:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a078:	4b2a      	ldr	r3, [pc, #168]	@ (800a124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a07a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a07c:	0a5b      	lsrs	r3, r3, #9
 800a07e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a082:	ee07 3a90 	vmov	s15, r3
 800a086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a08a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a08e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a092:	edd7 6a07 	vldr	s13, [r7, #28]
 800a096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a09a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a09e:	ee17 2a90 	vmov	r2, s15
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a0a6:	4b1f      	ldr	r3, [pc, #124]	@ (800a124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0aa:	0c1b      	lsrs	r3, r3, #16
 800a0ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0b0:	ee07 3a90 	vmov	s15, r3
 800a0b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0cc:	ee17 2a90 	vmov	r2, s15
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a0d4:	4b13      	ldr	r3, [pc, #76]	@ (800a124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d8:	0e1b      	lsrs	r3, r3, #24
 800a0da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0de:	ee07 3a90 	vmov	s15, r3
 800a0e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0fa:	ee17 2a90 	vmov	r2, s15
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a102:	e008      	b.n	800a116 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	609a      	str	r2, [r3, #8]
}
 800a116:	bf00      	nop
 800a118:	3724      	adds	r7, #36	@ 0x24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	58024400 	.word	0x58024400
 800a128:	03d09000 	.word	0x03d09000
 800a12c:	46000000 	.word	0x46000000
 800a130:	4c742400 	.word	0x4c742400
 800a134:	4a742400 	.word	0x4a742400
 800a138:	4bb71b00 	.word	0x4bb71b00

0800a13c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b089      	sub	sp, #36	@ 0x24
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a144:	4ba1      	ldr	r3, [pc, #644]	@ (800a3cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a148:	f003 0303 	and.w	r3, r3, #3
 800a14c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a14e:	4b9f      	ldr	r3, [pc, #636]	@ (800a3cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a152:	0d1b      	lsrs	r3, r3, #20
 800a154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a158:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a15a:	4b9c      	ldr	r3, [pc, #624]	@ (800a3cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a15c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a15e:	0a1b      	lsrs	r3, r3, #8
 800a160:	f003 0301 	and.w	r3, r3, #1
 800a164:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a166:	4b99      	ldr	r3, [pc, #612]	@ (800a3cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a16a:	08db      	lsrs	r3, r3, #3
 800a16c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	fb02 f303 	mul.w	r3, r2, r3
 800a176:	ee07 3a90 	vmov	s15, r3
 800a17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a17e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	2b00      	cmp	r3, #0
 800a186:	f000 8111 	beq.w	800a3ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	f000 8083 	beq.w	800a298 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	2b02      	cmp	r3, #2
 800a196:	f200 80a1 	bhi.w	800a2dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d003      	beq.n	800a1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d056      	beq.n	800a254 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a1a6:	e099      	b.n	800a2dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1a8:	4b88      	ldr	r3, [pc, #544]	@ (800a3cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 0320 	and.w	r3, r3, #32
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d02d      	beq.n	800a210 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1b4:	4b85      	ldr	r3, [pc, #532]	@ (800a3cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	08db      	lsrs	r3, r3, #3
 800a1ba:	f003 0303 	and.w	r3, r3, #3
 800a1be:	4a84      	ldr	r2, [pc, #528]	@ (800a3d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a1c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	ee07 3a90 	vmov	s15, r3
 800a1cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	ee07 3a90 	vmov	s15, r3
 800a1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1de:	4b7b      	ldr	r3, [pc, #492]	@ (800a3cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1e6:	ee07 3a90 	vmov	s15, r3
 800a1ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a3d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a20a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a20e:	e087      	b.n	800a320 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	ee07 3a90 	vmov	s15, r3
 800a216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a21a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a21e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a222:	4b6a      	ldr	r3, [pc, #424]	@ (800a3cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a22a:	ee07 3a90 	vmov	s15, r3
 800a22e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a232:	ed97 6a03 	vldr	s12, [r7, #12]
 800a236:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a3d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a23a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a23e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a24a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a24e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a252:	e065      	b.n	800a320 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	ee07 3a90 	vmov	s15, r3
 800a25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a25e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a3dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a266:	4b59      	ldr	r3, [pc, #356]	@ (800a3cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a26e:	ee07 3a90 	vmov	s15, r3
 800a272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a276:	ed97 6a03 	vldr	s12, [r7, #12]
 800a27a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a3d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a27e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a28a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a28e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a296:	e043      	b.n	800a320 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	ee07 3a90 	vmov	s15, r3
 800a29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a3e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a2a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2aa:	4b48      	ldr	r3, [pc, #288]	@ (800a3cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b2:	ee07 3a90 	vmov	s15, r3
 800a2b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a3d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2da:	e021      	b.n	800a320 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	ee07 3a90 	vmov	s15, r3
 800a2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a3dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a2ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ee:	4b37      	ldr	r3, [pc, #220]	@ (800a3cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2f6:	ee07 3a90 	vmov	s15, r3
 800a2fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800a302:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a3d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a30a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a30e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a31a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a31e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a320:	4b2a      	ldr	r3, [pc, #168]	@ (800a3cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a324:	0a5b      	lsrs	r3, r3, #9
 800a326:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a32a:	ee07 3a90 	vmov	s15, r3
 800a32e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a332:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a336:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a33a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a33e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a346:	ee17 2a90 	vmov	r2, s15
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a34e:	4b1f      	ldr	r3, [pc, #124]	@ (800a3cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a352:	0c1b      	lsrs	r3, r3, #16
 800a354:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a358:	ee07 3a90 	vmov	s15, r3
 800a35c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a360:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a364:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a368:	edd7 6a07 	vldr	s13, [r7, #28]
 800a36c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a374:	ee17 2a90 	vmov	r2, s15
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a37c:	4b13      	ldr	r3, [pc, #76]	@ (800a3cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a37e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a380:	0e1b      	lsrs	r3, r3, #24
 800a382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a386:	ee07 3a90 	vmov	s15, r3
 800a38a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a38e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a392:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a396:	edd7 6a07 	vldr	s13, [r7, #28]
 800a39a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a39e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3a2:	ee17 2a90 	vmov	r2, s15
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a3aa:	e008      	b.n	800a3be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	609a      	str	r2, [r3, #8]
}
 800a3be:	bf00      	nop
 800a3c0:	3724      	adds	r7, #36	@ 0x24
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	58024400 	.word	0x58024400
 800a3d0:	03d09000 	.word	0x03d09000
 800a3d4:	46000000 	.word	0x46000000
 800a3d8:	4c742400 	.word	0x4c742400
 800a3dc:	4a742400 	.word	0x4a742400
 800a3e0:	4bb71b00 	.word	0x4bb71b00

0800a3e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3f2:	4b53      	ldr	r3, [pc, #332]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a3f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f6:	f003 0303 	and.w	r3, r3, #3
 800a3fa:	2b03      	cmp	r3, #3
 800a3fc:	d101      	bne.n	800a402 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e099      	b.n	800a536 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a402:	4b4f      	ldr	r3, [pc, #316]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a4e      	ldr	r2, [pc, #312]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a408:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a40c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a40e:	f7f9 ff2f 	bl	8004270 <HAL_GetTick>
 800a412:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a414:	e008      	b.n	800a428 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a416:	f7f9 ff2b 	bl	8004270 <HAL_GetTick>
 800a41a:	4602      	mov	r2, r0
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	1ad3      	subs	r3, r2, r3
 800a420:	2b02      	cmp	r3, #2
 800a422:	d901      	bls.n	800a428 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a424:	2303      	movs	r3, #3
 800a426:	e086      	b.n	800a536 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a428:	4b45      	ldr	r3, [pc, #276]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1f0      	bne.n	800a416 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a434:	4b42      	ldr	r3, [pc, #264]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a438:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	031b      	lsls	r3, r3, #12
 800a442:	493f      	ldr	r1, [pc, #252]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a444:	4313      	orrs	r3, r2
 800a446:	628b      	str	r3, [r1, #40]	@ 0x28
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	3b01      	subs	r3, #1
 800a44e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	3b01      	subs	r3, #1
 800a458:	025b      	lsls	r3, r3, #9
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	431a      	orrs	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	3b01      	subs	r3, #1
 800a464:	041b      	lsls	r3, r3, #16
 800a466:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a46a:	431a      	orrs	r2, r3
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	3b01      	subs	r3, #1
 800a472:	061b      	lsls	r3, r3, #24
 800a474:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a478:	4931      	ldr	r1, [pc, #196]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a47a:	4313      	orrs	r3, r2
 800a47c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a47e:	4b30      	ldr	r3, [pc, #192]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a482:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	492d      	ldr	r1, [pc, #180]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a48c:	4313      	orrs	r3, r2
 800a48e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a490:	4b2b      	ldr	r3, [pc, #172]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a494:	f023 0220 	bic.w	r2, r3, #32
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	4928      	ldr	r1, [pc, #160]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a4a2:	4b27      	ldr	r3, [pc, #156]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4a6:	4a26      	ldr	r2, [pc, #152]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a4a8:	f023 0310 	bic.w	r3, r3, #16
 800a4ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a4ae:	4b24      	ldr	r3, [pc, #144]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a4b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a4b2:	4b24      	ldr	r3, [pc, #144]	@ (800a544 <RCCEx_PLL2_Config+0x160>)
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	69d2      	ldr	r2, [r2, #28]
 800a4ba:	00d2      	lsls	r2, r2, #3
 800a4bc:	4920      	ldr	r1, [pc, #128]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a4c2:	4b1f      	ldr	r3, [pc, #124]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a4c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4c6:	4a1e      	ldr	r2, [pc, #120]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a4c8:	f043 0310 	orr.w	r3, r3, #16
 800a4cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d106      	bne.n	800a4e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a4d4:	4b1a      	ldr	r3, [pc, #104]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4d8:	4a19      	ldr	r2, [pc, #100]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a4da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a4de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4e0:	e00f      	b.n	800a502 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d106      	bne.n	800a4f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a4e8:	4b15      	ldr	r3, [pc, #84]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a4ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ec:	4a14      	ldr	r2, [pc, #80]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a4ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4f4:	e005      	b.n	800a502 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a4f6:	4b12      	ldr	r3, [pc, #72]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4fa:	4a11      	ldr	r2, [pc, #68]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a4fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a500:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a502:	4b0f      	ldr	r3, [pc, #60]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a0e      	ldr	r2, [pc, #56]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a508:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a50c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a50e:	f7f9 feaf 	bl	8004270 <HAL_GetTick>
 800a512:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a514:	e008      	b.n	800a528 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a516:	f7f9 feab 	bl	8004270 <HAL_GetTick>
 800a51a:	4602      	mov	r2, r0
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	1ad3      	subs	r3, r2, r3
 800a520:	2b02      	cmp	r3, #2
 800a522:	d901      	bls.n	800a528 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a524:	2303      	movs	r3, #3
 800a526:	e006      	b.n	800a536 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a528:	4b05      	ldr	r3, [pc, #20]	@ (800a540 <RCCEx_PLL2_Config+0x15c>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a530:	2b00      	cmp	r3, #0
 800a532:	d0f0      	beq.n	800a516 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a534:	7bfb      	ldrb	r3, [r7, #15]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	58024400 	.word	0x58024400
 800a544:	ffff0007 	.word	0xffff0007

0800a548 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a552:	2300      	movs	r3, #0
 800a554:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a556:	4b53      	ldr	r3, [pc, #332]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a55a:	f003 0303 	and.w	r3, r3, #3
 800a55e:	2b03      	cmp	r3, #3
 800a560:	d101      	bne.n	800a566 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	e099      	b.n	800a69a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a566:	4b4f      	ldr	r3, [pc, #316]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a4e      	ldr	r2, [pc, #312]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a56c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a570:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a572:	f7f9 fe7d 	bl	8004270 <HAL_GetTick>
 800a576:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a578:	e008      	b.n	800a58c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a57a:	f7f9 fe79 	bl	8004270 <HAL_GetTick>
 800a57e:	4602      	mov	r2, r0
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	1ad3      	subs	r3, r2, r3
 800a584:	2b02      	cmp	r3, #2
 800a586:	d901      	bls.n	800a58c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a588:	2303      	movs	r3, #3
 800a58a:	e086      	b.n	800a69a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a58c:	4b45      	ldr	r3, [pc, #276]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1f0      	bne.n	800a57a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a598:	4b42      	ldr	r3, [pc, #264]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a59a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a59c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	051b      	lsls	r3, r3, #20
 800a5a6:	493f      	ldr	r1, [pc, #252]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	628b      	str	r3, [r1, #40]	@ 0x28
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	025b      	lsls	r3, r3, #9
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	431a      	orrs	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	041b      	lsls	r3, r3, #16
 800a5ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a5ce:	431a      	orrs	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	691b      	ldr	r3, [r3, #16]
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	061b      	lsls	r3, r3, #24
 800a5d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a5dc:	4931      	ldr	r1, [pc, #196]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a5e2:	4b30      	ldr	r3, [pc, #192]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a5e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	492d      	ldr	r1, [pc, #180]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a5f4:	4b2b      	ldr	r3, [pc, #172]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a5f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	699b      	ldr	r3, [r3, #24]
 800a600:	4928      	ldr	r1, [pc, #160]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a602:	4313      	orrs	r3, r2
 800a604:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a606:	4b27      	ldr	r3, [pc, #156]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a60a:	4a26      	ldr	r2, [pc, #152]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a60c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a610:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a612:	4b24      	ldr	r3, [pc, #144]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a614:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a616:	4b24      	ldr	r3, [pc, #144]	@ (800a6a8 <RCCEx_PLL3_Config+0x160>)
 800a618:	4013      	ands	r3, r2
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	69d2      	ldr	r2, [r2, #28]
 800a61e:	00d2      	lsls	r2, r2, #3
 800a620:	4920      	ldr	r1, [pc, #128]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a622:	4313      	orrs	r3, r2
 800a624:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a626:	4b1f      	ldr	r3, [pc, #124]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a62a:	4a1e      	ldr	r2, [pc, #120]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a62c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a630:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d106      	bne.n	800a646 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a638:	4b1a      	ldr	r3, [pc, #104]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a63a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a63c:	4a19      	ldr	r2, [pc, #100]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a63e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a642:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a644:	e00f      	b.n	800a666 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d106      	bne.n	800a65a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a64c:	4b15      	ldr	r3, [pc, #84]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a64e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a650:	4a14      	ldr	r2, [pc, #80]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a652:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a656:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a658:	e005      	b.n	800a666 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a65a:	4b12      	ldr	r3, [pc, #72]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a65c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a65e:	4a11      	ldr	r2, [pc, #68]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a660:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a664:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a666:	4b0f      	ldr	r3, [pc, #60]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a0e      	ldr	r2, [pc, #56]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a66c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a672:	f7f9 fdfd 	bl	8004270 <HAL_GetTick>
 800a676:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a678:	e008      	b.n	800a68c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a67a:	f7f9 fdf9 	bl	8004270 <HAL_GetTick>
 800a67e:	4602      	mov	r2, r0
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	2b02      	cmp	r3, #2
 800a686:	d901      	bls.n	800a68c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a688:	2303      	movs	r3, #3
 800a68a:	e006      	b.n	800a69a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a68c:	4b05      	ldr	r3, [pc, #20]	@ (800a6a4 <RCCEx_PLL3_Config+0x15c>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a694:	2b00      	cmp	r3, #0
 800a696:	d0f0      	beq.n	800a67a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a698:	7bfb      	ldrb	r3, [r7, #15]
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	58024400 	.word	0x58024400
 800a6a8:	ffff0007 	.word	0xffff0007

0800a6ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a6ac:	b084      	sub	sp, #16
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b084      	sub	sp, #16
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	f107 001c 	add.w	r0, r7, #28
 800a6ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a6be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d121      	bne.n	800a70a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	68da      	ldr	r2, [r3, #12]
 800a6d6:	4b2c      	ldr	r3, [pc, #176]	@ (800a788 <USB_CoreInit+0xdc>)
 800a6d8:	4013      	ands	r3, r2
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a6ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d105      	bne.n	800a6fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f9ec 	bl	800aadc <USB_CoreReset>
 800a704:	4603      	mov	r3, r0
 800a706:	73fb      	strb	r3, [r7, #15]
 800a708:	e01b      	b.n	800a742 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 f9e0 	bl	800aadc <USB_CoreReset>
 800a71c:	4603      	mov	r3, r0
 800a71e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a720:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a724:	2b00      	cmp	r3, #0
 800a726:	d106      	bne.n	800a736 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a72c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	639a      	str	r2, [r3, #56]	@ 0x38
 800a734:	e005      	b.n	800a742 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a73a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a742:	7fbb      	ldrb	r3, [r7, #30]
 800a744:	2b01      	cmp	r3, #1
 800a746:	d116      	bne.n	800a776 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a756:	4b0d      	ldr	r3, [pc, #52]	@ (800a78c <USB_CoreInit+0xe0>)
 800a758:	4313      	orrs	r3, r2
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	f043 0206 	orr.w	r2, r3, #6
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	f043 0220 	orr.w	r2, r3, #32
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a776:	7bfb      	ldrb	r3, [r7, #15]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a782:	b004      	add	sp, #16
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	ffbdffbf 	.word	0xffbdffbf
 800a78c:	03ee0000 	.word	0x03ee0000

0800a790 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	f043 0201 	orr.w	r2, r3, #1
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	370c      	adds	r7, #12
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b083      	sub	sp, #12
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	f023 0201 	bic.w	r2, r3, #1
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a7f0:	78fb      	ldrb	r3, [r7, #3]
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d115      	bne.n	800a822 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a802:	200a      	movs	r0, #10
 800a804:	f7f9 fd40 	bl	8004288 <HAL_Delay>
      ms += 10U;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	330a      	adds	r3, #10
 800a80c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f956 	bl	800aac0 <USB_GetMode>
 800a814:	4603      	mov	r3, r0
 800a816:	2b01      	cmp	r3, #1
 800a818:	d01e      	beq.n	800a858 <USB_SetCurrentMode+0x84>
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2bc7      	cmp	r3, #199	@ 0xc7
 800a81e:	d9f0      	bls.n	800a802 <USB_SetCurrentMode+0x2e>
 800a820:	e01a      	b.n	800a858 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a822:	78fb      	ldrb	r3, [r7, #3]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d115      	bne.n	800a854 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a834:	200a      	movs	r0, #10
 800a836:	f7f9 fd27 	bl	8004288 <HAL_Delay>
      ms += 10U;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	330a      	adds	r3, #10
 800a83e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 f93d 	bl	800aac0 <USB_GetMode>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d005      	beq.n	800a858 <USB_SetCurrentMode+0x84>
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2bc7      	cmp	r3, #199	@ 0xc7
 800a850:	d9f0      	bls.n	800a834 <USB_SetCurrentMode+0x60>
 800a852:	e001      	b.n	800a858 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	e005      	b.n	800a864 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2bc8      	cmp	r3, #200	@ 0xc8
 800a85c:	d101      	bne.n	800a862 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	e000      	b.n	800a864 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a876:	2300      	movs	r3, #0
 800a878:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	3301      	adds	r3, #1
 800a87e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a886:	d901      	bls.n	800a88c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a888:	2303      	movs	r3, #3
 800a88a:	e01b      	b.n	800a8c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	2b00      	cmp	r3, #0
 800a892:	daf2      	bge.n	800a87a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a894:	2300      	movs	r3, #0
 800a896:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	019b      	lsls	r3, r3, #6
 800a89c:	f043 0220 	orr.w	r2, r3, #32
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8b0:	d901      	bls.n	800a8b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	e006      	b.n	800a8c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	f003 0320 	and.w	r3, r3, #32
 800a8be:	2b20      	cmp	r3, #32
 800a8c0:	d0f0      	beq.n	800a8a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8e8:	d901      	bls.n	800a8ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	e018      	b.n	800a920 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	daf2      	bge.n	800a8dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2210      	movs	r2, #16
 800a8fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	3301      	adds	r3, #1
 800a904:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a90c:	d901      	bls.n	800a912 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a90e:	2303      	movs	r3, #3
 800a910:	e006      	b.n	800a920 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	691b      	ldr	r3, [r3, #16]
 800a916:	f003 0310 	and.w	r3, r3, #16
 800a91a:	2b10      	cmp	r3, #16
 800a91c:	d0f0      	beq.n	800a900 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3714      	adds	r7, #20
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b089      	sub	sp, #36	@ 0x24
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	4611      	mov	r1, r2
 800a938:	461a      	mov	r2, r3
 800a93a:	460b      	mov	r3, r1
 800a93c:	71fb      	strb	r3, [r7, #7]
 800a93e:	4613      	mov	r3, r2
 800a940:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a94a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d123      	bne.n	800a99a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a952:	88bb      	ldrh	r3, [r7, #4]
 800a954:	3303      	adds	r3, #3
 800a956:	089b      	lsrs	r3, r3, #2
 800a958:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a95a:	2300      	movs	r3, #0
 800a95c:	61bb      	str	r3, [r7, #24]
 800a95e:	e018      	b.n	800a992 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a960:	79fb      	ldrb	r3, [r7, #7]
 800a962:	031a      	lsls	r2, r3, #12
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	4413      	add	r3, r2
 800a968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a96c:	461a      	mov	r2, r3
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	3301      	adds	r3, #1
 800a978:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	3301      	adds	r3, #1
 800a97e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	3301      	adds	r3, #1
 800a984:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	3301      	adds	r3, #1
 800a98a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	3301      	adds	r3, #1
 800a990:	61bb      	str	r3, [r7, #24]
 800a992:	69ba      	ldr	r2, [r7, #24]
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	429a      	cmp	r2, r3
 800a998:	d3e2      	bcc.n	800a960 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a99a:	2300      	movs	r3, #0
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3724      	adds	r7, #36	@ 0x24
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b08b      	sub	sp, #44	@ 0x2c
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a9be:	88fb      	ldrh	r3, [r7, #6]
 800a9c0:	089b      	lsrs	r3, r3, #2
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a9c6:	88fb      	ldrh	r3, [r7, #6]
 800a9c8:	f003 0303 	and.w	r3, r3, #3
 800a9cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	623b      	str	r3, [r7, #32]
 800a9d2:	e014      	b.n	800a9fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9de:	601a      	str	r2, [r3, #0]
    pDest++;
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	623b      	str	r3, [r7, #32]
 800a9fe:	6a3a      	ldr	r2, [r7, #32]
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d3e6      	bcc.n	800a9d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa06:	8bfb      	ldrh	r3, [r7, #30]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d01e      	beq.n	800aa4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa16:	461a      	mov	r2, r3
 800aa18:	f107 0310 	add.w	r3, r7, #16
 800aa1c:	6812      	ldr	r2, [r2, #0]
 800aa1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	00db      	lsls	r3, r3, #3
 800aa28:	fa22 f303 	lsr.w	r3, r2, r3
 800aa2c:	b2da      	uxtb	r2, r3
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa30:	701a      	strb	r2, [r3, #0]
      i++;
 800aa32:	6a3b      	ldr	r3, [r7, #32]
 800aa34:	3301      	adds	r3, #1
 800aa36:	623b      	str	r3, [r7, #32]
      pDest++;
 800aa38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800aa3e:	8bfb      	ldrh	r3, [r7, #30]
 800aa40:	3b01      	subs	r3, #1
 800aa42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aa44:	8bfb      	ldrh	r3, [r7, #30]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d1ea      	bne.n	800aa20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	372c      	adds	r7, #44	@ 0x2c
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	695b      	ldr	r3, [r3, #20]
 800aa64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	699b      	ldr	r3, [r3, #24]
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	4013      	ands	r3, r2
 800aa6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aa70:	68fb      	ldr	r3, [r7, #12]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3714      	adds	r7, #20
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr

0800aa7e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800aa7e:	b480      	push	{r7}
 800aa80:	b085      	sub	sp, #20
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	460b      	mov	r3, r1
 800aa88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800aa8e:	78fb      	ldrb	r3, [r7, #3]
 800aa90:	015a      	lsls	r2, r3, #5
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	4413      	add	r3, r2
 800aa96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800aa9e:	78fb      	ldrb	r3, [r7, #3]
 800aaa0:	015a      	lsls	r2, r3, #5
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	4013      	ands	r3, r2
 800aab0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aab2:	68bb      	ldr	r3, [r7, #8]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3714      	adds	r7, #20
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	695b      	ldr	r3, [r3, #20]
 800aacc:	f003 0301 	and.w	r3, r3, #1
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aae4:	2300      	movs	r3, #0
 800aae6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	3301      	adds	r3, #1
 800aaec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aaf4:	d901      	bls.n	800aafa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e01b      	b.n	800ab32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	daf2      	bge.n	800aae8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab02:	2300      	movs	r3, #0
 800ab04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	f043 0201 	orr.w	r2, r3, #1
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	3301      	adds	r3, #1
 800ab16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab1e:	d901      	bls.n	800ab24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab20:	2303      	movs	r3, #3
 800ab22:	e006      	b.n	800ab32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	f003 0301 	and.w	r3, r3, #1
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d0f0      	beq.n	800ab12 <USB_CoreReset+0x36>

  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
	...

0800ab40 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ab40:	b084      	sub	sp, #16
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b086      	sub	sp, #24
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ab4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab60:	461a      	mov	r2, r3
 800ab62:	2300      	movs	r3, #0
 800ab64:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab6a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab76:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	639a      	str	r2, [r3, #56]	@ 0x38


  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d119      	bne.n	800abbe <USB_HostInit+0x7e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ab8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d10a      	bne.n	800aba8 <USB_HostInit+0x68>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aba0:	f043 0304 	orr.w	r3, r3, #4
 800aba4:	6013      	str	r3, [r2, #0]
 800aba6:	e014      	b.n	800abd2 <USB_HostInit+0x92>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800abb6:	f023 0304 	bic.w	r3, r3, #4
 800abba:	6013      	str	r3, [r2, #0]
 800abbc:	e009      	b.n	800abd2 <USB_HostInit+0x92>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800abcc:	f023 0304 	bic.w	r3, r3, #4
 800abd0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800abd2:	2110      	movs	r1, #16
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f7ff fe49 	bl	800a86c <USB_FlushTxFifo>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d001      	beq.n	800abe4 <USB_HostInit+0xa4>
  {
    ret = HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f7ff fe73 	bl	800a8d0 <USB_FlushRxFifo>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d001      	beq.n	800abf4 <USB_HostInit+0xb4>
  {
    ret = HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800abf4:	2300      	movs	r3, #0
 800abf6:	613b      	str	r3, [r7, #16]
 800abf8:	e015      	b.n	800ac26 <USB_HostInit+0xe6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	015a      	lsls	r2, r3, #5
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	4413      	add	r3, r2
 800ac02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac06:	461a      	mov	r2, r3
 800ac08:	f04f 33ff 	mov.w	r3, #4294967295
 800ac0c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	015a      	lsls	r2, r3, #5
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	4413      	add	r3, r2
 800ac16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	3301      	adds	r3, #1
 800ac24:	613b      	str	r3, [r7, #16]
 800ac26:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d3e3      	bcc.n	800abfa <USB_HostInit+0xba>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac3e:	615a      	str	r2, [r3, #20]
  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x200U;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac46:	625a      	str	r2, [r3, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a0f      	ldr	r2, [pc, #60]	@ (800ac88 <USB_HostInit+0x148>)
 800ac4c:	629a      	str	r2, [r3, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4a0e      	ldr	r2, [pc, #56]	@ (800ac8c <USB_HostInit+0x14c>)
 800ac52:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ac56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d105      	bne.n	800ac6a <USB_HostInit+0x12a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	f043 0210 	orr.w	r2, r3, #16
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	699a      	ldr	r2, [r3, #24]
 800ac6e:	4b08      	ldr	r3, [pc, #32]	@ (800ac90 <USB_HostInit+0x150>)
 800ac70:	4313      	orrs	r3, r2
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800ac76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3718      	adds	r7, #24
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac82:	b004      	add	sp, #16
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	01000200 	.word	0x01000200
 800ac8c:	00e00300 	.word	0x00e00300
 800ac90:	a3200008 	.word	0xa3200008

0800ac94 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800acb2:	f023 0303 	bic.w	r3, r3, #3
 800acb6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	78fb      	ldrb	r3, [r7, #3]
 800acc2:	f003 0303 	and.w	r3, r3, #3
 800acc6:	68f9      	ldr	r1, [r7, #12]
 800acc8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800accc:	4313      	orrs	r3, r2
 800acce:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800acd0:	78fb      	ldrb	r3, [r7, #3]
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d107      	bne.n	800ace6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800acdc:	461a      	mov	r2, r3
 800acde:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ace2:	6053      	str	r3, [r2, #4]
 800ace4:	e00c      	b.n	800ad00 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800ace6:	78fb      	ldrb	r3, [r7, #3]
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d107      	bne.n	800acfc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800acf2:	461a      	mov	r2, r3
 800acf4:	f241 7370 	movw	r3, #6000	@ 0x1770
 800acf8:	6053      	str	r3, [r2, #4]
 800acfa:	e001      	b.n	800ad00 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	e000      	b.n	800ad02 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b084      	sub	sp, #16
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800ad2e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ad38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad3c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ad3e:	2064      	movs	r0, #100	@ 0x64
 800ad40:	f7f9 faa2 	bl	8004288 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ad4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad50:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800ad52:	200a      	movs	r0, #10
 800ad54:	f7f9 fa98 	bl	8004288 <HAL_Delay>

  return HAL_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ad62:	b480      	push	{r7}
 800ad64:	b085      	sub	sp, #20
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ad72:	2300      	movs	r3, #0
 800ad74:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800ad86:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d109      	bne.n	800ada6 <USB_DriveVbus+0x44>
 800ad92:	78fb      	ldrb	r3, [r7, #3]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d106      	bne.n	800ada6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ada0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ada4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800adac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adb0:	d109      	bne.n	800adc6 <USB_DriveVbus+0x64>
 800adb2:	78fb      	ldrb	r3, [r7, #3]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d106      	bne.n	800adc6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800adc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800adc4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3714      	adds	r7, #20
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ade0:	2300      	movs	r3, #0
 800ade2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	0c5b      	lsrs	r3, r3, #17
 800adf2:	f003 0303 	and.w	r3, r3, #3
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3714      	adds	r7, #20
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr

0800ae02 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800ae02:	b480      	push	{r7}
 800ae04:	b085      	sub	sp, #20
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	b29b      	uxth	r3, r3
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b088      	sub	sp, #32
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	4608      	mov	r0, r1
 800ae2e:	4611      	mov	r1, r2
 800ae30:	461a      	mov	r2, r3
 800ae32:	4603      	mov	r3, r0
 800ae34:	70fb      	strb	r3, [r7, #3]
 800ae36:	460b      	mov	r3, r1
 800ae38:	70bb      	strb	r3, [r7, #2]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800ae46:	78fb      	ldrb	r3, [r7, #3]
 800ae48:	015a      	lsls	r2, r3, #5
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae52:	461a      	mov	r2, r3
 800ae54:	f04f 33ff 	mov.w	r3, #4294967295
 800ae58:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ae5a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ae5e:	2b03      	cmp	r3, #3
 800ae60:	d878      	bhi.n	800af54 <USB_HC_Init+0x130>
 800ae62:	a201      	add	r2, pc, #4	@ (adr r2, 800ae68 <USB_HC_Init+0x44>)
 800ae64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae68:	0800ae79 	.word	0x0800ae79
 800ae6c:	0800af17 	.word	0x0800af17
 800ae70:	0800ae79 	.word	0x0800ae79
 800ae74:	0800aed9 	.word	0x0800aed9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ae78:	78fb      	ldrb	r3, [r7, #3]
 800ae7a:	015a      	lsls	r2, r3, #5
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	4413      	add	r3, r2
 800ae80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae84:	461a      	mov	r2, r3
 800ae86:	f240 439d 	movw	r3, #1181	@ 0x49d
 800ae8a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ae8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	da10      	bge.n	800aeb6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ae94:	78fb      	ldrb	r3, [r7, #3]
 800ae96:	015a      	lsls	r2, r3, #5
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	78fa      	ldrb	r2, [r7, #3]
 800aea4:	0151      	lsls	r1, r2, #5
 800aea6:	693a      	ldr	r2, [r7, #16]
 800aea8:	440a      	add	r2, r1
 800aeaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aeae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aeb2:	60d3      	str	r3, [r2, #12]
      else
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                               USB_OTG_HCINTMSK_ACKM;
      }
      break;
 800aeb4:	e054      	b.n	800af60 <USB_HC_Init+0x13c>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800aeb6:	78fb      	ldrb	r3, [r7, #3]
 800aeb8:	015a      	lsls	r2, r3, #5
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	4413      	add	r3, r2
 800aebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	78fa      	ldrb	r2, [r7, #3]
 800aec6:	0151      	lsls	r1, r2, #5
 800aec8:	693a      	ldr	r2, [r7, #16]
 800aeca:	440a      	add	r2, r1
 800aecc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aed0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800aed4:	60d3      	str	r3, [r2, #12]
      break;
 800aed6:	e043      	b.n	800af60 <USB_HC_Init+0x13c>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aed8:	78fb      	ldrb	r3, [r7, #3]
 800aeda:	015a      	lsls	r2, r3, #5
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	4413      	add	r3, r2
 800aee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aee4:	461a      	mov	r2, r3
 800aee6:	f240 639d 	movw	r3, #1693	@ 0x69d
 800aeea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800aeec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	da32      	bge.n	800af5a <USB_HC_Init+0x136>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800aef4:	78fb      	ldrb	r3, [r7, #3]
 800aef6:	015a      	lsls	r2, r3, #5
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	4413      	add	r3, r2
 800aefc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	78fa      	ldrb	r2, [r7, #3]
 800af04:	0151      	lsls	r1, r2, #5
 800af06:	693a      	ldr	r2, [r7, #16]
 800af08:	440a      	add	r2, r1
 800af0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800af0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af12:	60d3      	str	r3, [r2, #12]
      }

      break;
 800af14:	e021      	b.n	800af5a <USB_HC_Init+0x136>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800af16:	78fb      	ldrb	r3, [r7, #3]
 800af18:	015a      	lsls	r2, r3, #5
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	4413      	add	r3, r2
 800af1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af22:	461a      	mov	r2, r3
 800af24:	f240 2325 	movw	r3, #549	@ 0x225
 800af28:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800af2a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	da15      	bge.n	800af5e <USB_HC_Init+0x13a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800af32:	78fb      	ldrb	r3, [r7, #3]
 800af34:	015a      	lsls	r2, r3, #5
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	4413      	add	r3, r2
 800af3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	78fa      	ldrb	r2, [r7, #3]
 800af42:	0151      	lsls	r1, r2, #5
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	440a      	add	r2, r1
 800af48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800af4c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800af50:	60d3      	str	r3, [r2, #12]
      }
      break;
 800af52:	e004      	b.n	800af5e <USB_HC_Init+0x13a>

    default:
      ret = HAL_ERROR;
 800af54:	2301      	movs	r3, #1
 800af56:	77fb      	strb	r3, [r7, #31]
      break;
 800af58:	e002      	b.n	800af60 <USB_HC_Init+0x13c>
      break;
 800af5a:	bf00      	nop
 800af5c:	e000      	b.n	800af60 <USB_HC_Init+0x13c>
      break;
 800af5e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800af60:	78fb      	ldrb	r3, [r7, #3]
 800af62:	015a      	lsls	r2, r3, #5
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	4413      	add	r3, r2
 800af68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af6c:	461a      	mov	r2, r3
 800af6e:	2300      	movs	r3, #0
 800af70:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800af72:	78fb      	ldrb	r3, [r7, #3]
 800af74:	015a      	lsls	r2, r3, #5
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	4413      	add	r3, r2
 800af7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	78fa      	ldrb	r2, [r7, #3]
 800af82:	0151      	lsls	r1, r2, #5
 800af84:	693a      	ldr	r2, [r7, #16]
 800af86:	440a      	add	r2, r1
 800af88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800af8c:	f043 0302 	orr.w	r3, r3, #2
 800af90:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af98:	699a      	ldr	r2, [r3, #24]
 800af9a:	78fb      	ldrb	r3, [r7, #3]
 800af9c:	f003 030f 	and.w	r3, r3, #15
 800afa0:	2101      	movs	r1, #1
 800afa2:	fa01 f303 	lsl.w	r3, r1, r3
 800afa6:	6939      	ldr	r1, [r7, #16]
 800afa8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800afac:	4313      	orrs	r3, r2
 800afae:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	699b      	ldr	r3, [r3, #24]
 800afb4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800afbc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	da03      	bge.n	800afcc <USB_HC_Init+0x1a8>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800afc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afc8:	61bb      	str	r3, [r7, #24]
 800afca:	e001      	b.n	800afd0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharEpDir = 0U;
 800afcc:	2300      	movs	r3, #0
 800afce:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f7ff feff 	bl	800add4 <USB_GetHostSpeed>
 800afd6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800afd8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d106      	bne.n	800afee <USB_HC_Init+0x1ca>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	d003      	beq.n	800afee <USB_HC_Init+0x1ca>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800afe6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800afea:	617b      	str	r3, [r7, #20]
 800afec:	e001      	b.n	800aff2 <USB_HC_Init+0x1ce>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800afee:	2300      	movs	r3, #0
 800aff0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800aff2:	787b      	ldrb	r3, [r7, #1]
 800aff4:	059b      	lsls	r3, r3, #22
 800aff6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800affa:	78bb      	ldrb	r3, [r7, #2]
 800affc:	02db      	lsls	r3, r3, #11
 800affe:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b002:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b004:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b008:	049b      	lsls	r3, r3, #18
 800b00a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b00e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800b010:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b012:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b016:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	431a      	orrs	r2, r3
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b020:	78fa      	ldrb	r2, [r7, #3]
 800b022:	0151      	lsls	r1, r2, #5
 800b024:	693a      	ldr	r2, [r7, #16]
 800b026:	440a      	add	r2, r1
 800b028:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b02c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b030:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800b032:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b036:	2b03      	cmp	r3, #3
 800b038:	d003      	beq.n	800b042 <USB_HC_Init+0x21e>
 800b03a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d10f      	bne.n	800b062 <USB_HC_Init+0x23e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800b042:	78fb      	ldrb	r3, [r7, #3]
 800b044:	015a      	lsls	r2, r3, #5
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	4413      	add	r3, r2
 800b04a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	78fa      	ldrb	r2, [r7, #3]
 800b052:	0151      	lsls	r1, r2, #5
 800b054:	693a      	ldr	r2, [r7, #16]
 800b056:	440a      	add	r2, r1
 800b058:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b05c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b060:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b062:	7ffb      	ldrb	r3, [r7, #31]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3720      	adds	r7, #32
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b08c      	sub	sp, #48	@ 0x30
 800b070:	af02      	add	r7, sp, #8
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	4613      	mov	r3, r2
 800b078:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	785b      	ldrb	r3, [r3, #1]
 800b082:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800b084:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b088:	837b      	strh	r3, [r7, #26]

  /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
  if (dma == 1U)
 800b08a:	79fb      	ldrb	r3, [r7, #7]
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d118      	bne.n	800b0c2 <USB_HC_StartXfer+0x56>
  {
    if ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK))
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	7c9b      	ldrb	r3, [r3, #18]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d003      	beq.n	800b0a0 <USB_HC_StartXfer+0x34>
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	7c9b      	ldrb	r3, [r3, #18]
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d120      	bne.n	800b0e2 <USB_HC_StartXfer+0x76>
    {

      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	015a      	lsls	r2, r3, #5
 800b0a4:	6a3b      	ldr	r3, [r7, #32]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	69fa      	ldr	r2, [r7, #28]
 800b0b0:	0151      	lsls	r1, r2, #5
 800b0b2:	6a3a      	ldr	r2, [r7, #32]
 800b0b4:	440a      	add	r2, r1
 800b0b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b0ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0be:	60d3      	str	r3, [r2, #12]
 800b0c0:	e00f      	b.n	800b0e2 <USB_HC_StartXfer+0x76>
                                               USB_OTG_HCINTMSK_NAKM);
    }
  }
  else
  {
    if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	791b      	ldrb	r3, [r3, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d10b      	bne.n	800b0e2 <USB_HC_StartXfer+0x76>
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	795b      	ldrb	r3, [r3, #5]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d107      	bne.n	800b0e2 <USB_HC_StartXfer+0x76>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	785b      	ldrb	r3, [r3, #1]
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f000 fb69 	bl	800b7b0 <USB_DoPing>
      return HAL_OK;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	e230      	b.n	800b544 <USB_HC_StartXfer+0x4d8>
    }
  }

  if (hc->do_ssplit == 1U)
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	799b      	ldrb	r3, [r3, #6]
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d158      	bne.n	800b19c <USB_HC_StartXfer+0x130>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	78db      	ldrb	r3, [r3, #3]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d007      	beq.n	800b106 <USB_HC_StartXfer+0x9a>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b0f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	8a92      	ldrh	r2, [r2, #20]
 800b0fc:	fb03 f202 	mul.w	r2, r3, r2
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	61da      	str	r2, [r3, #28]
 800b104:	e079      	b.n	800b1fa <USB_HC_StartXfer+0x18e>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	7c9b      	ldrb	r3, [r3, #18]
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d130      	bne.n	800b170 <USB_HC_StartXfer+0x104>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	6a1b      	ldr	r3, [r3, #32]
 800b112:	2bbc      	cmp	r3, #188	@ 0xbc
 800b114:	d918      	bls.n	800b148 <USB_HC_StartXfer+0xdc>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	8a9b      	ldrh	r3, [r3, #20]
 800b11a:	461a      	mov	r2, r3
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	69da      	ldr	r2, [r3, #28]
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d003      	beq.n	800b138 <USB_HC_StartXfer+0xcc>
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	2b02      	cmp	r3, #2
 800b136:	d103      	bne.n	800b140 <USB_HC_StartXfer+0xd4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	2202      	movs	r2, #2
 800b13c:	60da      	str	r2, [r3, #12]
 800b13e:	e05c      	b.n	800b1fa <USB_HC_StartXfer+0x18e>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	2201      	movs	r2, #1
 800b144:	60da      	str	r2, [r3, #12]
 800b146:	e058      	b.n	800b1fa <USB_HC_StartXfer+0x18e>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	6a1a      	ldr	r2, [r3, #32]
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	2b01      	cmp	r3, #1
 800b156:	d007      	beq.n	800b168 <USB_HC_StartXfer+0xfc>
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	68db      	ldr	r3, [r3, #12]
 800b15c:	2b02      	cmp	r3, #2
 800b15e:	d003      	beq.n	800b168 <USB_HC_StartXfer+0xfc>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	2204      	movs	r2, #4
 800b164:	60da      	str	r2, [r3, #12]
 800b166:	e048      	b.n	800b1fa <USB_HC_StartXfer+0x18e>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	2203      	movs	r2, #3
 800b16c:	60da      	str	r2, [r3, #12]
 800b16e:	e044      	b.n	800b1fa <USB_HC_StartXfer+0x18e>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800b170:	79fb      	ldrb	r3, [r7, #7]
 800b172:	2b01      	cmp	r3, #1
 800b174:	d10d      	bne.n	800b192 <USB_HC_StartXfer+0x126>
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	6a1b      	ldr	r3, [r3, #32]
 800b17a:	68ba      	ldr	r2, [r7, #8]
 800b17c:	8a92      	ldrh	r2, [r2, #20]
 800b17e:	4293      	cmp	r3, r2
 800b180:	d907      	bls.n	800b192 <USB_HC_StartXfer+0x126>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b182:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	8a92      	ldrh	r2, [r2, #20]
 800b188:	fb03 f202 	mul.w	r2, r3, r2
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	61da      	str	r2, [r3, #28]
 800b190:	e033      	b.n	800b1fa <USB_HC_StartXfer+0x18e>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	6a1a      	ldr	r2, [r3, #32]
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	61da      	str	r2, [r3, #28]
 800b19a:	e02e      	b.n	800b1fa <USB_HC_StartXfer+0x18e>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	6a1b      	ldr	r3, [r3, #32]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d018      	beq.n	800b1d6 <USB_HC_StartXfer+0x16a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	6a1b      	ldr	r3, [r3, #32]
 800b1a8:	68ba      	ldr	r2, [r7, #8]
 800b1aa:	8a92      	ldrh	r2, [r2, #20]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	68ba      	ldr	r2, [r7, #8]
 800b1b2:	8a92      	ldrh	r2, [r2, #20]
 800b1b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1b8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800b1ba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b1bc:	8b7b      	ldrh	r3, [r7, #26]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d90b      	bls.n	800b1da <USB_HC_StartXfer+0x16e>
      {
        num_packets = max_hc_pkt_count;
 800b1c2:	8b7b      	ldrh	r3, [r7, #26]
 800b1c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b1c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b1c8:	68ba      	ldr	r2, [r7, #8]
 800b1ca:	8a92      	ldrh	r2, [r2, #20]
 800b1cc:	fb03 f202 	mul.w	r2, r3, r2
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	61da      	str	r2, [r3, #28]
 800b1d4:	e001      	b.n	800b1da <USB_HC_StartXfer+0x16e>
      }
    }
    else
    {
      num_packets = 1U;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	78db      	ldrb	r3, [r3, #3]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d007      	beq.n	800b1f2 <USB_HC_StartXfer+0x186>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b1e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b1e4:	68ba      	ldr	r2, [r7, #8]
 800b1e6:	8a92      	ldrh	r2, [r2, #20]
 800b1e8:	fb03 f202 	mul.w	r2, r3, r2
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	61da      	str	r2, [r3, #28]
 800b1f0:	e003      	b.n	800b1fa <USB_HC_StartXfer+0x18e>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	6a1a      	ldr	r2, [r3, #32]
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	69db      	ldr	r3, [r3, #28]
 800b1fe:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b202:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b204:	04d9      	lsls	r1, r3, #19
 800b206:	4ba4      	ldr	r3, [pc, #656]	@ (800b498 <USB_HC_StartXfer+0x42c>)
 800b208:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b20a:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	7d9b      	ldrb	r3, [r3, #22]
 800b210:	075b      	lsls	r3, r3, #29
 800b212:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b216:	69f9      	ldr	r1, [r7, #28]
 800b218:	0148      	lsls	r0, r1, #5
 800b21a:	6a39      	ldr	r1, [r7, #32]
 800b21c:	4401      	add	r1, r0
 800b21e:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b222:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b224:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b226:	79fb      	ldrb	r3, [r7, #7]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d009      	beq.n	800b240 <USB_HC_StartXfer+0x1d4>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	6999      	ldr	r1, [r3, #24]
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	015a      	lsls	r2, r3, #5
 800b234:	6a3b      	ldr	r3, [r7, #32]
 800b236:	4413      	add	r3, r2
 800b238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b23c:	460a      	mov	r2, r1
 800b23e:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b240:	6a3b      	ldr	r3, [r7, #32]
 800b242:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	f003 0301 	and.w	r3, r3, #1
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	bf0c      	ite	eq
 800b250:	2301      	moveq	r3, #1
 800b252:	2300      	movne	r3, #0
 800b254:	b2db      	uxtb	r3, r3
 800b256:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	015a      	lsls	r2, r3, #5
 800b25c:	6a3b      	ldr	r3, [r7, #32]
 800b25e:	4413      	add	r3, r2
 800b260:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	69fa      	ldr	r2, [r7, #28]
 800b268:	0151      	lsls	r1, r2, #5
 800b26a:	6a3a      	ldr	r2, [r7, #32]
 800b26c:	440a      	add	r2, r1
 800b26e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b272:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b276:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	015a      	lsls	r2, r3, #5
 800b27c:	6a3b      	ldr	r3, [r7, #32]
 800b27e:	4413      	add	r3, r2
 800b280:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	7e7b      	ldrb	r3, [r7, #25]
 800b288:	075b      	lsls	r3, r3, #29
 800b28a:	69f9      	ldr	r1, [r7, #28]
 800b28c:	0148      	lsls	r0, r1, #5
 800b28e:	6a39      	ldr	r1, [r7, #32]
 800b290:	4401      	add	r1, r0
 800b292:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800b296:	4313      	orrs	r3, r2
 800b298:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	799b      	ldrb	r3, [r3, #6]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	f040 80c4 	bne.w	800b42c <USB_HC_StartXfer+0x3c0>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	7c5b      	ldrb	r3, [r3, #17]
 800b2a8:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	69fa      	ldr	r2, [r7, #28]
 800b2b2:	0151      	lsls	r1, r2, #5
 800b2b4:	6a3a      	ldr	r2, [r7, #32]
 800b2b6:	440a      	add	r2, r1
 800b2b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b2bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b2c0:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800b2c2:	69fb      	ldr	r3, [r7, #28]
 800b2c4:	015a      	lsls	r2, r3, #5
 800b2c6:	6a3b      	ldr	r3, [r7, #32]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	69fa      	ldr	r2, [r7, #28]
 800b2d2:	0151      	lsls	r1, r2, #5
 800b2d4:	6a3a      	ldr	r2, [r7, #32]
 800b2d6:	440a      	add	r2, r1
 800b2d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b2dc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b2e0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	79db      	ldrb	r3, [r3, #7]
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d123      	bne.n	800b332 <USB_HC_StartXfer+0x2c6>
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	78db      	ldrb	r3, [r3, #3]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d11f      	bne.n	800b332 <USB_HC_StartXfer+0x2c6>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	015a      	lsls	r2, r3, #5
 800b2f6:	6a3b      	ldr	r3, [r7, #32]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	69fa      	ldr	r2, [r7, #28]
 800b302:	0151      	lsls	r1, r2, #5
 800b304:	6a3a      	ldr	r2, [r7, #32]
 800b306:	440a      	add	r2, r1
 800b308:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b30c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b310:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	015a      	lsls	r2, r3, #5
 800b316:	6a3b      	ldr	r3, [r7, #32]
 800b318:	4413      	add	r3, r2
 800b31a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	69fa      	ldr	r2, [r7, #28]
 800b322:	0151      	lsls	r1, r2, #5
 800b324:	6a3a      	ldr	r2, [r7, #32]
 800b326:	440a      	add	r2, r1
 800b328:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b32c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b330:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	7c9b      	ldrb	r3, [r3, #18]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d003      	beq.n	800b342 <USB_HC_StartXfer+0x2d6>
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	7c9b      	ldrb	r3, [r3, #18]
 800b33e:	2b03      	cmp	r3, #3
 800b340:	d117      	bne.n	800b372 <USB_HC_StartXfer+0x306>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b346:	2b01      	cmp	r3, #1
 800b348:	d113      	bne.n	800b372 <USB_HC_StartXfer+0x306>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	78db      	ldrb	r3, [r3, #3]
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d10f      	bne.n	800b372 <USB_HC_StartXfer+0x306>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	015a      	lsls	r2, r3, #5
 800b356:	6a3b      	ldr	r3, [r7, #32]
 800b358:	4413      	add	r3, r2
 800b35a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	69fa      	ldr	r2, [r7, #28]
 800b362:	0151      	lsls	r1, r2, #5
 800b364:	6a3a      	ldr	r2, [r7, #32]
 800b366:	440a      	add	r2, r1
 800b368:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b36c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b370:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	7c9b      	ldrb	r3, [r3, #18]
 800b376:	2b01      	cmp	r3, #1
 800b378:	d163      	bne.n	800b442 <USB_HC_StartXfer+0x3d6>
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	78db      	ldrb	r3, [r3, #3]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d15f      	bne.n	800b442 <USB_HC_StartXfer+0x3d6>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	3b01      	subs	r3, #1
 800b388:	2b03      	cmp	r3, #3
 800b38a:	d859      	bhi.n	800b440 <USB_HC_StartXfer+0x3d4>
 800b38c:	a201      	add	r2, pc, #4	@ (adr r2, 800b394 <USB_HC_StartXfer+0x328>)
 800b38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b392:	bf00      	nop
 800b394:	0800b3a5 	.word	0x0800b3a5
 800b398:	0800b3c7 	.word	0x0800b3c7
 800b39c:	0800b3e9 	.word	0x0800b3e9
 800b3a0:	0800b40b 	.word	0x0800b40b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	015a      	lsls	r2, r3, #5
 800b3a8:	6a3b      	ldr	r3, [r7, #32]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	69fa      	ldr	r2, [r7, #28]
 800b3b4:	0151      	lsls	r1, r2, #5
 800b3b6:	6a3a      	ldr	r2, [r7, #32]
 800b3b8:	440a      	add	r2, r1
 800b3ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b3be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3c2:	6053      	str	r3, [r2, #4]
          break;
 800b3c4:	e03d      	b.n	800b442 <USB_HC_StartXfer+0x3d6>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	015a      	lsls	r2, r3, #5
 800b3ca:	6a3b      	ldr	r3, [r7, #32]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	69fa      	ldr	r2, [r7, #28]
 800b3d6:	0151      	lsls	r1, r2, #5
 800b3d8:	6a3a      	ldr	r2, [r7, #32]
 800b3da:	440a      	add	r2, r1
 800b3dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b3e0:	f043 030e 	orr.w	r3, r3, #14
 800b3e4:	6053      	str	r3, [r2, #4]
          break;
 800b3e6:	e02c      	b.n	800b442 <USB_HC_StartXfer+0x3d6>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	015a      	lsls	r2, r3, #5
 800b3ec:	6a3b      	ldr	r3, [r7, #32]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	69fa      	ldr	r2, [r7, #28]
 800b3f8:	0151      	lsls	r1, r2, #5
 800b3fa:	6a3a      	ldr	r2, [r7, #32]
 800b3fc:	440a      	add	r2, r1
 800b3fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b402:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b406:	6053      	str	r3, [r2, #4]
          break;
 800b408:	e01b      	b.n	800b442 <USB_HC_StartXfer+0x3d6>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	015a      	lsls	r2, r3, #5
 800b40e:	6a3b      	ldr	r3, [r7, #32]
 800b410:	4413      	add	r3, r2
 800b412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	69fa      	ldr	r2, [r7, #28]
 800b41a:	0151      	lsls	r1, r2, #5
 800b41c:	6a3a      	ldr	r2, [r7, #32]
 800b41e:	440a      	add	r2, r1
 800b420:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b424:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b428:	6053      	str	r3, [r2, #4]
          break;
 800b42a:	e00a      	b.n	800b442 <USB_HC_StartXfer+0x3d6>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	015a      	lsls	r2, r3, #5
 800b430:	6a3b      	ldr	r3, [r7, #32]
 800b432:	4413      	add	r3, r2
 800b434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b438:	461a      	mov	r2, r3
 800b43a:	2300      	movs	r3, #0
 800b43c:	6053      	str	r3, [r2, #4]
 800b43e:	e000      	b.n	800b442 <USB_HC_StartXfer+0x3d6>
          break;
 800b440:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	015a      	lsls	r2, r3, #5
 800b446:	6a3b      	ldr	r3, [r7, #32]
 800b448:	4413      	add	r3, r2
 800b44a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b458:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	78db      	ldrb	r3, [r3, #3]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d004      	beq.n	800b46c <USB_HC_StartXfer+0x400>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b468:	613b      	str	r3, [r7, #16]
 800b46a:	e003      	b.n	800b474 <USB_HC_StartXfer+0x408>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b472:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b47a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	015a      	lsls	r2, r3, #5
 800b480:	6a3b      	ldr	r3, [r7, #32]
 800b482:	4413      	add	r3, r2
 800b484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b488:	461a      	mov	r2, r3
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b48e:	79fb      	ldrb	r3, [r7, #7]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d003      	beq.n	800b49c <USB_HC_StartXfer+0x430>
  {
    return HAL_OK;
 800b494:	2300      	movs	r3, #0
 800b496:	e055      	b.n	800b544 <USB_HC_StartXfer+0x4d8>
 800b498:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	78db      	ldrb	r3, [r3, #3]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d14e      	bne.n	800b542 <USB_HC_StartXfer+0x4d6>
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	6a1b      	ldr	r3, [r3, #32]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d04a      	beq.n	800b542 <USB_HC_StartXfer+0x4d6>
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	79db      	ldrb	r3, [r3, #7]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d146      	bne.n	800b542 <USB_HC_StartXfer+0x4d6>
  {
    switch (hc->ep_type)
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	7c9b      	ldrb	r3, [r3, #18]
 800b4b8:	2b03      	cmp	r3, #3
 800b4ba:	d831      	bhi.n	800b520 <USB_HC_StartXfer+0x4b4>
 800b4bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b4c4 <USB_HC_StartXfer+0x458>)
 800b4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c2:	bf00      	nop
 800b4c4:	0800b4d5 	.word	0x0800b4d5
 800b4c8:	0800b4f9 	.word	0x0800b4f9
 800b4cc:	0800b4d5 	.word	0x0800b4d5
 800b4d0:	0800b4f9 	.word	0x0800b4f9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	6a1b      	ldr	r3, [r3, #32]
 800b4d8:	3303      	adds	r3, #3
 800b4da:	089b      	lsrs	r3, r3, #2
 800b4dc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b4de:	8afa      	ldrh	r2, [r7, #22]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d91c      	bls.n	800b524 <USB_HC_StartXfer+0x4b8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	699b      	ldr	r3, [r3, #24]
 800b4ee:	f043 0220 	orr.w	r2, r3, #32
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	619a      	str	r2, [r3, #24]
        }
        break;
 800b4f6:	e015      	b.n	800b524 <USB_HC_StartXfer+0x4b8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	6a1b      	ldr	r3, [r3, #32]
 800b4fc:	3303      	adds	r3, #3
 800b4fe:	089b      	lsrs	r3, r3, #2
 800b500:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b502:	8afa      	ldrh	r2, [r7, #22]
 800b504:	6a3b      	ldr	r3, [r7, #32]
 800b506:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b50a:	691b      	ldr	r3, [r3, #16]
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	429a      	cmp	r2, r3
 800b510:	d90a      	bls.n	800b528 <USB_HC_StartXfer+0x4bc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	699b      	ldr	r3, [r3, #24]
 800b516:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	619a      	str	r2, [r3, #24]
        }
        break;
 800b51e:	e003      	b.n	800b528 <USB_HC_StartXfer+0x4bc>

      default:
        break;
 800b520:	bf00      	nop
 800b522:	e002      	b.n	800b52a <USB_HC_StartXfer+0x4be>
        break;
 800b524:	bf00      	nop
 800b526:	e000      	b.n	800b52a <USB_HC_StartXfer+0x4be>
        break;
 800b528:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	6999      	ldr	r1, [r3, #24]
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	785a      	ldrb	r2, [r3, #1]
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	6a1b      	ldr	r3, [r3, #32]
 800b536:	b29b      	uxth	r3, r3
 800b538:	2000      	movs	r0, #0
 800b53a:	9000      	str	r0, [sp, #0]
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f7ff f9f5 	bl	800a92c <USB_WritePacket>
  }

  return HAL_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3728      	adds	r7, #40	@ 0x28
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b55e:	695b      	ldr	r3, [r3, #20]
 800b560:	b29b      	uxth	r3, r3
}
 800b562:	4618      	mov	r0, r3
 800b564:	3714      	adds	r7, #20
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b56e:	b480      	push	{r7}
 800b570:	b089      	sub	sp, #36	@ 0x24
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
 800b576:	460b      	mov	r3, r1
 800b578:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b57e:	78fb      	ldrb	r3, [r7, #3]
 800b580:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b582:	2300      	movs	r3, #0
 800b584:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	015a      	lsls	r2, r3, #5
 800b58a:	69fb      	ldr	r3, [r7, #28]
 800b58c:	4413      	add	r3, r2
 800b58e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	0c9b      	lsrs	r3, r3, #18
 800b596:	f003 0303 	and.w	r3, r3, #3
 800b59a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	015a      	lsls	r2, r3, #5
 800b5a0:	69fb      	ldr	r3, [r7, #28]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	0fdb      	lsrs	r3, r3, #31
 800b5ac:	f003 0301 	and.w	r3, r3, #1
 800b5b0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	015a      	lsls	r2, r3, #5
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	0fdb      	lsrs	r3, r3, #31
 800b5c2:	f003 0301 	and.w	r3, r3, #1
 800b5c6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	f003 0320 	and.w	r3, r3, #32
 800b5d0:	2b20      	cmp	r3, #32
 800b5d2:	d10d      	bne.n	800b5f0 <USB_HC_Halt+0x82>
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d10a      	bne.n	800b5f0 <USB_HC_Halt+0x82>
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d005      	beq.n	800b5ec <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d002      	beq.n	800b5ec <USB_HC_Halt+0x7e>
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	2b03      	cmp	r3, #3
 800b5ea:	d101      	bne.n	800b5f0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	e0d8      	b.n	800b7a2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d002      	beq.n	800b5fc <USB_HC_Halt+0x8e>
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	2b02      	cmp	r3, #2
 800b5fa:	d173      	bne.n	800b6e4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b5fc:	69bb      	ldr	r3, [r7, #24]
 800b5fe:	015a      	lsls	r2, r3, #5
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	4413      	add	r3, r2
 800b604:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	69ba      	ldr	r2, [r7, #24]
 800b60c:	0151      	lsls	r1, r2, #5
 800b60e:	69fa      	ldr	r2, [r7, #28]
 800b610:	440a      	add	r2, r1
 800b612:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b616:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b61a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	f003 0320 	and.w	r3, r3, #32
 800b624:	2b00      	cmp	r3, #0
 800b626:	d14a      	bne.n	800b6be <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b62c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b630:	2b00      	cmp	r3, #0
 800b632:	d133      	bne.n	800b69c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	015a      	lsls	r2, r3, #5
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	4413      	add	r3, r2
 800b63c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	69ba      	ldr	r2, [r7, #24]
 800b644:	0151      	lsls	r1, r2, #5
 800b646:	69fa      	ldr	r2, [r7, #28]
 800b648:	440a      	add	r2, r1
 800b64a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b64e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b652:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b654:	69bb      	ldr	r3, [r7, #24]
 800b656:	015a      	lsls	r2, r3, #5
 800b658:	69fb      	ldr	r3, [r7, #28]
 800b65a:	4413      	add	r3, r2
 800b65c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	69ba      	ldr	r2, [r7, #24]
 800b664:	0151      	lsls	r1, r2, #5
 800b666:	69fa      	ldr	r2, [r7, #28]
 800b668:	440a      	add	r2, r1
 800b66a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b66e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b672:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	3301      	adds	r3, #1
 800b678:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b680:	d82e      	bhi.n	800b6e0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b682:	69bb      	ldr	r3, [r7, #24]
 800b684:	015a      	lsls	r2, r3, #5
 800b686:	69fb      	ldr	r3, [r7, #28]
 800b688:	4413      	add	r3, r2
 800b68a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b694:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b698:	d0ec      	beq.n	800b674 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b69a:	e081      	b.n	800b7a0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	015a      	lsls	r2, r3, #5
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	69ba      	ldr	r2, [r7, #24]
 800b6ac:	0151      	lsls	r1, r2, #5
 800b6ae:	69fa      	ldr	r2, [r7, #28]
 800b6b0:	440a      	add	r2, r1
 800b6b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b6b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b6ba:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b6bc:	e070      	b.n	800b7a0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	015a      	lsls	r2, r3, #5
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	69ba      	ldr	r2, [r7, #24]
 800b6ce:	0151      	lsls	r1, r2, #5
 800b6d0:	69fa      	ldr	r2, [r7, #28]
 800b6d2:	440a      	add	r2, r1
 800b6d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b6d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b6dc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b6de:	e05f      	b.n	800b7a0 <USB_HC_Halt+0x232>
            break;
 800b6e0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b6e2:	e05d      	b.n	800b7a0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b6e4:	69bb      	ldr	r3, [r7, #24]
 800b6e6:	015a      	lsls	r2, r3, #5
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	4413      	add	r3, r2
 800b6ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	69ba      	ldr	r2, [r7, #24]
 800b6f4:	0151      	lsls	r1, r2, #5
 800b6f6:	69fa      	ldr	r2, [r7, #28]
 800b6f8:	440a      	add	r2, r1
 800b6fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b6fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b702:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b70a:	691b      	ldr	r3, [r3, #16]
 800b70c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b710:	2b00      	cmp	r3, #0
 800b712:	d133      	bne.n	800b77c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	015a      	lsls	r2, r3, #5
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	4413      	add	r3, r2
 800b71c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	69ba      	ldr	r2, [r7, #24]
 800b724:	0151      	lsls	r1, r2, #5
 800b726:	69fa      	ldr	r2, [r7, #28]
 800b728:	440a      	add	r2, r1
 800b72a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b72e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b732:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	015a      	lsls	r2, r3, #5
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	4413      	add	r3, r2
 800b73c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	69ba      	ldr	r2, [r7, #24]
 800b744:	0151      	lsls	r1, r2, #5
 800b746:	69fa      	ldr	r2, [r7, #28]
 800b748:	440a      	add	r2, r1
 800b74a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b74e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b752:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	3301      	adds	r3, #1
 800b758:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b760:	d81d      	bhi.n	800b79e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	015a      	lsls	r2, r3, #5
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	4413      	add	r3, r2
 800b76a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b774:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b778:	d0ec      	beq.n	800b754 <USB_HC_Halt+0x1e6>
 800b77a:	e011      	b.n	800b7a0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b77c:	69bb      	ldr	r3, [r7, #24]
 800b77e:	015a      	lsls	r2, r3, #5
 800b780:	69fb      	ldr	r3, [r7, #28]
 800b782:	4413      	add	r3, r2
 800b784:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	69ba      	ldr	r2, [r7, #24]
 800b78c:	0151      	lsls	r1, r2, #5
 800b78e:	69fa      	ldr	r2, [r7, #28]
 800b790:	440a      	add	r2, r1
 800b792:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b796:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b79a:	6013      	str	r3, [r2, #0]
 800b79c:	e000      	b.n	800b7a0 <USB_HC_Halt+0x232>
          break;
 800b79e:	bf00      	nop
    }
  }

  return HAL_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3724      	adds	r7, #36	@ 0x24
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr
	...

0800b7b0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b087      	sub	sp, #28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b7c0:	78fb      	ldrb	r3, [r7, #3]
 800b7c2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	04da      	lsls	r2, r3, #19
 800b7cc:	4b15      	ldr	r3, [pc, #84]	@ (800b824 <USB_DoPing+0x74>)
 800b7ce:	4013      	ands	r3, r2
 800b7d0:	693a      	ldr	r2, [r7, #16]
 800b7d2:	0151      	lsls	r1, r2, #5
 800b7d4:	697a      	ldr	r2, [r7, #20]
 800b7d6:	440a      	add	r2, r1
 800b7d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b7dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b7e0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	015a      	lsls	r2, r3, #5
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b7f8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b800:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	015a      	lsls	r2, r3, #5
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	4413      	add	r3, r2
 800b80a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b80e:	461a      	mov	r2, r3
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	371c      	adds	r7, #28
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr
 800b822:	bf00      	nop
 800b824:	1ff80000 	.word	0x1ff80000

0800b828 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b088      	sub	sp, #32
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b830:	2300      	movs	r3, #0
 800b832:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b838:	2300      	movs	r3, #0
 800b83a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f7fe ffb8 	bl	800a7b2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b842:	2110      	movs	r1, #16
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f7ff f811 	bl	800a86c <USB_FlushTxFifo>
 800b84a:	4603      	mov	r3, r0
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d001      	beq.n	800b854 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b850:	2301      	movs	r3, #1
 800b852:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f7ff f83b 	bl	800a8d0 <USB_FlushRxFifo>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d001      	beq.n	800b864 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b864:	2300      	movs	r3, #0
 800b866:	61bb      	str	r3, [r7, #24]
 800b868:	e01f      	b.n	800b8aa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	015a      	lsls	r2, r3, #5
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	4413      	add	r3, r2
 800b872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b880:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b888:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b890:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	015a      	lsls	r2, r3, #5
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	4413      	add	r3, r2
 800b89a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b89e:	461a      	mov	r2, r3
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	61bb      	str	r3, [r7, #24]
 800b8aa:	69bb      	ldr	r3, [r7, #24]
 800b8ac:	2b0f      	cmp	r3, #15
 800b8ae:	d9dc      	bls.n	800b86a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	61bb      	str	r3, [r7, #24]
 800b8b4:	e034      	b.n	800b920 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	015a      	lsls	r2, r3, #5
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	4413      	add	r3, r2
 800b8be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b8cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b8d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b8dc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	015a      	lsls	r2, r3, #5
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b8fc:	d80c      	bhi.n	800b918 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	015a      	lsls	r2, r3, #5
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	4413      	add	r3, r2
 800b906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b910:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b914:	d0ec      	beq.n	800b8f0 <USB_StopHost+0xc8>
 800b916:	e000      	b.n	800b91a <USB_StopHost+0xf2>
        break;
 800b918:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	3301      	adds	r3, #1
 800b91e:	61bb      	str	r3, [r7, #24]
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	2b0f      	cmp	r3, #15
 800b924:	d9c7      	bls.n	800b8b6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b92c:	461a      	mov	r2, r3
 800b92e:	f04f 33ff 	mov.w	r3, #4294967295
 800b932:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f04f 32ff 	mov.w	r2, #4294967295
 800b93a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f7fe ff27 	bl	800a790 <USB_EnableGlobalInt>

  return ret;
 800b942:	7ffb      	ldrb	r3, [r7, #31]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3720      	adds	r7, #32
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b94c:	b590      	push	{r4, r7, lr}
 800b94e:	b08b      	sub	sp, #44	@ 0x2c
 800b950:	af04      	add	r7, sp, #16
 800b952:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 800b954:	2300      	movs	r3, #0
 800b956:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 800b958:	2300      	movs	r3, #0
 800b95a:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 800b95c:	2300      	movs	r3, #0
 800b95e:	2201      	movs	r2, #1
 800b960:	2101      	movs	r1, #1
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f002 f91c 	bl	800dba0 <USBH_FindInterface>
 800b968:	4603      	mov	r3, r0
 800b96a:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 800b96c:	7c7b      	ldrb	r3, [r7, #17]
 800b96e:	2bff      	cmp	r3, #255	@ 0xff
 800b970:	d101      	bne.n	800b976 <USBH_AUDIO_InterfaceInit+0x2a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b972:	2302      	movs	r3, #2
 800b974:	e1a5      	b.n	800bcc2 <USBH_AUDIO_InterfaceInit+0x376>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8d3 4818 	ldr.w	r4, [r3, #2072]	@ 0x818
 800b97c:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 800b980:	f004 fa5c 	bl	800fe3c <malloc>
 800b984:	4603      	mov	r3, r0
 800b986:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800b98e:	69db      	ldr	r3, [r3, #28]
 800b990:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d101      	bne.n	800b99c <USBH_AUDIO_InterfaceInit+0x50>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
    return USBH_FAIL;
 800b998:	2302      	movs	r3, #2
 800b99a:	e192      	b.n	800bcc2 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* Initialize audio handler */
  (void)USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 800b99c:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f004 fc27 	bl	80101f6 <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 fc36 	bl	800c21a <USBH_AUDIO_FindAudioStreamingIN>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 fcf0 	bl	800c398 <USBH_AUDIO_FindAudioStreamingOUT>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 800b9bc:	7afb      	ldrb	r3, [r7, #11]
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	d104      	bne.n	800b9cc <USBH_AUDIO_InterfaceInit+0x80>
 800b9c2:	7abb      	ldrb	r3, [r7, #10]
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	d101      	bne.n	800b9cc <USBH_AUDIO_InterfaceInit+0x80>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b9c8:	2302      	movs	r3, #2
 800b9ca:	e17a      	b.n	800bcc2 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	75fb      	strb	r3, [r7, #23]
 800b9d0:	e0c6      	b.n	800bb60 <USBH_AUDIO_InterfaceInit+0x214>
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 800b9d2:	7dfa      	ldrb	r2, [r7, #23]
 800b9d4:	68f9      	ldr	r1, [r7, #12]
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	4413      	add	r3, r2
 800b9dc:	005b      	lsls	r3, r3, #1
 800b9de:	440b      	add	r3, r1
 800b9e0:	333e      	adds	r3, #62	@ 0x3e
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d156      	bne.n	800ba96 <USBH_AUDIO_InterfaceInit+0x14a>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 800b9e8:	7dfa      	ldrb	r2, [r7, #23]
 800b9ea:	68f9      	ldr	r1, [r7, #12]
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	4413      	add	r3, r2
 800b9f2:	005b      	lsls	r3, r3, #1
 800b9f4:	440b      	add	r3, r1
 800b9f6:	333a      	adds	r3, #58	@ 0x3a
 800b9f8:	881b      	ldrh	r3, [r3, #0]
 800b9fa:	8aba      	ldrh	r2, [r7, #20]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d24a      	bcs.n	800ba96 <USBH_AUDIO_InterfaceInit+0x14a>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 800ba00:	7dfa      	ldrb	r2, [r7, #23]
 800ba02:	68f9      	ldr	r1, [r7, #12]
 800ba04:	4613      	mov	r3, r2
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	4413      	add	r3, r2
 800ba0a:	005b      	lsls	r3, r3, #1
 800ba0c:	440b      	add	r3, r1
 800ba0e:	333a      	adds	r3, #58	@ 0x3a
 800ba10:	881b      	ldrh	r3, [r3, #0]
 800ba12:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 800ba14:	7dfa      	ldrb	r2, [r7, #23]
 800ba16:	68f9      	ldr	r1, [r7, #12]
 800ba18:	4613      	mov	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4413      	add	r3, r2
 800ba1e:	005b      	lsls	r3, r3, #1
 800ba20:	440b      	add	r3, r1
 800ba22:	333d      	adds	r3, #61	@ 0x3d
 800ba24:	781a      	ldrb	r2, [r3, #0]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 800ba2c:	7dfa      	ldrb	r2, [r7, #23]
 800ba2e:	68f9      	ldr	r1, [r7, #12]
 800ba30:	4613      	mov	r3, r2
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	4413      	add	r3, r2
 800ba36:	005b      	lsls	r3, r3, #1
 800ba38:	440b      	add	r3, r1
 800ba3a:	333c      	adds	r3, #60	@ 0x3c
 800ba3c:	781a      	ldrb	r2, [r3, #0]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 800ba44:	7dfa      	ldrb	r2, [r7, #23]
 800ba46:	68f9      	ldr	r1, [r7, #12]
 800ba48:	4613      	mov	r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	4413      	add	r3, r2
 800ba4e:	005b      	lsls	r3, r3, #1
 800ba50:	440b      	add	r3, r1
 800ba52:	3338      	adds	r3, #56	@ 0x38
 800ba54:	781a      	ldrb	r2, [r3, #0]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 800ba5c:	7dfa      	ldrb	r2, [r7, #23]
 800ba5e:	68f9      	ldr	r1, [r7, #12]
 800ba60:	4613      	mov	r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	4413      	add	r3, r2
 800ba66:	005b      	lsls	r3, r3, #1
 800ba68:	440b      	add	r3, r1
 800ba6a:	333a      	adds	r3, #58	@ 0x3a
 800ba6c:	881a      	ldrh	r2, [r3, #0]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 800ba74:	7dfa      	ldrb	r2, [r7, #23]
 800ba76:	68f9      	ldr	r1, [r7, #12]
 800ba78:	4613      	mov	r3, r2
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	4413      	add	r3, r2
 800ba7e:	005b      	lsls	r3, r3, #1
 800ba80:	440b      	add	r3, r1
 800ba82:	3340      	adds	r3, #64	@ 0x40
 800ba84:	881b      	ldrh	r3, [r3, #0]
 800ba86:	b2da      	uxtb	r2, r3
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2201      	movs	r2, #1
 800ba92:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 800ba96:	7dfa      	ldrb	r2, [r7, #23]
 800ba98:	68f9      	ldr	r1, [r7, #12]
 800ba9a:	4613      	mov	r3, r2
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	4413      	add	r3, r2
 800baa0:	005b      	lsls	r3, r3, #1
 800baa2:	440b      	add	r3, r1
 800baa4:	330c      	adds	r3, #12
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d156      	bne.n	800bb5a <USBH_AUDIO_InterfaceInit+0x20e>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 800baac:	7dfa      	ldrb	r2, [r7, #23]
 800baae:	68f9      	ldr	r1, [r7, #12]
 800bab0:	4613      	mov	r3, r2
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	4413      	add	r3, r2
 800bab6:	005b      	lsls	r3, r3, #1
 800bab8:	440b      	add	r3, r1
 800baba:	3308      	adds	r3, #8
 800babc:	881b      	ldrh	r3, [r3, #0]
 800babe:	8a7a      	ldrh	r2, [r7, #18]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d24a      	bcs.n	800bb5a <USBH_AUDIO_InterfaceInit+0x20e>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 800bac4:	7dfa      	ldrb	r2, [r7, #23]
 800bac6:	68f9      	ldr	r1, [r7, #12]
 800bac8:	4613      	mov	r3, r2
 800baca:	009b      	lsls	r3, r3, #2
 800bacc:	4413      	add	r3, r2
 800bace:	005b      	lsls	r3, r3, #1
 800bad0:	440b      	add	r3, r1
 800bad2:	3308      	adds	r3, #8
 800bad4:	881b      	ldrh	r3, [r3, #0]
 800bad6:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 800bad8:	7dfa      	ldrb	r2, [r7, #23]
 800bada:	68f9      	ldr	r1, [r7, #12]
 800badc:	4613      	mov	r3, r2
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	4413      	add	r3, r2
 800bae2:	005b      	lsls	r3, r3, #1
 800bae4:	440b      	add	r3, r1
 800bae6:	330b      	adds	r3, #11
 800bae8:	781a      	ldrb	r2, [r3, #0]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 800baf0:	7dfa      	ldrb	r2, [r7, #23]
 800baf2:	68f9      	ldr	r1, [r7, #12]
 800baf4:	4613      	mov	r3, r2
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	4413      	add	r3, r2
 800bafa:	005b      	lsls	r3, r3, #1
 800bafc:	440b      	add	r3, r1
 800bafe:	330a      	adds	r3, #10
 800bb00:	781a      	ldrb	r2, [r3, #0]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 800bb08:	7dfa      	ldrb	r2, [r7, #23]
 800bb0a:	68f9      	ldr	r1, [r7, #12]
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	4413      	add	r3, r2
 800bb12:	005b      	lsls	r3, r3, #1
 800bb14:	440b      	add	r3, r1
 800bb16:	3306      	adds	r3, #6
 800bb18:	781a      	ldrb	r2, [r3, #0]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 800bb20:	7dfa      	ldrb	r2, [r7, #23]
 800bb22:	68f9      	ldr	r1, [r7, #12]
 800bb24:	4613      	mov	r3, r2
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	4413      	add	r3, r2
 800bb2a:	005b      	lsls	r3, r3, #1
 800bb2c:	440b      	add	r3, r1
 800bb2e:	3308      	adds	r3, #8
 800bb30:	881a      	ldrh	r2, [r3, #0]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f8a3 213e 	strh.w	r2, [r3, #318]	@ 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 800bb38:	7dfa      	ldrb	r2, [r7, #23]
 800bb3a:	68f9      	ldr	r1, [r7, #12]
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4413      	add	r3, r2
 800bb42:	005b      	lsls	r3, r3, #1
 800bb44:	440b      	add	r3, r1
 800bb46:	3340      	adds	r3, #64	@ 0x40
 800bb48:	881b      	ldrh	r3, [r3, #0]
 800bb4a:	b2da      	uxtb	r2, r3
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
        AUDIO_Handle->microphone.supported = 1U;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2201      	movs	r2, #1
 800bb56:	f883 2142 	strb.w	r2, [r3, #322]	@ 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 800bb5a:	7dfb      	ldrb	r3, [r7, #23]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	75fb      	strb	r3, [r7, #23]
 800bb60:	7dfb      	ldrb	r3, [r7, #23]
 800bb62:	2b04      	cmp	r3, #4
 800bb64:	f67f af35 	bls.w	800b9d2 <USBH_AUDIO_InterfaceInit+0x86>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 fcd4 	bl	800c516 <USBH_AUDIO_FindHIDControl>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d103      	bne.n	800bb7c <USBH_AUDIO_InterfaceInit+0x230>
  {
    AUDIO_Handle->control.supported = 1U;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2201      	movs	r2, #1
 800bb78:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  (void)USBH_AUDIO_ParseCSDescriptors(phost);
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 fd4c 	bl	800c61a <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d12e      	bne.n	800bbea <USBH_AUDIO_InterfaceInit+0x29e>
  {
    (void)USBH_AUDIO_BuildHeadphonePath(phost);
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 ff87 	bl	800caa0 <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 800bb98:	4619      	mov	r1, r3
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f003 fd50 	bl	800f640 <USBH_AllocPipe>
 800bba0:	4603      	mov	r3, r0
 800bba2:	461a      	mov	r2, r3
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f883 20fb 	strb.w	r2, [r3, #251]	@ 0xfb

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f893 10fb 	ldrb.w	r1, [r3, #251]	@ 0xfb
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f893 00f4 	ldrb.w	r0, [r3, #244]	@ 0xf4
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f893 461c 	ldrb.w	r4, [r3, #1564]	@ 0x61c
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f893 361d 	ldrb.w	r3, [r3, #1565]	@ 0x61d
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	@ 0xf6
 800bbc8:	9202      	str	r2, [sp, #8]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	9201      	str	r2, [sp, #4]
 800bbce:	9300      	str	r3, [sp, #0]
 800bbd0:	4623      	mov	r3, r4
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f003 fd04 	bl	800f5e2 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->headphone.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f004 f8be 	bl	800fd66 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d12e      	bne.n	800bc52 <USBH_AUDIO_InterfaceInit+0x306>
  {
    (void)USBH_AUDIO_BuildMicrophonePath(phost);
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 fecb 	bl	800c990 <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 800bc00:	4619      	mov	r1, r3
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f003 fd1c 	bl	800f640 <USBH_AllocPipe>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f893 1143 	ldrb.w	r1, [r3, #323]	@ 0x143
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f893 013c 	ldrb.w	r0, [r3, #316]	@ 0x13c
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f893 461c 	ldrb.w	r4, [r3, #1564]	@ 0x61c
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f893 361d 	ldrb.w	r3, [r3, #1565]	@ 0x61d
 800bc2a:	68fa      	ldr	r2, [r7, #12]
 800bc2c:	f8b2 213e 	ldrh.w	r2, [r2, #318]	@ 0x13e
 800bc30:	9202      	str	r2, [sp, #8]
 800bc32:	2201      	movs	r2, #1
 800bc34:	9201      	str	r2, [sp, #4]
 800bc36:	9300      	str	r3, [sp, #0]
 800bc38:	4623      	mov	r3, r4
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f003 fcd0 	bl	800f5e2 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->microphone.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 800bc48:	2200      	movs	r2, #0
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f004 f88a 	bl	800fd66 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d12b      	bne.n	800bcb4 <USBH_AUDIO_InterfaceInit+0x368>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 800bc62:	4619      	mov	r1, r3
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f003 fceb 	bl	800f640 <USBH_AllocPipe>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f883 218a 	strb.w	r2, [r3, #394]	@ 0x18a

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f893 118a 	ldrb.w	r1, [r3, #394]	@ 0x18a
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f893 0184 	ldrb.w	r0, [r3, #388]	@ 0x184
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 461c 	ldrb.w	r4, [r3, #1564]	@ 0x61c
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f893 361d 	ldrb.w	r3, [r3, #1565]	@ 0x61d
 800bc8c:	68fa      	ldr	r2, [r7, #12]
 800bc8e:	f8b2 2186 	ldrh.w	r2, [r2, #390]	@ 0x186
 800bc92:	9202      	str	r2, [sp, #8]
 800bc94:	2203      	movs	r2, #3
 800bc96:	9201      	str	r2, [sp, #4]
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	4623      	mov	r3, r4
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f003 fc9f 	bl	800f5e2 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        AUDIO_Handle->control.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 800bcaa:	2200      	movs	r2, #0
 800bcac:	4619      	mov	r1, r3
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f004 f859 	bl	800fd66 <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	371c      	adds	r7, #28
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd90      	pop	{r4, r7, pc}

0800bcca <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b084      	sub	sp, #16
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800bcd8:	69db      	ldr	r3, [r3, #28]
 800bcda:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d011      	beq.n	800bd0a <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    (void)USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 800bcec:	4619      	mov	r1, r3
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f003 fc96 	bl	800f620 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f003 fcc0 	bl	800f682 <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2200      	movs	r2, #0
 800bd06:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d011      	beq.n	800bd38 <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    (void)USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f003 fc7f 	bl	800f620 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 800bd28:	4619      	mov	r1, r3
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f003 fca9 	bl	800f682 <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2200      	movs	r2, #0
 800bd34:	f883 20fb 	strb.w	r2, [r3, #251]	@ 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d011      	beq.n	800bd66 <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    (void)USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 800bd48:	4619      	mov	r1, r3
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f003 fc68 	bl	800f620 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 800bd56:	4619      	mov	r1, r3
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f003 fc92 	bl	800f682 <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 218a 	strb.w	r2, [r3, #394]	@ 0x18a
  }

  if ((phost->pActiveClass->pData) != 0U)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800bd6c:	69db      	ldr	r3, [r3, #28]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00b      	beq.n	800bd8a <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free(phost->pActiveClass->pData);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800bd78:	69db      	ldr	r3, [r3, #28]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f004 f866 	bl	800fe4c <free>
    phost->pActiveClass->pData = 0U;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800bd86:	2200      	movs	r2, #0
 800bd88:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK;
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3710      	adds	r7, #16
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b086      	sub	sp, #24
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800bda2:	69db      	ldr	r3, [r3, #28]
 800bda4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bda6:	2301      	movs	r3, #1
 800bda8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	3b01      	subs	r3, #1
 800bdb4:	2b06      	cmp	r3, #6
 800bdb6:	f200 80e3 	bhi.w	800bf80 <USBH_AUDIO_ClassRequest+0x1ec>
 800bdba:	a201      	add	r2, pc, #4	@ (adr r2, 800bdc0 <USBH_AUDIO_ClassRequest+0x2c>)
 800bdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc0:	0800bddd 	.word	0x0800bddd
 800bdc4:	0800bf69 	.word	0x0800bf69
 800bdc8:	0800bddd 	.word	0x0800bddd
 800bdcc:	0800be31 	.word	0x0800be31
 800bdd0:	0800bebd 	.word	0x0800bebd
 800bdd4:	0800bf13 	.word	0x0800bf13
 800bdd8:	0800bea9 	.word	0x0800bea9
  {
    case AUDIO_REQ_INIT:
    case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d120      	bne.n	800be28 <USBH_AUDIO_ClassRequest+0x94>
      {
        req_status = USBH_SetInterface(phost,
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 800bdec:	2200      	movs	r2, #0
 800bdee:	4619      	mov	r1, r3
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f002 fe43 	bl	800ea7c <USBH_SetInterface>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d103      	bne.n	800be08 <USBH_AUDIO_ClassRequest+0x74>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	2204      	movs	r2, #4
 800be04:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800be06:	e0bd      	b.n	800bf84 <USBH_AUDIO_ClassRequest+0x1f0>
        else if (req_status == USBH_NOT_SUPPORTED)
 800be08:	7bfb      	ldrb	r3, [r7, #15]
 800be0a:	2b03      	cmp	r3, #3
 800be0c:	f040 80ba 	bne.w	800bf84 <USBH_AUDIO_ClassRequest+0x1f0>
          USBH_ErrLog("Control error: AUDIO: Device Set interface request failed");
 800be10:	4863      	ldr	r0, [pc, #396]	@ (800bfa0 <USBH_AUDIO_ClassRequest+0x20c>)
 800be12:	f004 f993 	bl	801013c <iprintf>
 800be16:	4863      	ldr	r0, [pc, #396]	@ (800bfa4 <USBH_AUDIO_ClassRequest+0x210>)
 800be18:	f004 f990 	bl	801013c <iprintf>
 800be1c:	200a      	movs	r0, #10
 800be1e:	f004 f99f 	bl	8010160 <putchar>
          status = USBH_FAIL;
 800be22:	2302      	movs	r3, #2
 800be24:	75fb      	strb	r3, [r7, #23]
      break;
 800be26:	e0ad      	b.n	800bf84 <USBH_AUDIO_ClassRequest+0x1f0>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	2204      	movs	r2, #4
 800be2c:	701a      	strb	r2, [r3, #0]
      break;
 800be2e:	e0a9      	b.n	800bf84 <USBH_AUDIO_ClassRequest+0x1f0>

    case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 800be36:	2b01      	cmp	r3, #1
 800be38:	d12f      	bne.n	800be9a <USBH_AUDIO_ClassRequest+0x106>
      {
        req_status = USBH_SetInterface(phost,
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 800be40:	2200      	movs	r2, #0
 800be42:	4619      	mov	r1, r3
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f002 fe19 	bl	800ea7c <USBH_SetInterface>
 800be4a:	4603      	mov	r3, r0
 800be4c:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 800be4e:	7bfb      	ldrb	r3, [r7, #15]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d112      	bne.n	800be7a <USBH_AUDIO_ClassRequest+0xe6>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	2207      	movs	r2, #7
 800be58:	701a      	strb	r2, [r3, #0]
          AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	2206      	movs	r2, #6
 800be5e:	705a      	strb	r2, [r3, #1]

          AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
          AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800be78:	e086      	b.n	800bf88 <USBH_AUDIO_ClassRequest+0x1f4>
        else if (req_status == USBH_NOT_SUPPORTED)
 800be7a:	7bfb      	ldrb	r3, [r7, #15]
 800be7c:	2b03      	cmp	r3, #3
 800be7e:	f040 8083 	bne.w	800bf88 <USBH_AUDIO_ClassRequest+0x1f4>
          USBH_ErrLog("Control error: AUDIO: Device Set interface request failed");
 800be82:	4847      	ldr	r0, [pc, #284]	@ (800bfa0 <USBH_AUDIO_ClassRequest+0x20c>)
 800be84:	f004 f95a 	bl	801013c <iprintf>
 800be88:	4846      	ldr	r0, [pc, #280]	@ (800bfa4 <USBH_AUDIO_ClassRequest+0x210>)
 800be8a:	f004 f957 	bl	801013c <iprintf>
 800be8e:	200a      	movs	r0, #10
 800be90:	f004 f966 	bl	8010160 <putchar>
          status = USBH_FAIL;
 800be94:	2302      	movs	r3, #2
 800be96:	75fb      	strb	r3, [r7, #23]
      break;
 800be98:	e076      	b.n	800bf88 <USBH_AUDIO_ClassRequest+0x1f4>
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	2207      	movs	r2, #7
 800be9e:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	2206      	movs	r2, #6
 800bea4:	705a      	strb	r2, [r3, #1]
      break;
 800bea6:	e06f      	b.n	800bf88 <USBH_AUDIO_ClassRequest+0x1f4>

    case AUDIO_REQ_CS_REQUESTS:
      if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 f94d 	bl	800c148 <USBH_AUDIO_HandleCSRequest>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d16b      	bne.n	800bf8c <USBH_AUDIO_ClassRequest+0x1f8>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	2205      	movs	r2, #5
 800beb8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800beba:	e067      	b.n	800bf8c <USBH_AUDIO_ClassRequest+0x1f8>

    case AUDIO_REQ_SET_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d121      	bne.n	800bf0a <USBH_AUDIO_ClassRequest+0x176>
      {
        req_status = USBH_SetInterface(phost,
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	f893 1140 	ldrb.w	r1, [r3, #320]	@ 0x140
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	f893 3141 	ldrb.w	r3, [r3, #321]	@ 0x141
 800bed2:	461a      	mov	r2, r3
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f002 fdd1 	bl	800ea7c <USBH_SetInterface>
 800beda:	4603      	mov	r3, r0
 800bedc:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       AUDIO_Handle->microphone.AltSettings);

        if (req_status == USBH_OK)
 800bede:	7bfb      	ldrb	r3, [r7, #15]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d103      	bne.n	800beec <USBH_AUDIO_ClassRequest+0x158>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	2206      	movs	r2, #6
 800bee8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800beea:	e051      	b.n	800bf90 <USBH_AUDIO_ClassRequest+0x1fc>
        else if (req_status == USBH_NOT_SUPPORTED)
 800beec:	7bfb      	ldrb	r3, [r7, #15]
 800beee:	2b03      	cmp	r3, #3
 800bef0:	d14e      	bne.n	800bf90 <USBH_AUDIO_ClassRequest+0x1fc>
          USBH_ErrLog("Control error: AUDIO: Device Set interface request failed");
 800bef2:	482b      	ldr	r0, [pc, #172]	@ (800bfa0 <USBH_AUDIO_ClassRequest+0x20c>)
 800bef4:	f004 f922 	bl	801013c <iprintf>
 800bef8:	482a      	ldr	r0, [pc, #168]	@ (800bfa4 <USBH_AUDIO_ClassRequest+0x210>)
 800befa:	f004 f91f 	bl	801013c <iprintf>
 800befe:	200a      	movs	r0, #10
 800bf00:	f004 f92e 	bl	8010160 <putchar>
          status = USBH_FAIL;
 800bf04:	2302      	movs	r3, #2
 800bf06:	75fb      	strb	r3, [r7, #23]
      break;
 800bf08:	e042      	b.n	800bf90 <USBH_AUDIO_ClassRequest+0x1fc>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	2206      	movs	r2, #6
 800bf0e:	701a      	strb	r2, [r3, #0]
      break;
 800bf10:	e03e      	b.n	800bf90 <USBH_AUDIO_ClassRequest+0x1fc>
    case AUDIO_REQ_SET_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d121      	bne.n	800bf60 <USBH_AUDIO_ClassRequest+0x1cc>
      {
        req_status = USBH_SetInterface(phost,
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	f893 10f8 	ldrb.w	r1, [r3, #248]	@ 0xf8
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 800bf28:	461a      	mov	r2, r3
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f002 fda6 	bl	800ea7c <USBH_SetInterface>
 800bf30:	4603      	mov	r3, r0
 800bf32:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       AUDIO_Handle->headphone.AltSettings);

        if (req_status == USBH_OK)
 800bf34:	7bfb      	ldrb	r3, [r7, #15]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d103      	bne.n	800bf42 <USBH_AUDIO_ClassRequest+0x1ae>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	2202      	movs	r2, #2
 800bf3e:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800bf40:	e028      	b.n	800bf94 <USBH_AUDIO_ClassRequest+0x200>
        else if (req_status == USBH_NOT_SUPPORTED)
 800bf42:	7bfb      	ldrb	r3, [r7, #15]
 800bf44:	2b03      	cmp	r3, #3
 800bf46:	d125      	bne.n	800bf94 <USBH_AUDIO_ClassRequest+0x200>
          USBH_ErrLog("Control error: AUDIO: Device Set interface request failed");
 800bf48:	4815      	ldr	r0, [pc, #84]	@ (800bfa0 <USBH_AUDIO_ClassRequest+0x20c>)
 800bf4a:	f004 f8f7 	bl	801013c <iprintf>
 800bf4e:	4815      	ldr	r0, [pc, #84]	@ (800bfa4 <USBH_AUDIO_ClassRequest+0x210>)
 800bf50:	f004 f8f4 	bl	801013c <iprintf>
 800bf54:	200a      	movs	r0, #10
 800bf56:	f004 f903 	bl	8010160 <putchar>
          status = USBH_FAIL;
 800bf5a:	2302      	movs	r3, #2
 800bf5c:	75fb      	strb	r3, [r7, #23]
      break;
 800bf5e:	e019      	b.n	800bf94 <USBH_AUDIO_ClassRequest+0x200>
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	2202      	movs	r2, #2
 800bf64:	701a      	strb	r2, [r3, #0]
      break;
 800bf66:	e015      	b.n	800bf94 <USBH_AUDIO_ClassRequest+0x200>
    case AUDIO_REQ_IDLE:
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 800bf74:	2102      	movs	r1, #2
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	4798      	blx	r3
      status  = USBH_OK;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800bf7e:	e00a      	b.n	800bf96 <USBH_AUDIO_ClassRequest+0x202>

    default:
      break;
 800bf80:	bf00      	nop
 800bf82:	e008      	b.n	800bf96 <USBH_AUDIO_ClassRequest+0x202>
      break;
 800bf84:	bf00      	nop
 800bf86:	e006      	b.n	800bf96 <USBH_AUDIO_ClassRequest+0x202>
      break;
 800bf88:	bf00      	nop
 800bf8a:	e004      	b.n	800bf96 <USBH_AUDIO_ClassRequest+0x202>
      break;
 800bf8c:	bf00      	nop
 800bf8e:	e002      	b.n	800bf96 <USBH_AUDIO_ClassRequest+0x202>
      break;
 800bf90:	bf00      	nop
 800bf92:	e000      	b.n	800bf96 <USBH_AUDIO_ClassRequest+0x202>
      break;
 800bf94:	bf00      	nop
  }
  return status;
 800bf96:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3718      	adds	r7, #24
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	08010f30 	.word	0x08010f30
 800bfa4:	08010f38 	.word	0x08010f38

0800bfa8 <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b088      	sub	sp, #32
 800bfac:	af02      	add	r7, sp, #8
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	70fb      	strb	r3, [r7, #3]
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800bfbe:	69db      	ldr	r3, [r3, #28]
 800bfc0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	785b      	ldrb	r3, [r3, #1]
 800bfce:	3b04      	subs	r3, #4
 800bfd0:	2b04      	cmp	r3, #4
 800bfd2:	f200 80aa 	bhi.w	800c12a <USBH_AUDIO_CSRequest+0x182>
 800bfd6:	a201      	add	r2, pc, #4	@ (adr r2, 800bfdc <USBH_AUDIO_CSRequest+0x34>)
 800bfd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfdc:	0800c039 	.word	0x0800c039
 800bfe0:	0800c07f 	.word	0x0800c07f
 800bfe4:	0800bff1 	.word	0x0800bff1
 800bfe8:	0800c0df 	.word	0x0800c0df
 800bfec:	0800c125 	.word	0x0800c125
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 800bff0:	78fa      	ldrb	r2, [r7, #3]
 800bff2:	2302      	movs	r3, #2
 800bff4:	9301      	str	r3, [sp, #4]
 800bff6:	78bb      	ldrb	r3, [r7, #2]
 800bff8:	9300      	str	r3, [sp, #0]
 800bffa:	2302      	movs	r3, #2
 800bffc:	2106      	movs	r1, #6
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 fe8a 	bl	800cd18 <USBH_AC_GetCur>
 800c004:	4603      	mov	r3, r0
 800c006:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 800c008:	7bfb      	ldrb	r3, [r7, #15]
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	f000 808f 	beq.w	800c12e <USBH_AUDIO_CSRequest+0x186>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	2204      	movs	r2, #4
 800c014:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800c022:	3302      	adds	r3, #2
 800c024:	881b      	ldrh	r3, [r3, #0]
 800c026:	021b      	lsls	r3, r3, #8
 800c028:	b29b      	uxth	r3, r3
 800c02a:	4313      	orrs	r3, r2
 800c02c:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 800c02e:	897a      	ldrh	r2, [r7, #10]
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      }
      break;
 800c036:	e07a      	b.n	800c12e <USBH_AUDIO_CSRequest+0x186>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 800c038:	78fa      	ldrb	r2, [r7, #3]
 800c03a:	2302      	movs	r3, #2
 800c03c:	9301      	str	r3, [sp, #4]
 800c03e:	78bb      	ldrb	r3, [r7, #2]
 800c040:	9300      	str	r3, [sp, #0]
 800c042:	2302      	movs	r3, #2
 800c044:	2106      	movs	r1, #6
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f001 f82b 	bl	800d0a2 <USBH_AC_GetMin>
 800c04c:	4603      	mov	r3, r0
 800c04e:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 800c050:	7bfb      	ldrb	r3, [r7, #15]
 800c052:	2b01      	cmp	r3, #1
 800c054:	d06d      	beq.n	800c132 <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	2205      	movs	r2, #5
 800c05a:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800c068:	3302      	adds	r3, #2
 800c06a:	881b      	ldrh	r3, [r3, #0]
 800c06c:	021b      	lsls	r3, r3, #8
 800c06e:	b29b      	uxth	r3, r3
 800c070:	4313      	orrs	r3, r2
 800c072:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 800c074:	897a      	ldrh	r2, [r7, #10]
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
      }
      break;
 800c07c:	e059      	b.n	800c132 <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 800c07e:	78fa      	ldrb	r2, [r7, #3]
 800c080:	2302      	movs	r3, #2
 800c082:	9301      	str	r3, [sp, #4]
 800c084:	78bb      	ldrb	r3, [r7, #2]
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	2302      	movs	r3, #2
 800c08a:	2106      	movs	r1, #6
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 feda 	bl	800ce46 <USBH_AC_GetMax>
 800c092:	4603      	mov	r3, r0
 800c094:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 800c096:	7bfb      	ldrb	r3, [r7, #15]
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d04c      	beq.n	800c136 <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	2207      	movs	r2, #7
 800c0a0:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800c0ae:	3302      	adds	r3, #2
 800c0b0:	881b      	ldrh	r3, [r3, #0]
 800c0b2:	021b      	lsls	r3, r3, #8
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 800c0ba:	897a      	ldrh	r2, [r7, #10]
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d231      	bcs.n	800c136 <USBH_AUDIO_CSRequest+0x18e>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 800c0d8:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        }
      }
      break;
 800c0dc:	e02b      	b.n	800c136 <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 800c0de:	78fa      	ldrb	r2, [r7, #3]
 800c0e0:	2302      	movs	r3, #2
 800c0e2:	9301      	str	r3, [sp, #4]
 800c0e4:	78bb      	ldrb	r3, [r7, #2]
 800c0e6:	9300      	str	r3, [sp, #0]
 800c0e8:	2302      	movs	r3, #2
 800c0ea:	2106      	movs	r1, #6
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 ff41 	bl	800cf74 <USBH_AC_GetRes>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 800c0f6:	7bfb      	ldrb	r3, [r7, #15]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d01e      	beq.n	800c13a <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	2208      	movs	r2, #8
 800c100:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800c10e:	3302      	adds	r3, #2
 800c110:	881b      	ldrh	r3, [r3, #0]
 800c112:	021b      	lsls	r3, r3, #8
 800c114:	b29b      	uxth	r3, r3
 800c116:	4313      	orrs	r3, r2
 800c118:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 800c11a:	89ba      	ldrh	r2, [r7, #12]
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
      }
      break;
 800c122:	e00a      	b.n	800c13a <USBH_AUDIO_CSRequest+0x192>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 800c124:	2300      	movs	r3, #0
 800c126:	75fb      	strb	r3, [r7, #23]
      break;
 800c128:	e008      	b.n	800c13c <USBH_AUDIO_CSRequest+0x194>

    default:
      break;
 800c12a:	bf00      	nop
 800c12c:	e006      	b.n	800c13c <USBH_AUDIO_CSRequest+0x194>
      break;
 800c12e:	bf00      	nop
 800c130:	e004      	b.n	800c13c <USBH_AUDIO_CSRequest+0x194>
      break;
 800c132:	bf00      	nop
 800c134:	e002      	b.n	800c13c <USBH_AUDIO_CSRequest+0x194>
      break;
 800c136:	bf00      	nop
 800c138:	e000      	b.n	800c13c <USBH_AUDIO_CSRequest+0x194>
      break;
 800c13a:	bf00      	nop
  }
  return status;
 800c13c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3718      	adds	r7, #24
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop

0800c148 <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 800c150:	2301      	movs	r3, #1
 800c152:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 800c154:	2301      	movs	r3, #1
 800c156:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800c15e:	69db      	ldr	r3, [r3, #28]
 800c160:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	f893 11a0 	ldrb.w	r1, [r3, #416]	@ 0x1a0
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 800c16e:	461a      	mov	r2, r3
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f7ff ff19 	bl	800bfa8 <USBH_AUDIO_CSRequest>
 800c176:	4603      	mov	r3, r0
 800c178:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 800c17a:	7bbb      	ldrb	r3, [r7, #14]
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d01c      	beq.n	800c1ba <USBH_AUDIO_HandleCSRequest+0x72>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 800c186:	2b01      	cmp	r3, #1
 800c188:	d10c      	bne.n	800c1a4 <USBH_AUDIO_HandleCSRequest+0x5c>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	2200      	movs	r2, #0
 800c19a:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
      status = USBH_OK;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	73fb      	strb	r3, [r7, #15]
 800c1a2:	e007      	b.n	800c1b4 <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	b2da      	uxtb	r2, r3
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	2206      	movs	r2, #6
 800c1b8:	705a      	strb	r2, [r3, #1]
#if (USBH_USE_OS == 1U)
    USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
  }

  return status;
 800c1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3710      	adds	r7, #16
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800c1d6:	69db      	ldr	r3, [r3, #28]
 800c1d8:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d102      	bne.n	800c1ea <USBH_AUDIO_Process+0x26>
  {
    (void)USBH_AUDIO_OutputStream(phost);
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f001 f8dd 	bl	800d3a4 <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d102      	bne.n	800c1fa <USBH_AUDIO_Process+0x36>
  {
    (void)USBH_AUDIO_InputStream(phost);
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f001 f813 	bl	800d220 <USBH_AUDIO_InputStream>
  }

  return status;
 800c1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3710      	adds	r7, #16
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr

0800c21a <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 800c21a:	b480      	push	{r7}
 800c21c:	b085      	sub	sp, #20
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL;
 800c222:	2302      	movs	r3, #2
 800c224:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800c22c:	69db      	ldr	r3, [r3, #28]
 800c22e:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 800c230:	2300      	movs	r3, #0
 800c232:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800c234:	2300      	movs	r3, #0
 800c236:	73fb      	strb	r3, [r7, #15]
 800c238:	e09e      	b.n	800c378 <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 800c23a:	7bfb      	ldrb	r3, [r7, #15]
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	213a      	movs	r1, #58	@ 0x3a
 800c240:	fb01 f303 	mul.w	r3, r1, r3
 800c244:	4413      	add	r3, r2
 800c246:	f203 6347 	addw	r3, r3, #1607	@ 0x647
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	f040 8090 	bne.w	800c372 <USBH_AUDIO_FindAudioStreamingIN+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 800c252:	7bfb      	ldrb	r3, [r7, #15]
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	213a      	movs	r1, #58	@ 0x3a
 800c258:	fb01 f303 	mul.w	r3, r1, r3
 800c25c:	4413      	add	r3, r2
 800c25e:	f503 63c9 	add.w	r3, r3, #1608	@ 0x648
 800c262:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 800c264:	2b02      	cmp	r3, #2
 800c266:	f040 8084 	bne.w	800c372 <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U) &&
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	213a      	movs	r1, #58	@ 0x3a
 800c270:	fb01 f303 	mul.w	r3, r1, r3
 800c274:	4413      	add	r3, r2
 800c276:	f203 634e 	addw	r3, r3, #1614	@ 0x64e
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	b25b      	sxtb	r3, r3
 800c27e:	2b00      	cmp	r3, #0
 800c280:	da77      	bge.n	800c372 <USBH_AUDIO_FindAudioStreamingIN+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 800c282:	7bfb      	ldrb	r3, [r7, #15]
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	213a      	movs	r1, #58	@ 0x3a
 800c288:	fb01 f303 	mul.w	r3, r1, r3
 800c28c:	4413      	add	r3, r2
 800c28e:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 800c292:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U) &&
 800c294:	2b00      	cmp	r3, #0
 800c296:	d06c      	beq.n	800c372 <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c298:	7bfb      	ldrb	r3, [r7, #15]
 800c29a:	7bba      	ldrb	r2, [r7, #14]
 800c29c:	6879      	ldr	r1, [r7, #4]
 800c29e:	203a      	movs	r0, #58	@ 0x3a
 800c2a0:	fb00 f303 	mul.w	r3, r0, r3
 800c2a4:	440b      	add	r3, r1
 800c2a6:	f203 634e 	addw	r3, r3, #1614	@ 0x64e
 800c2aa:	7818      	ldrb	r0, [r3, #0]
 800c2ac:	68b9      	ldr	r1, [r7, #8]
 800c2ae:	4613      	mov	r3, r2
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	4413      	add	r3, r2
 800c2b4:	005b      	lsls	r3, r3, #1
 800c2b6:	440b      	add	r3, r1
 800c2b8:	3306      	adds	r3, #6
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c2be:	7bfb      	ldrb	r3, [r7, #15]
 800c2c0:	7bba      	ldrb	r2, [r7, #14]
 800c2c2:	6879      	ldr	r1, [r7, #4]
 800c2c4:	203a      	movs	r0, #58	@ 0x3a
 800c2c6:	fb00 f303 	mul.w	r3, r0, r3
 800c2ca:	440b      	add	r3, r1
 800c2cc:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 800c2d0:	8818      	ldrh	r0, [r3, #0]
 800c2d2:	68b9      	ldr	r1, [r7, #8]
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	4413      	add	r3, r2
 800c2da:	005b      	lsls	r3, r3, #1
 800c2dc:	440b      	add	r3, r1
 800c2de:	3308      	adds	r3, #8
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 800c2e4:	7bfb      	ldrb	r3, [r7, #15]
 800c2e6:	7bba      	ldrb	r2, [r7, #14]
 800c2e8:	6879      	ldr	r1, [r7, #4]
 800c2ea:	203a      	movs	r0, #58	@ 0x3a
 800c2ec:	fb00 f303 	mul.w	r3, r0, r3
 800c2f0:	440b      	add	r3, r1
 800c2f2:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 800c2f6:	7818      	ldrb	r0, [r3, #0]
 800c2f8:	68b9      	ldr	r1, [r7, #8]
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	009b      	lsls	r3, r3, #2
 800c2fe:	4413      	add	r3, r2
 800c300:	005b      	lsls	r3, r3, #1
 800c302:	440b      	add	r3, r1
 800c304:	330b      	adds	r3, #11
 800c306:	4602      	mov	r2, r0
 800c308:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 800c30a:	7bfb      	ldrb	r3, [r7, #15]
 800c30c:	7bba      	ldrb	r2, [r7, #14]
 800c30e:	6879      	ldr	r1, [r7, #4]
 800c310:	203a      	movs	r0, #58	@ 0x3a
 800c312:	fb00 f303 	mul.w	r3, r0, r3
 800c316:	440b      	add	r3, r1
 800c318:	f203 6345 	addw	r3, r3, #1605	@ 0x645
 800c31c:	7818      	ldrb	r0, [r3, #0]
 800c31e:	68b9      	ldr	r1, [r7, #8]
 800c320:	4613      	mov	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	4413      	add	r3, r2
 800c326:	005b      	lsls	r3, r3, #1
 800c328:	440b      	add	r3, r1
 800c32a:	330a      	adds	r3, #10
 800c32c:	4602      	mov	r2, r0
 800c32e:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800c330:	7bfb      	ldrb	r3, [r7, #15]
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	213a      	movs	r1, #58	@ 0x3a
 800c336:	fb01 f303 	mul.w	r3, r1, r3
 800c33a:	4413      	add	r3, r2
 800c33c:	f203 6352 	addw	r3, r3, #1618	@ 0x652
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	7bba      	ldrb	r2, [r7, #14]
 800c344:	4618      	mov	r0, r3
 800c346:	68b9      	ldr	r1, [r7, #8]
 800c348:	4613      	mov	r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	4413      	add	r3, r2
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	440b      	add	r3, r1
 800c352:	330e      	adds	r3, #14
 800c354:	4602      	mov	r2, r0
 800c356:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 800c358:	7bba      	ldrb	r2, [r7, #14]
 800c35a:	68b9      	ldr	r1, [r7, #8]
 800c35c:	4613      	mov	r3, r2
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	4413      	add	r3, r2
 800c362:	005b      	lsls	r3, r3, #1
 800c364:	440b      	add	r3, r1
 800c366:	330c      	adds	r3, #12
 800c368:	2201      	movs	r2, #1
 800c36a:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 800c36c:	7bbb      	ldrb	r3, [r7, #14]
 800c36e:	3301      	adds	r3, #1
 800c370:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800c372:	7bfb      	ldrb	r3, [r7, #15]
 800c374:	3301      	adds	r3, #1
 800c376:	73fb      	strb	r3, [r7, #15]
 800c378:	7bfb      	ldrb	r3, [r7, #15]
 800c37a:	2b07      	cmp	r3, #7
 800c37c:	f67f af5d 	bls.w	800c23a <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 800c380:	7bbb      	ldrb	r3, [r7, #14]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d001      	beq.n	800c38a <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
    status = USBH_OK;
 800c386:	2300      	movs	r3, #0
 800c388:	737b      	strb	r3, [r7, #13]
  }

  return status;
 800c38a:	7b7b      	ldrb	r3, [r7, #13]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3714      	adds	r7, #20
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 800c398:	b480      	push	{r7}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL;
 800c3a0:	2302      	movs	r3, #2
 800c3a2:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800c3aa:	69db      	ldr	r3, [r3, #28]
 800c3ac:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	73fb      	strb	r3, [r7, #15]
 800c3b6:	e09e      	b.n	800c4f6 <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 800c3b8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	213a      	movs	r1, #58	@ 0x3a
 800c3be:	fb01 f303 	mul.w	r3, r1, r3
 800c3c2:	4413      	add	r3, r2
 800c3c4:	f203 6347 	addw	r3, r3, #1607	@ 0x647
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	f040 8090 	bne.w	800c4f0 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 800c3d0:	7bfb      	ldrb	r3, [r7, #15]
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	213a      	movs	r1, #58	@ 0x3a
 800c3d6:	fb01 f303 	mul.w	r3, r1, r3
 800c3da:	4413      	add	r3, r2
 800c3dc:	f503 63c9 	add.w	r3, r3, #1608	@ 0x648
 800c3e0:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 800c3e2:	2b02      	cmp	r3, #2
 800c3e4:	f040 8084 	bne.w	800c4f0 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	213a      	movs	r1, #58	@ 0x3a
 800c3ee:	fb01 f303 	mul.w	r3, r1, r3
 800c3f2:	4413      	add	r3, r2
 800c3f4:	f203 634e 	addw	r3, r3, #1614	@ 0x64e
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	b25b      	sxtb	r3, r3
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	db77      	blt.n	800c4f0 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 800c400:	7bfb      	ldrb	r3, [r7, #15]
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	213a      	movs	r1, #58	@ 0x3a
 800c406:	fb01 f303 	mul.w	r3, r1, r3
 800c40a:	4413      	add	r3, r2
 800c40c:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 800c410:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 800c412:	2b00      	cmp	r3, #0
 800c414:	d06c      	beq.n	800c4f0 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c416:	7bfb      	ldrb	r3, [r7, #15]
 800c418:	7bba      	ldrb	r2, [r7, #14]
 800c41a:	6879      	ldr	r1, [r7, #4]
 800c41c:	203a      	movs	r0, #58	@ 0x3a
 800c41e:	fb00 f303 	mul.w	r3, r0, r3
 800c422:	440b      	add	r3, r1
 800c424:	f203 634e 	addw	r3, r3, #1614	@ 0x64e
 800c428:	7818      	ldrb	r0, [r3, #0]
 800c42a:	68b9      	ldr	r1, [r7, #8]
 800c42c:	4613      	mov	r3, r2
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	4413      	add	r3, r2
 800c432:	005b      	lsls	r3, r3, #1
 800c434:	440b      	add	r3, r1
 800c436:	3338      	adds	r3, #56	@ 0x38
 800c438:	4602      	mov	r2, r0
 800c43a:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c43c:	7bfb      	ldrb	r3, [r7, #15]
 800c43e:	7bba      	ldrb	r2, [r7, #14]
 800c440:	6879      	ldr	r1, [r7, #4]
 800c442:	203a      	movs	r0, #58	@ 0x3a
 800c444:	fb00 f303 	mul.w	r3, r0, r3
 800c448:	440b      	add	r3, r1
 800c44a:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 800c44e:	8818      	ldrh	r0, [r3, #0]
 800c450:	68b9      	ldr	r1, [r7, #8]
 800c452:	4613      	mov	r3, r2
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	4413      	add	r3, r2
 800c458:	005b      	lsls	r3, r3, #1
 800c45a:	440b      	add	r3, r1
 800c45c:	333a      	adds	r3, #58	@ 0x3a
 800c45e:	4602      	mov	r2, r0
 800c460:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 800c462:	7bfb      	ldrb	r3, [r7, #15]
 800c464:	7bba      	ldrb	r2, [r7, #14]
 800c466:	6879      	ldr	r1, [r7, #4]
 800c468:	203a      	movs	r0, #58	@ 0x3a
 800c46a:	fb00 f303 	mul.w	r3, r0, r3
 800c46e:	440b      	add	r3, r1
 800c470:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 800c474:	7818      	ldrb	r0, [r3, #0]
 800c476:	68b9      	ldr	r1, [r7, #8]
 800c478:	4613      	mov	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	4413      	add	r3, r2
 800c47e:	005b      	lsls	r3, r3, #1
 800c480:	440b      	add	r3, r1
 800c482:	333d      	adds	r3, #61	@ 0x3d
 800c484:	4602      	mov	r2, r0
 800c486:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 800c488:	7bfb      	ldrb	r3, [r7, #15]
 800c48a:	7bba      	ldrb	r2, [r7, #14]
 800c48c:	6879      	ldr	r1, [r7, #4]
 800c48e:	203a      	movs	r0, #58	@ 0x3a
 800c490:	fb00 f303 	mul.w	r3, r0, r3
 800c494:	440b      	add	r3, r1
 800c496:	f203 6345 	addw	r3, r3, #1605	@ 0x645
 800c49a:	7818      	ldrb	r0, [r3, #0]
 800c49c:	68b9      	ldr	r1, [r7, #8]
 800c49e:	4613      	mov	r3, r2
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	4413      	add	r3, r2
 800c4a4:	005b      	lsls	r3, r3, #1
 800c4a6:	440b      	add	r3, r1
 800c4a8:	333c      	adds	r3, #60	@ 0x3c
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800c4ae:	7bfb      	ldrb	r3, [r7, #15]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	213a      	movs	r1, #58	@ 0x3a
 800c4b4:	fb01 f303 	mul.w	r3, r1, r3
 800c4b8:	4413      	add	r3, r2
 800c4ba:	f203 6352 	addw	r3, r3, #1618	@ 0x652
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	7bba      	ldrb	r2, [r7, #14]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	68b9      	ldr	r1, [r7, #8]
 800c4c6:	4613      	mov	r3, r2
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	4413      	add	r3, r2
 800c4cc:	005b      	lsls	r3, r3, #1
 800c4ce:	440b      	add	r3, r1
 800c4d0:	3340      	adds	r3, #64	@ 0x40
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 800c4d6:	7bba      	ldrb	r2, [r7, #14]
 800c4d8:	68b9      	ldr	r1, [r7, #8]
 800c4da:	4613      	mov	r3, r2
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	4413      	add	r3, r2
 800c4e0:	005b      	lsls	r3, r3, #1
 800c4e2:	440b      	add	r3, r1
 800c4e4:	333e      	adds	r3, #62	@ 0x3e
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 800c4ea:	7bbb      	ldrb	r3, [r7, #14]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800c4f0:	7bfb      	ldrb	r3, [r7, #15]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	73fb      	strb	r3, [r7, #15]
 800c4f6:	7bfb      	ldrb	r3, [r7, #15]
 800c4f8:	2b07      	cmp	r3, #7
 800c4fa:	f67f af5d 	bls.w	800c3b8 <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 800c4fe:	7bbb      	ldrb	r3, [r7, #14]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d001      	beq.n	800c508 <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
    status = USBH_OK;
 800c504:	2300      	movs	r3, #0
 800c506:	737b      	strb	r3, [r7, #13]
  }

  return status;
 800c508:	7b7b      	ldrb	r3, [r7, #13]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3714      	adds	r7, #20
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr

0800c516 <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 800c516:	b580      	push	{r7, lr}
 800c518:	b084      	sub	sp, #16
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 800c51e:	2302      	movs	r3, #2
 800c520:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800c528:	69db      	ldr	r3, [r3, #28]
 800c52a:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 800c52c:	23ff      	movs	r3, #255	@ 0xff
 800c52e:	2201      	movs	r2, #1
 800c530:	2101      	movs	r1, #1
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f001 fb34 	bl	800dba0 <USBH_FindInterface>
 800c538:	4603      	mov	r3, r0
 800c53a:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 800c53c:	7bfb      	ldrb	r3, [r7, #15]
 800c53e:	2bff      	cmp	r3, #255	@ 0xff
 800c540:	d002      	beq.n	800c548 <USBH_AUDIO_FindHIDControl+0x32>
 800c542:	7bfb      	ldrb	r3, [r7, #15]
 800c544:	2b07      	cmp	r3, #7
 800c546:	d901      	bls.n	800c54c <USBH_AUDIO_FindHIDControl+0x36>
  {
    return USBH_FAIL;
 800c548:	2302      	movs	r3, #2
 800c54a:	e062      	b.n	800c612 <USBH_AUDIO_FindHIDControl+0xfc>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800c54c:	2300      	movs	r3, #0
 800c54e:	73fb      	strb	r3, [r7, #15]
 800c550:	e05b      	b.n	800c60a <USBH_AUDIO_FindHIDControl+0xf4>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 800c552:	7bfb      	ldrb	r3, [r7, #15]
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	213a      	movs	r1, #58	@ 0x3a
 800c558:	fb01 f303 	mul.w	r3, r1, r3
 800c55c:	4413      	add	r3, r2
 800c55e:	f203 6347 	addw	r3, r3, #1607	@ 0x647
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	2b03      	cmp	r3, #3
 800c566:	d14d      	bne.n	800c604 <USBH_AUDIO_FindHIDControl+0xee>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 800c568:	7bfb      	ldrb	r3, [r7, #15]
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	213a      	movs	r1, #58	@ 0x3a
 800c56e:	fb01 f303 	mul.w	r3, r1, r3
 800c572:	4413      	add	r3, r2
 800c574:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 800c578:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d042      	beq.n	800c604 <USBH_AUDIO_FindHIDControl+0xee>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 800c57e:	7bfb      	ldrb	r3, [r7, #15]
 800c580:	687a      	ldr	r2, [r7, #4]
 800c582:	213a      	movs	r1, #58	@ 0x3a
 800c584:	fb01 f303 	mul.w	r3, r1, r3
 800c588:	4413      	add	r3, r2
 800c58a:	f203 634e 	addw	r3, r3, #1614	@ 0x64e
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	b25b      	sxtb	r3, r3
 800c592:	2b00      	cmp	r3, #0
 800c594:	da36      	bge.n	800c604 <USBH_AUDIO_FindHIDControl+0xee>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c596:	7bfb      	ldrb	r3, [r7, #15]
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	213a      	movs	r1, #58	@ 0x3a
 800c59c:	fb01 f303 	mul.w	r3, r1, r3
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f203 634e 	addw	r3, r3, #1614	@ 0x64e
 800c5a6:	781a      	ldrb	r2, [r3, #0]
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c5ae:	7bfb      	ldrb	r3, [r7, #15]
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	213a      	movs	r1, #58	@ 0x3a
 800c5b4:	fb01 f303 	mul.w	r3, r1, r3
 800c5b8:	4413      	add	r3, r2
 800c5ba:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 800c5be:	881a      	ldrh	r2, [r3, #0]
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	f8a3 2186 	strh.w	r2, [r3, #390]	@ 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 800c5c6:	7bfb      	ldrb	r3, [r7, #15]
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	213a      	movs	r1, #58	@ 0x3a
 800c5cc:	fb01 f303 	mul.w	r3, r1, r3
 800c5d0:	4413      	add	r3, r2
 800c5d2:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 800c5d6:	781a      	ldrb	r2, [r3, #0]
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800c5de:	7bfb      	ldrb	r3, [r7, #15]
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	213a      	movs	r1, #58	@ 0x3a
 800c5e4:	fb01 f303 	mul.w	r3, r1, r3
 800c5e8:	4413      	add	r3, r2
 800c5ea:	f203 6352 	addw	r3, r3, #1618	@ 0x652
 800c5ee:	781a      	ldrb	r2, [r3, #0]
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	f883 218b 	strb.w	r2, [r3, #395]	@ 0x18b
        AUDIO_Handle->control.supported = 1U;
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
        status = USBH_OK;
 800c5fe:	2300      	movs	r3, #0
 800c600:	73bb      	strb	r3, [r7, #14]
        break;
 800c602:	e005      	b.n	800c610 <USBH_AUDIO_FindHIDControl+0xfa>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800c604:	7bfb      	ldrb	r3, [r7, #15]
 800c606:	3301      	adds	r3, #1
 800c608:	73fb      	strb	r3, [r7, #15]
 800c60a:	7bfb      	ldrb	r3, [r7, #15]
 800c60c:	2b07      	cmp	r3, #7
 800c60e:	d9a0      	bls.n	800c552 <USBH_AUDIO_FindHIDControl+0x3c>
      }
    }
  }

  return status;
 800c610:	7bbb      	ldrb	r3, [r7, #14]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b088      	sub	sp, #32
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c622:	2300      	movs	r3, #0
 800c624:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 800c626:	2300      	movs	r3, #0
 800c628:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 800c62a:	2300      	movs	r3, #0
 800c62c:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800c634:	69db      	ldr	r3, [r3, #28]
 800c636:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	331c      	adds	r3, #28
 800c63c:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 800c63e:	2309      	movs	r3, #9
 800c640:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	2200      	movs	r2, #0
 800c646:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	2200      	movs	r2, #0
 800c64e:	f8a3 20ea 	strh.w	r2, [r3, #234]	@ 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	2200      	movs	r2, #0
 800c656:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	2200      	movs	r2, #0
 800c65e:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 800c662:	e03c      	b.n	800c6de <USBH_AUDIO_ParseCSDescriptors+0xc4>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c664:	f107 030c 	add.w	r3, r7, #12
 800c668:	4619      	mov	r1, r3
 800c66a:	69b8      	ldr	r0, [r7, #24]
 800c66c:	f002 fd48 	bl	800f100 <USBH_GetNextDesc>
 800c670:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	785b      	ldrb	r3, [r3, #1]
 800c676:	2b04      	cmp	r3, #4
 800c678:	d002      	beq.n	800c680 <USBH_AUDIO_ParseCSDescriptors+0x66>
 800c67a:	2b24      	cmp	r3, #36	@ 0x24
 800c67c:	d00f      	beq.n	800c69e <USBH_AUDIO_ParseCSDescriptors+0x84>
          }
        }
        break;

      default:
        break;
 800c67e:	e02e      	b.n	800c6de <USBH_AUDIO_ParseCSDescriptors+0xc4>
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	789b      	ldrb	r3, [r3, #2]
 800c684:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 800c686:	69bb      	ldr	r3, [r7, #24]
 800c688:	78db      	ldrb	r3, [r3, #3]
 800c68a:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 800c68c:	7bfa      	ldrb	r2, [r7, #15]
 800c68e:	7dbb      	ldrb	r3, [r7, #22]
 800c690:	4619      	mov	r1, r3
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f001 faca 	bl	800dc2c <USBH_FindInterfaceIndex>
 800c698:	4603      	mov	r3, r0
 800c69a:	75fb      	strb	r3, [r7, #23]
        break;
 800c69c:	e01f      	b.n	800c6de <USBH_AUDIO_ParseCSDescriptors+0xc4>
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f893 363c 	ldrb.w	r3, [r3, #1596]	@ 0x63c
 800c6a4:	7dba      	ldrb	r2, [r7, #22]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d818      	bhi.n	800c6dc <USBH_AUDIO_ParseCSDescriptors+0xc2>
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c6aa:	7dfb      	ldrb	r3, [r7, #23]
 800c6ac:	2bff      	cmp	r3, #255	@ 0xff
 800c6ae:	d002      	beq.n	800c6b6 <USBH_AUDIO_ParseCSDescriptors+0x9c>
 800c6b0:	7dfb      	ldrb	r3, [r7, #23]
 800c6b2:	2b07      	cmp	r3, #7
 800c6b4:	d902      	bls.n	800c6bc <USBH_AUDIO_ParseCSDescriptors+0xa2>
            status = USBH_FAIL;
 800c6b6:	2302      	movs	r3, #2
 800c6b8:	77fb      	strb	r3, [r7, #31]
        break;
 800c6ba:	e00f      	b.n	800c6dc <USBH_AUDIO_ParseCSDescriptors+0xc2>
            (void)ParseCSDescriptors(&AUDIO_Handle->class_desc,
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 800c6c2:	7dfb      	ldrb	r3, [r7, #23]
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	213a      	movs	r1, #58	@ 0x3a
 800c6c8:	fb01 f303 	mul.w	r3, r1, r3
 800c6cc:	4413      	add	r3, r2
 800c6ce:	f503 63c9 	add.w	r3, r3, #1608	@ 0x648
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	69ba      	ldr	r2, [r7, #24]
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	f000 f80c 	bl	800c6f4 <ParseCSDescriptors>
        break;
 800c6dc:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8b3 263a 	ldrh.w	r2, [r3, #1594]	@ 0x63a
 800c6e4:	89bb      	ldrh	r3, [r7, #12]
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d8bc      	bhi.n	800c664 <USBH_AUDIO_ParseCSDescriptors+0x4a>
    }
  }

  return status;
 800c6ea:	7ffb      	ldrb	r3, [r7, #31]
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3720      	adds	r7, #32
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	607a      	str	r2, [r7, #4]
 800c700:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 800c702:	7afb      	ldrb	r3, [r7, #11]
 800c704:	2b01      	cmp	r3, #1
 800c706:	d163      	bne.n	800c7d0 <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	3302      	adds	r3, #2
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	3b01      	subs	r3, #1
 800c710:	2b05      	cmp	r3, #5
 800c712:	f200 8081 	bhi.w	800c818 <ParseCSDescriptors+0x124>
 800c716:	a201      	add	r2, pc, #4	@ (adr r2, 800c71c <ParseCSDescriptors+0x28>)
 800c718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c71c:	0800c735 	.word	0x0800c735
 800c720:	0800c73d 	.word	0x0800c73d
 800c724:	0800c759 	.word	0x0800c759
 800c728:	0800c7b3 	.word	0x0800c7b3
 800c72c:	0800c795 	.word	0x0800c795
 800c730:	0800c777 	.word	0x0800c777
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	601a      	str	r2, [r3, #0]
        break;
 800c73a:	e06e      	b.n	800c81a <ParseCSDescriptors+0x126>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800c742:	1c5a      	adds	r2, r3, #1
 800c744:	b291      	uxth	r1, r2
 800c746:	68fa      	ldr	r2, [r7, #12]
 800c748:	f8a2 107e 	strh.w	r1, [r2, #126]	@ 0x7e
 800c74c:	68fa      	ldr	r2, [r7, #12]
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	4413      	add	r3, r2
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	605a      	str	r2, [r3, #4]
        break;
 800c756:	e060      	b.n	800c81a <ParseCSDescriptors+0x126>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800c75e:	1c5a      	adds	r2, r3, #1
 800c760:	b291      	uxth	r1, r2
 800c762:	68fa      	ldr	r2, [r7, #12]
 800c764:	f8a2 1080 	strh.w	r1, [r2, #128]	@ 0x80
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	3304      	adds	r3, #4
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	4413      	add	r3, r2
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	605a      	str	r2, [r3, #4]
        break;
 800c774:	e051      	b.n	800c81a <ParseCSDescriptors+0x126>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 800c77c:	1c5a      	adds	r2, r3, #1
 800c77e:	b291      	uxth	r1, r2
 800c780:	68fa      	ldr	r2, [r7, #12]
 800c782:	f8a2 1082 	strh.w	r1, [r2, #130]	@ 0x82
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	3308      	adds	r3, #8
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	4413      	add	r3, r2
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	605a      	str	r2, [r3, #4]
        break;
 800c792:	e042      	b.n	800c81a <ParseCSDescriptors+0x126>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 800c79a:	1c5a      	adds	r2, r3, #1
 800c79c:	b291      	uxth	r1, r2
 800c79e:	68fa      	ldr	r2, [r7, #12]
 800c7a0:	f8a2 1084 	strh.w	r1, [r2, #132]	@ 0x84
 800c7a4:	68fa      	ldr	r2, [r7, #12]
 800c7a6:	3310      	adds	r3, #16
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	4413      	add	r3, r2
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	605a      	str	r2, [r3, #4]
        break;
 800c7b0:	e033      	b.n	800c81a <ParseCSDescriptors+0x126>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800c7b8:	1c5a      	adds	r2, r3, #1
 800c7ba:	b291      	uxth	r1, r2
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	f8a2 1086 	strh.w	r1, [r2, #134]	@ 0x86
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	330c      	adds	r3, #12
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	4413      	add	r3, r2
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	605a      	str	r2, [r3, #4]
        break;
 800c7ce:	e024      	b.n	800c81a <ParseCSDescriptors+0x126>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 800c7d0:	7afb      	ldrb	r3, [r7, #11]
 800c7d2:	2b02      	cmp	r3, #2
 800c7d4:	d121      	bne.n	800c81a <ParseCSDescriptors+0x126>
    {
      switch (pdesc[2])
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	3302      	adds	r3, #2
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d002      	beq.n	800c7e6 <ParseCSDescriptors+0xf2>
 800c7e0:	2b02      	cmp	r3, #2
 800c7e2:	d00a      	beq.n	800c7fa <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 800c7e4:	e019      	b.n	800c81a <ParseCSDescriptors+0x126>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	330a      	adds	r3, #10
 800c7f0:	00db      	lsls	r3, r3, #3
 800c7f2:	4413      	add	r3, r2
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	605a      	str	r2, [r3, #4]
          break;
 800c7f8:	e00f      	b.n	800c81a <ParseCSDescriptors+0x126>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800c800:	1c5a      	adds	r2, r3, #1
 800c802:	b291      	uxth	r1, r2
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	f8a2 107c 	strh.w	r1, [r2, #124]	@ 0x7c
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	330a      	adds	r3, #10
 800c80e:	00db      	lsls	r3, r3, #3
 800c810:	4413      	add	r3, r2
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	609a      	str	r2, [r3, #8]
          break;
 800c816:	e000      	b.n	800c81a <ParseCSDescriptors+0x126>
        break;
 800c818:	bf00      	nop
      }
    }
  }

  return USBH_OK;
 800c81a:	2300      	movs	r3, #0
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3714      	adds	r7, #20
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr

0800c828 <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifier
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 800c828:	b480      	push	{r7}
 800c82a:	b085      	sub	sp, #20
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	460b      	mov	r3, r1
 800c832:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800c83a:	69db      	ldr	r3, [r3, #28]
 800c83c:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 800c83e:	2300      	movs	r3, #0
 800c840:	73fb      	strb	r3, [r7, #15]
 800c842:	e01b      	b.n	800c87c <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 800c844:	7bfb      	ldrb	r3, [r7, #15]
 800c846:	68ba      	ldr	r2, [r7, #8]
 800c848:	3322      	adds	r3, #34	@ 0x22
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	4413      	add	r3, r2
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	791b      	ldrb	r3, [r3, #4]
 800c852:	78fa      	ldrb	r2, [r7, #3]
 800c854:	429a      	cmp	r2, r3
 800c856:	d10e      	bne.n	800c876 <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 800c858:	7bfb      	ldrb	r3, [r7, #15]
 800c85a:	68ba      	ldr	r2, [r7, #8]
 800c85c:	3322      	adds	r3, #34	@ 0x22
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	4413      	add	r3, r2
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	78db      	ldrb	r3, [r3, #3]
 800c866:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 800c868:	78fb      	ldrb	r3, [r7, #3]
 800c86a:	041a      	lsls	r2, r3, #16
 800c86c:	7bfb      	ldrb	r3, [r7, #15]
 800c86e:	4313      	orrs	r3, r2
 800c870:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800c874:	e086      	b.n	800c984 <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 800c876:	7bfb      	ldrb	r3, [r7, #15]
 800c878:	3301      	adds	r3, #1
 800c87a:	73fb      	strb	r3, [r7, #15]
 800c87c:	7bfb      	ldrb	r3, [r7, #15]
 800c87e:	b29a      	uxth	r2, r3
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 800c886:	429a      	cmp	r2, r3
 800c888:	d3dc      	bcc.n	800c844 <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 800c88a:	2300      	movs	r3, #0
 800c88c:	73fb      	strb	r3, [r7, #15]
 800c88e:	e025      	b.n	800c8dc <USBH_AUDIO_FindLinkedUnit+0xb4>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 800c890:	7bfb      	ldrb	r3, [r7, #15]
 800c892:	68ba      	ldr	r2, [r7, #8]
 800c894:	3326      	adds	r3, #38	@ 0x26
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	4413      	add	r3, r2
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	795b      	ldrb	r3, [r3, #5]
 800c89e:	78fa      	ldrb	r2, [r7, #3]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d009      	beq.n	800c8b8 <USBH_AUDIO_FindLinkedUnit+0x90>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 800c8a4:	7bfb      	ldrb	r3, [r7, #15]
 800c8a6:	68ba      	ldr	r2, [r7, #8]
 800c8a8:	3326      	adds	r3, #38	@ 0x26
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	4413      	add	r3, r2
 800c8ae:	689b      	ldr	r3, [r3, #8]
 800c8b0:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 800c8b2:	78fa      	ldrb	r2, [r7, #3]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d10e      	bne.n	800c8d6 <USBH_AUDIO_FindLinkedUnit+0xae>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 800c8b8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	3326      	adds	r3, #38	@ 0x26
 800c8be:	009b      	lsls	r3, r3, #2
 800c8c0:	4413      	add	r3, r2
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	78db      	ldrb	r3, [r3, #3]
 800c8c6:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 800c8c8:	78fb      	ldrb	r3, [r7, #3]
 800c8ca:	041a      	lsls	r2, r3, #16
 800c8cc:	7bfb      	ldrb	r3, [r7, #15]
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c8d4:	e056      	b.n	800c984 <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 800c8d6:	7bfb      	ldrb	r3, [r7, #15]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	73fb      	strb	r3, [r7, #15]
 800c8dc:	7bfb      	ldrb	r3, [r7, #15]
 800c8de:	b29a      	uxth	r2, r3
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d3d2      	bcc.n	800c890 <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	73fb      	strb	r3, [r7, #15]
 800c8ee:	e01b      	b.n	800c928 <USBH_AUDIO_FindLinkedUnit+0x100>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 800c8f0:	7bfb      	ldrb	r3, [r7, #15]
 800c8f2:	68ba      	ldr	r2, [r7, #8]
 800c8f4:	332a      	adds	r3, #42	@ 0x2a
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	4413      	add	r3, r2
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	795b      	ldrb	r3, [r3, #5]
 800c8fe:	78fa      	ldrb	r2, [r7, #3]
 800c900:	429a      	cmp	r2, r3
 800c902:	d10e      	bne.n	800c922 <USBH_AUDIO_FindLinkedUnit+0xfa>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 800c904:	7bfb      	ldrb	r3, [r7, #15]
 800c906:	68ba      	ldr	r2, [r7, #8]
 800c908:	332a      	adds	r3, #42	@ 0x2a
 800c90a:	009b      	lsls	r3, r3, #2
 800c90c:	4413      	add	r3, r2
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	78db      	ldrb	r3, [r3, #3]
 800c912:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 800c914:	78fb      	ldrb	r3, [r7, #3]
 800c916:	041a      	lsls	r2, r3, #16
 800c918:	7bfb      	ldrb	r3, [r7, #15]
 800c91a:	4313      	orrs	r3, r2
 800c91c:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800c920:	e030      	b.n	800c984 <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 800c922:	7bfb      	ldrb	r3, [r7, #15]
 800c924:	3301      	adds	r3, #1
 800c926:	73fb      	strb	r3, [r7, #15]
 800c928:	7bfb      	ldrb	r3, [r7, #15]
 800c92a:	b29a      	uxth	r2, r3
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 800c932:	429a      	cmp	r2, r3
 800c934:	d3dc      	bcc.n	800c8f0 <USBH_AUDIO_FindLinkedUnit+0xc8>
    }
  }

  /* Find Output Terminal Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 800c936:	2300      	movs	r3, #0
 800c938:	73fb      	strb	r3, [r7, #15]
 800c93a:	e01b      	b.n	800c974 <USBH_AUDIO_FindLinkedUnit+0x14c>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 800c93c:	7bfb      	ldrb	r3, [r7, #15]
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	331e      	adds	r3, #30
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	4413      	add	r3, r2
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	79db      	ldrb	r3, [r3, #7]
 800c94a:	78fa      	ldrb	r2, [r7, #3]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d10e      	bne.n	800c96e <USBH_AUDIO_FindLinkedUnit+0x146>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 800c950:	7bfb      	ldrb	r3, [r7, #15]
 800c952:	68ba      	ldr	r2, [r7, #8]
 800c954:	331e      	adds	r3, #30
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	4413      	add	r3, r2
 800c95a:	689b      	ldr	r3, [r3, #8]
 800c95c:	78db      	ldrb	r3, [r3, #3]
 800c95e:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 800c960:	78fb      	ldrb	r3, [r7, #3]
 800c962:	041a      	lsls	r2, r3, #16
 800c964:	7bfb      	ldrb	r3, [r7, #15]
 800c966:	4313      	orrs	r3, r2
 800c968:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800c96c:	e00a      	b.n	800c984 <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 800c96e:	7bfb      	ldrb	r3, [r7, #15]
 800c970:	3301      	adds	r3, #1
 800c972:	73fb      	strb	r3, [r7, #15]
 800c974:	7bfb      	ldrb	r3, [r7, #15]
 800c976:	b29a      	uxth	r2, r3
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 800c97e:	429a      	cmp	r2, r3
 800c980:	d3dc      	bcc.n	800c93c <USBH_AUDIO_FindLinkedUnit+0x114>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 800c982:	2300      	movs	r3, #0
}
 800c984:	4618      	mov	r0, r3
 800c986:	3714      	adds	r7, #20
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 800c998:	2300      	movs	r3, #0
 800c99a:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 800c99c:	2300      	movs	r3, #0
 800c99e:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800c9a6:	69db      	ldr	r3, [r3, #28]
 800c9a8:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	75bb      	strb	r3, [r7, #22]
 800c9ae:	e02b      	b.n	800ca08 <USBH_AUDIO_BuildMicrophonePath+0x78>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201U)
 800c9b0:	7dbb      	ldrb	r3, [r7, #22]
 800c9b2:	693a      	ldr	r2, [r7, #16]
 800c9b4:	331a      	adds	r3, #26
 800c9b6:	009b      	lsls	r3, r3, #2
 800c9b8:	4413      	add	r3, r2
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	791b      	ldrb	r3, [r3, #4]
 800c9be:	4619      	mov	r1, r3
 800c9c0:	7dbb      	ldrb	r3, [r7, #22]
 800c9c2:	693a      	ldr	r2, [r7, #16]
 800c9c4:	331a      	adds	r3, #26
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	4413      	add	r3, r2
 800c9ca:	689b      	ldr	r3, [r3, #8]
 800c9cc:	795b      	ldrb	r3, [r3, #5]
 800c9ce:	021b      	lsls	r3, r3, #8
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	430b      	orrs	r3, r1
 800c9d4:	f240 2201 	movw	r2, #513	@ 0x201
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d112      	bne.n	800ca02 <USBH_AUDIO_BuildMicrophonePath+0x72>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 800c9dc:	7dbb      	ldrb	r3, [r7, #22]
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	331a      	adds	r3, #26
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	4413      	add	r3, r2
 800c9e6:	689b      	ldr	r3, [r3, #8]
 800c9e8:	78db      	ldrb	r3, [r3, #3]
 800c9ea:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 800c9ec:	7dbb      	ldrb	r3, [r7, #22]
 800c9ee:	693a      	ldr	r2, [r7, #16]
 800c9f0:	331a      	adds	r3, #26
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	4413      	add	r3, r2
 800c9f6:	689b      	ldr	r3, [r3, #8]
 800c9f8:	79da      	ldrb	r2, [r3, #7]
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
      break;
 800ca00:	e009      	b.n	800ca16 <USBH_AUDIO_BuildMicrophonePath+0x86>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800ca02:	7dbb      	ldrb	r3, [r7, #22]
 800ca04:	3301      	adds	r3, #1
 800ca06:	75bb      	strb	r3, [r7, #22]
 800ca08:	7dbb      	ldrb	r3, [r7, #22]
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	@ 0xea
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d3cc      	bcc.n	800c9b0 <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 800ca16:	7dfb      	ldrb	r3, [r7, #23]
 800ca18:	4619      	mov	r1, r3
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f7ff ff04 	bl	800c828 <USBH_AUDIO_FindLinkedUnit>
 800ca20:	60f8      	str	r0, [r7, #12]

    if (value == 0U)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d101      	bne.n	800ca2c <USBH_AUDIO_BuildMicrophonePath+0x9c>
    {
      return USBH_FAIL;
 800ca28:	2302      	movs	r3, #2
 800ca2a:	e035      	b.n	800ca98 <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	0a1b      	lsrs	r3, r3, #8
 800ca34:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	0c1b      	lsrs	r3, r3, #16
 800ca3a:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 800ca3c:	7abb      	ldrb	r3, [r7, #10]
 800ca3e:	3b03      	subs	r3, #3
 800ca40:	2b03      	cmp	r3, #3
 800ca42:	d81f      	bhi.n	800ca84 <USBH_AUDIO_BuildMicrophonePath+0xf4>
 800ca44:	a201      	add	r2, pc, #4	@ (adr r2, 800ca4c <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 800ca46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca4a:	bf00      	nop
 800ca4c:	0800ca7b 	.word	0x0800ca7b
 800ca50:	0800ca67 	.word	0x0800ca67
 800ca54:	0800ca71 	.word	0x0800ca71
 800ca58:	0800ca5d 	.word	0x0800ca5d
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	7afa      	ldrb	r2, [r7, #11]
 800ca60:	f883 214f 	strb.w	r2, [r3, #335]	@ 0x14f
        break;
 800ca64:	e011      	b.n	800ca8a <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	7afa      	ldrb	r2, [r7, #11]
 800ca6a:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
        break;
 800ca6e:	e00c      	b.n	800ca8a <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	7afa      	ldrb	r2, [r7, #11]
 800ca74:	f883 214e 	strb.w	r2, [r3, #334]	@ 0x14e
        break;
 800ca78:	e007      	b.n	800ca8a <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	7afa      	ldrb	r2, [r7, #11]
 800ca7e:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150
        break;
 800ca82:	e002      	b.n	800ca8a <USBH_AUDIO_BuildMicrophonePath+0xfa>

      default:
        ret = USBH_FAIL;
 800ca84:	2302      	movs	r3, #2
 800ca86:	757b      	strb	r3, [r7, #21]
        break;
 800ca88:	bf00      	nop
    }
  } while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 800ca8a:	7abb      	ldrb	r3, [r7, #10]
 800ca8c:	2b03      	cmp	r3, #3
 800ca8e:	d002      	beq.n	800ca96 <USBH_AUDIO_BuildMicrophonePath+0x106>
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d1bf      	bne.n	800ca16 <USBH_AUDIO_BuildMicrophonePath+0x86>

  return ret;
 800ca96:	7d7b      	ldrb	r3, [r7, #21]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3718      	adds	r7, #24
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b086      	sub	sp, #24
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 800caa8:	2300      	movs	r3, #0
 800caaa:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 800caac:	2300      	movs	r3, #0
 800caae:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800cab6:	69db      	ldr	r3, [r3, #28]
 800cab8:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800caba:	2300      	movs	r3, #0
 800cabc:	757b      	strb	r3, [r7, #21]
 800cabe:	e02b      	b.n	800cb18 <USBH_AUDIO_BuildHeadphonePath+0x78>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101U)
 800cac0:	7d7b      	ldrb	r3, [r7, #21]
 800cac2:	693a      	ldr	r2, [r7, #16]
 800cac4:	331a      	adds	r3, #26
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	4413      	add	r3, r2
 800caca:	689b      	ldr	r3, [r3, #8]
 800cacc:	791b      	ldrb	r3, [r3, #4]
 800cace:	4619      	mov	r1, r3
 800cad0:	7d7b      	ldrb	r3, [r7, #21]
 800cad2:	693a      	ldr	r2, [r7, #16]
 800cad4:	331a      	adds	r3, #26
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	4413      	add	r3, r2
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	795b      	ldrb	r3, [r3, #5]
 800cade:	021b      	lsls	r3, r3, #8
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	430b      	orrs	r3, r1
 800cae4:	f240 1201 	movw	r2, #257	@ 0x101
 800cae8:	4293      	cmp	r3, r2
 800caea:	d112      	bne.n	800cb12 <USBH_AUDIO_BuildHeadphonePath+0x72>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 800caec:	7d7b      	ldrb	r3, [r7, #21]
 800caee:	693a      	ldr	r2, [r7, #16]
 800caf0:	331a      	adds	r3, #26
 800caf2:	009b      	lsls	r3, r3, #2
 800caf4:	4413      	add	r3, r2
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	78db      	ldrb	r3, [r3, #3]
 800cafa:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 800cafc:	7d7b      	ldrb	r3, [r7, #21]
 800cafe:	693a      	ldr	r2, [r7, #16]
 800cb00:	331a      	adds	r3, #26
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	4413      	add	r3, r2
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	79da      	ldrb	r2, [r3, #7]
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
      break;
 800cb10:	e009      	b.n	800cb26 <USBH_AUDIO_BuildHeadphonePath+0x86>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800cb12:	7d7b      	ldrb	r3, [r7, #21]
 800cb14:	3301      	adds	r3, #1
 800cb16:	757b      	strb	r3, [r7, #21]
 800cb18:	7d7b      	ldrb	r3, [r7, #21]
 800cb1a:	b29a      	uxth	r2, r3
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	@ 0xea
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d3cc      	bcc.n	800cac0 <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 800cb26:	2300      	movs	r3, #0
 800cb28:	75bb      	strb	r3, [r7, #22]
 800cb2a:	e011      	b.n	800cb50 <USBH_AUDIO_BuildHeadphonePath+0xb0>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 800cb2c:	7dbb      	ldrb	r3, [r7, #22]
 800cb2e:	693a      	ldr	r2, [r7, #16]
 800cb30:	3317      	adds	r3, #23
 800cb32:	00db      	lsls	r3, r3, #3
 800cb34:	4413      	add	r3, r2
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	78db      	ldrb	r3, [r3, #3]
 800cb3a:	7dfa      	ldrb	r2, [r7, #23]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d104      	bne.n	800cb4a <USBH_AUDIO_BuildHeadphonePath+0xaa>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	7dba      	ldrb	r2, [r7, #22]
 800cb44:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
      break;
 800cb48:	e009      	b.n	800cb5e <USBH_AUDIO_BuildHeadphonePath+0xbe>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 800cb4a:	7dbb      	ldrb	r3, [r7, #22]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	75bb      	strb	r3, [r7, #22]
 800cb50:	7dbb      	ldrb	r3, [r7, #22]
 800cb52:	b29a      	uxth	r2, r3
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d3e6      	bcc.n	800cb2c <USBH_AUDIO_BuildHeadphonePath+0x8c>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 800cb5e:	7dfb      	ldrb	r3, [r7, #23]
 800cb60:	4619      	mov	r1, r3
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f7ff fe60 	bl	800c828 <USBH_AUDIO_FindLinkedUnit>
 800cb68:	60f8      	str	r0, [r7, #12]

    if (value == 0U)
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d101      	bne.n	800cb74 <USBH_AUDIO_BuildHeadphonePath+0xd4>
    {
      return USBH_FAIL;
 800cb70:	2302      	movs	r3, #2
 800cb72:	e053      	b.n	800cc1c <USBH_AUDIO_BuildHeadphonePath+0x17c>
    }

    Index = (uint8_t)(value & 0xFFU);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	0a1b      	lsrs	r3, r3, #8
 800cb7c:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	0c1b      	lsrs	r3, r3, #16
 800cb82:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 800cb84:	7afb      	ldrb	r3, [r7, #11]
 800cb86:	3b03      	subs	r3, #3
 800cb88:	2b03      	cmp	r3, #3
 800cb8a:	d83c      	bhi.n	800cc06 <USBH_AUDIO_BuildHeadphonePath+0x166>
 800cb8c:	a201      	add	r2, pc, #4	@ (adr r2, 800cb94 <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 800cb8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb92:	bf00      	nop
 800cb94:	0800cbc3 	.word	0x0800cbc3
 800cb98:	0800cbaf 	.word	0x0800cbaf
 800cb9c:	0800cbb9 	.word	0x0800cbb9
 800cba0:	0800cba5 	.word	0x0800cba5
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	7dba      	ldrb	r2, [r7, #22]
 800cba8:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
        break;
 800cbac:	e02f      	b.n	800cc0e <USBH_AUDIO_BuildHeadphonePath+0x16e>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	7dba      	ldrb	r2, [r7, #22]
 800cbb2:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
        break;
 800cbb6:	e02a      	b.n	800cc0e <USBH_AUDIO_BuildHeadphonePath+0x16e>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	7dba      	ldrb	r2, [r7, #22]
 800cbbc:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
        break;
 800cbc0:	e025      	b.n	800cc0e <USBH_AUDIO_BuildHeadphonePath+0x16e>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	7dba      	ldrb	r2, [r7, #22]
 800cbc6:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 800cbca:	7dbb      	ldrb	r3, [r7, #22]
 800cbcc:	2b03      	cmp	r3, #3
 800cbce:	d817      	bhi.n	800cc00 <USBH_AUDIO_BuildHeadphonePath+0x160>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103U)
 800cbd0:	7dbb      	ldrb	r3, [r7, #22]
 800cbd2:	693a      	ldr	r2, [r7, #16]
 800cbd4:	331e      	adds	r3, #30
 800cbd6:	009b      	lsls	r3, r3, #2
 800cbd8:	4413      	add	r3, r2
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	791b      	ldrb	r3, [r3, #4]
 800cbde:	4619      	mov	r1, r3
 800cbe0:	7dbb      	ldrb	r3, [r7, #22]
 800cbe2:	693a      	ldr	r2, [r7, #16]
 800cbe4:	331e      	adds	r3, #30
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	4413      	add	r3, r2
 800cbea:	689b      	ldr	r3, [r3, #8]
 800cbec:	795b      	ldrb	r3, [r3, #5]
 800cbee:	021b      	lsls	r3, r3, #8
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	430b      	orrs	r3, r1
 800cbf4:	f240 1203 	movw	r2, #259	@ 0x103
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d007      	beq.n	800cc0c <USBH_AUDIO_BuildHeadphonePath+0x16c>
          {
            return  USBH_OK;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	e00d      	b.n	800cc1c <USBH_AUDIO_BuildHeadphonePath+0x17c>
          }
        }
        else
        {
          ret = USBH_FAIL;
 800cc00:	2302      	movs	r3, #2
 800cc02:	753b      	strb	r3, [r7, #20]
        }
        break;
 800cc04:	e002      	b.n	800cc0c <USBH_AUDIO_BuildHeadphonePath+0x16c>

      default:
        ret = USBH_FAIL;
 800cc06:	2302      	movs	r3, #2
 800cc08:	753b      	strb	r3, [r7, #20]
        break;
 800cc0a:	e000      	b.n	800cc0e <USBH_AUDIO_BuildHeadphonePath+0x16e>
        break;
 800cc0c:	bf00      	nop
    }
  } while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 800cc0e:	7afb      	ldrb	r3, [r7, #11]
 800cc10:	2b03      	cmp	r3, #3
 800cc12:	d002      	beq.n	800cc1a <USBH_AUDIO_BuildHeadphonePath+0x17a>
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d1a1      	bne.n	800cb5e <USBH_AUDIO_BuildHeadphonePath+0xbe>

  return ret;
 800cc1a:	7d3b      	ldrb	r3, [r7, #20]
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3718      	adds	r7, #24
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b086      	sub	sp, #24
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	4608      	mov	r0, r1
 800cc2e:	4611      	mov	r1, r2
 800cc30:	461a      	mov	r2, r3
 800cc32:	4603      	mov	r3, r0
 800cc34:	70fb      	strb	r3, [r7, #3]
 800cc36:	460b      	mov	r3, r1
 800cc38:	70bb      	strb	r3, [r7, #2]
 800cc3a:	4613      	mov	r3, r2
 800cc3c:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	82fb      	strh	r3, [r7, #22]
 800cc42:	2300      	movs	r3, #0
 800cc44:	82bb      	strh	r3, [r7, #20]
 800cc46:	2300      	movs	r3, #0
 800cc48:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800cc50:	69db      	ldr	r3, [r3, #28]
 800cc52:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 800cc54:	2300      	movs	r3, #0
 800cc56:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 800cc58:	78fb      	ldrb	r3, [r7, #3]
 800cc5a:	2b02      	cmp	r3, #2
 800cc5c:	d002      	beq.n	800cc64 <USBH_AC_SetCur+0x40>
 800cc5e:	2b06      	cmp	r3, #6
 800cc60:	d018      	beq.n	800cc94 <USBH_AC_SetCur+0x70>
 800cc62:	e035      	b.n	800ccd0 <USBH_AC_SetCur+0xac>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc68:	78db      	ldrb	r3, [r3, #3]
 800cc6a:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800cc70:	7afb      	ldrb	r3, [r7, #11]
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	021b      	lsls	r3, r3, #8
 800cc76:	b29a      	uxth	r2, r3
 800cc78:	7abb      	ldrb	r3, [r7, #10]
 800cc7a:	b29b      	uxth	r3, r3
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800cc80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cc84:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	827b      	strh	r3, [r7, #18]
      break;
 800cc92:	e020      	b.n	800ccd6 <USBH_AC_SetCur+0xb2>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800cc94:	78bb      	ldrb	r3, [r7, #2]
 800cc96:	68fa      	ldr	r2, [r7, #12]
 800cc98:	3322      	adds	r3, #34	@ 0x22
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	4413      	add	r3, r2
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	78db      	ldrb	r3, [r3, #3]
 800cca2:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800cca4:	2300      	movs	r3, #0
 800cca6:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800cca8:	7afb      	ldrb	r3, [r7, #11]
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	021b      	lsls	r3, r3, #8
 800ccae:	b29a      	uxth	r2, r3
 800ccb0:	7abb      	ldrb	r3, [r7, #10]
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800ccb8:	787b      	ldrb	r3, [r7, #1]
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	021b      	lsls	r3, r3, #8
 800ccbe:	b29a      	uxth	r2, r3
 800ccc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 800ccca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cccc:	827b      	strh	r3, [r7, #18]
      break;
 800ccce:	e002      	b.n	800ccd6 <USBH_AC_SetCur+0xb2>

    default:
      ret = USBH_FAIL;
 800ccd0:	2302      	movs	r3, #2
 800ccd2:	747b      	strb	r3, [r7, #17]
      break;
 800ccd4:	bf00      	nop
  }

  if (ret != USBH_OK)
 800ccd6:	7c7b      	ldrb	r3, [r7, #17]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d001      	beq.n	800cce0 <USBH_AC_SetCur+0xbc>
  {
    return ret;
 800ccdc:	7c7b      	ldrb	r3, [r7, #17]
 800ccde:	e017      	b.n	800cd10 <USBH_AC_SetCur+0xec>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2221      	movs	r2, #33	@ 0x21
 800cce4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2201      	movs	r2, #1
 800ccea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	8afa      	ldrh	r2, [r7, #22]
 800ccf0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	8aba      	ldrh	r2, [r7, #20]
 800ccf6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	8a7a      	ldrh	r2, [r7, #18]
 800ccfc:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800cd04:	8a7a      	ldrh	r2, [r7, #18]
 800cd06:	4619      	mov	r1, r3
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f002 fa13 	bl	800f134 <USBH_CtlReq>
 800cd0e:	4603      	mov	r3, r0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3718      	adds	r7, #24
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b086      	sub	sp, #24
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	4608      	mov	r0, r1
 800cd22:	4611      	mov	r1, r2
 800cd24:	461a      	mov	r2, r3
 800cd26:	4603      	mov	r3, r0
 800cd28:	70fb      	strb	r3, [r7, #3]
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	70bb      	strb	r3, [r7, #2]
 800cd2e:	4613      	mov	r3, r2
 800cd30:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 800cd32:	2300      	movs	r3, #0
 800cd34:	82fb      	strh	r3, [r7, #22]
 800cd36:	2300      	movs	r3, #0
 800cd38:	82bb      	strh	r3, [r7, #20]
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	743b      	strb	r3, [r7, #16]
 800cd42:	2300      	movs	r3, #0
 800cd44:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800cd4c:	69db      	ldr	r3, [r3, #28]
 800cd4e:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 800cd50:	2300      	movs	r3, #0
 800cd52:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 800cd54:	78fb      	ldrb	r3, [r7, #3]
 800cd56:	2b06      	cmp	r3, #6
 800cd58:	d01e      	beq.n	800cd98 <USBH_AC_GetCur+0x80>
 800cd5a:	2b06      	cmp	r3, #6
 800cd5c:	dc4f      	bgt.n	800cdfe <USBH_AC_GetCur+0xe6>
 800cd5e:	2b02      	cmp	r3, #2
 800cd60:	d002      	beq.n	800cd68 <USBH_AC_GetCur+0x50>
 800cd62:	2b03      	cmp	r3, #3
 800cd64:	d036      	beq.n	800cdd4 <USBH_AC_GetCur+0xbc>
 800cd66:	e04a      	b.n	800cdfe <USBH_AC_GetCur+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd6c:	78db      	ldrb	r3, [r3, #3]
 800cd6e:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800cd70:	2300      	movs	r3, #0
 800cd72:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800cd74:	7c3b      	ldrb	r3, [r7, #16]
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	021b      	lsls	r3, r3, #8
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	7bfb      	ldrb	r3, [r7, #15]
 800cd7e:	b29b      	uxth	r3, r3
 800cd80:	4313      	orrs	r3, r2
 800cd82:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800cd84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cd88:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 800cd92:	2301      	movs	r3, #1
 800cd94:	827b      	strh	r3, [r7, #18]
      break;
 800cd96:	e035      	b.n	800ce04 <USBH_AC_GetCur+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800cd98:	78bb      	ldrb	r3, [r7, #2]
 800cd9a:	68ba      	ldr	r2, [r7, #8]
 800cd9c:	3322      	adds	r3, #34	@ 0x22
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	4413      	add	r3, r2
 800cda2:	689b      	ldr	r3, [r3, #8]
 800cda4:	78db      	ldrb	r3, [r3, #3]
 800cda6:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800cda8:	2300      	movs	r3, #0
 800cdaa:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800cdac:	7c3b      	ldrb	r3, [r7, #16]
 800cdae:	b29b      	uxth	r3, r3
 800cdb0:	021b      	lsls	r3, r3, #8
 800cdb2:	b29a      	uxth	r2, r3
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	4313      	orrs	r3, r2
 800cdba:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800cdbc:	787b      	ldrb	r3, [r7, #1]
 800cdbe:	b29b      	uxth	r3, r3
 800cdc0:	021b      	lsls	r3, r3, #8
 800cdc2:	b29a      	uxth	r2, r3
 800cdc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 800cdce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cdd0:	827b      	strh	r3, [r7, #18]
      break;
 800cdd2:	e017      	b.n	800ce04 <USBH_AC_GetCur+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdda:	78db      	ldrb	r3, [r3, #3]
 800cddc:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800cdde:	2300      	movs	r3, #0
 800cde0:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800cde2:	7c3b      	ldrb	r3, [r7, #16]
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	021b      	lsls	r3, r3, #8
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	7bfb      	ldrb	r3, [r7, #15]
 800cdec:	b29b      	uxth	r3, r3
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800cdf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cdf6:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	827b      	strh	r3, [r7, #18]
      break;
 800cdfc:	e002      	b.n	800ce04 <USBH_AC_GetCur+0xec>

    default:
      ret = USBH_FAIL;
 800cdfe:	2302      	movs	r3, #2
 800ce00:	747b      	strb	r3, [r7, #17]
      break;
 800ce02:	bf00      	nop
  }

  if (ret != USBH_OK)
 800ce04:	7c7b      	ldrb	r3, [r7, #17]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d001      	beq.n	800ce0e <USBH_AC_GetCur+0xf6>
  {
    return ret;
 800ce0a:	7c7b      	ldrb	r3, [r7, #17]
 800ce0c:	e017      	b.n	800ce3e <USBH_AC_GetCur+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	22a1      	movs	r2, #161	@ 0xa1
 800ce12:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2281      	movs	r2, #129	@ 0x81
 800ce18:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	8afa      	ldrh	r2, [r7, #22]
 800ce1e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	8aba      	ldrh	r2, [r7, #20]
 800ce24:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	8a7a      	ldrh	r2, [r7, #18]
 800ce2a:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800ce32:	8a7a      	ldrh	r2, [r7, #18]
 800ce34:	4619      	mov	r1, r3
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f002 f97c 	bl	800f134 <USBH_CtlReq>
 800ce3c:	4603      	mov	r3, r0
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3718      	adds	r7, #24
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}

0800ce46 <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 800ce46:	b580      	push	{r7, lr}
 800ce48:	b086      	sub	sp, #24
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
 800ce4e:	4608      	mov	r0, r1
 800ce50:	4611      	mov	r1, r2
 800ce52:	461a      	mov	r2, r3
 800ce54:	4603      	mov	r3, r0
 800ce56:	70fb      	strb	r3, [r7, #3]
 800ce58:	460b      	mov	r3, r1
 800ce5a:	70bb      	strb	r3, [r7, #2]
 800ce5c:	4613      	mov	r3, r2
 800ce5e:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 800ce60:	2300      	movs	r3, #0
 800ce62:	82fb      	strh	r3, [r7, #22]
 800ce64:	2300      	movs	r3, #0
 800ce66:	82bb      	strh	r3, [r7, #20]
 800ce68:	2300      	movs	r3, #0
 800ce6a:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	743b      	strb	r3, [r7, #16]
 800ce70:	2300      	movs	r3, #0
 800ce72:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800ce7a:	69db      	ldr	r3, [r3, #28]
 800ce7c:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 800ce82:	78fb      	ldrb	r3, [r7, #3]
 800ce84:	2b06      	cmp	r3, #6
 800ce86:	d01e      	beq.n	800cec6 <USBH_AC_GetMax+0x80>
 800ce88:	2b06      	cmp	r3, #6
 800ce8a:	dc4f      	bgt.n	800cf2c <USBH_AC_GetMax+0xe6>
 800ce8c:	2b02      	cmp	r3, #2
 800ce8e:	d002      	beq.n	800ce96 <USBH_AC_GetMax+0x50>
 800ce90:	2b03      	cmp	r3, #3
 800ce92:	d036      	beq.n	800cf02 <USBH_AC_GetMax+0xbc>
 800ce94:	e04a      	b.n	800cf2c <USBH_AC_GetMax+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce9a:	78db      	ldrb	r3, [r3, #3]
 800ce9c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800ce9e:	2300      	movs	r3, #0
 800cea0:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800cea2:	7c3b      	ldrb	r3, [r7, #16]
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	021b      	lsls	r3, r3, #8
 800cea8:	b29a      	uxth	r2, r3
 800ceaa:	7bfb      	ldrb	r3, [r7, #15]
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800ceb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ceb6:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	2200      	movs	r2, #0
 800cebc:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 800cec0:	2301      	movs	r3, #1
 800cec2:	827b      	strh	r3, [r7, #18]
      break;
 800cec4:	e035      	b.n	800cf32 <USBH_AC_GetMax+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800cec6:	78bb      	ldrb	r3, [r7, #2]
 800cec8:	68ba      	ldr	r2, [r7, #8]
 800ceca:	3322      	adds	r3, #34	@ 0x22
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	4413      	add	r3, r2
 800ced0:	689b      	ldr	r3, [r3, #8]
 800ced2:	78db      	ldrb	r3, [r3, #3]
 800ced4:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800ced6:	2300      	movs	r3, #0
 800ced8:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800ceda:	7c3b      	ldrb	r3, [r7, #16]
 800cedc:	b29b      	uxth	r3, r3
 800cede:	021b      	lsls	r3, r3, #8
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	7bfb      	ldrb	r3, [r7, #15]
 800cee4:	b29b      	uxth	r3, r3
 800cee6:	4313      	orrs	r3, r2
 800cee8:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800ceea:	787b      	ldrb	r3, [r7, #1]
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	021b      	lsls	r3, r3, #8
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	4313      	orrs	r3, r2
 800cefa:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 800cefc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cefe:	827b      	strh	r3, [r7, #18]
      break;
 800cf00:	e017      	b.n	800cf32 <USBH_AC_GetMax+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf08:	78db      	ldrb	r3, [r3, #3]
 800cf0a:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800cf10:	7c3b      	ldrb	r3, [r7, #16]
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	021b      	lsls	r3, r3, #8
 800cf16:	b29a      	uxth	r2, r3
 800cf18:	7bfb      	ldrb	r3, [r7, #15]
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800cf20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cf24:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 800cf26:	2301      	movs	r3, #1
 800cf28:	827b      	strh	r3, [r7, #18]
      break;
 800cf2a:	e002      	b.n	800cf32 <USBH_AC_GetMax+0xec>

    default:
      ret = USBH_FAIL;
 800cf2c:	2302      	movs	r3, #2
 800cf2e:	747b      	strb	r3, [r7, #17]
      break;
 800cf30:	bf00      	nop
  }

  if (ret != USBH_OK)
 800cf32:	7c7b      	ldrb	r3, [r7, #17]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d001      	beq.n	800cf3c <USBH_AC_GetMax+0xf6>
  {
    return ret;
 800cf38:	7c7b      	ldrb	r3, [r7, #17]
 800cf3a:	e017      	b.n	800cf6c <USBH_AC_GetMax+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	22a1      	movs	r2, #161	@ 0xa1
 800cf40:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2283      	movs	r2, #131	@ 0x83
 800cf46:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	8afa      	ldrh	r2, [r7, #22]
 800cf4c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	8aba      	ldrh	r2, [r7, #20]
 800cf52:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	8a7a      	ldrh	r2, [r7, #18]
 800cf58:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800cf60:	8a7a      	ldrh	r2, [r7, #18]
 800cf62:	4619      	mov	r1, r3
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f002 f8e5 	bl	800f134 <USBH_CtlReq>
 800cf6a:	4603      	mov	r3, r0

}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3718      	adds	r7, #24
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b086      	sub	sp, #24
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	4608      	mov	r0, r1
 800cf7e:	4611      	mov	r1, r2
 800cf80:	461a      	mov	r2, r3
 800cf82:	4603      	mov	r3, r0
 800cf84:	70fb      	strb	r3, [r7, #3]
 800cf86:	460b      	mov	r3, r1
 800cf88:	70bb      	strb	r3, [r7, #2]
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	82fb      	strh	r3, [r7, #22]
 800cf92:	2300      	movs	r3, #0
 800cf94:	82bb      	strh	r3, [r7, #20]
 800cf96:	2300      	movs	r3, #0
 800cf98:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	743b      	strb	r3, [r7, #16]
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800cfa8:	69db      	ldr	r3, [r3, #28]
 800cfaa:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 800cfac:	2300      	movs	r3, #0
 800cfae:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 800cfb0:	78fb      	ldrb	r3, [r7, #3]
 800cfb2:	2b06      	cmp	r3, #6
 800cfb4:	d01e      	beq.n	800cff4 <USBH_AC_GetRes+0x80>
 800cfb6:	2b06      	cmp	r3, #6
 800cfb8:	dc4f      	bgt.n	800d05a <USBH_AC_GetRes+0xe6>
 800cfba:	2b02      	cmp	r3, #2
 800cfbc:	d002      	beq.n	800cfc4 <USBH_AC_GetRes+0x50>
 800cfbe:	2b03      	cmp	r3, #3
 800cfc0:	d036      	beq.n	800d030 <USBH_AC_GetRes+0xbc>
 800cfc2:	e04a      	b.n	800d05a <USBH_AC_GetRes+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfc8:	78db      	ldrb	r3, [r3, #3]
 800cfca:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800cfcc:	2300      	movs	r3, #0
 800cfce:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800cfd0:	7c3b      	ldrb	r3, [r7, #16]
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	021b      	lsls	r3, r3, #8
 800cfd6:	b29a      	uxth	r2, r3
 800cfd8:	7bfb      	ldrb	r3, [r7, #15]
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800cfe0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cfe4:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 800cfee:	2301      	movs	r3, #1
 800cff0:	827b      	strh	r3, [r7, #18]
      break;
 800cff2:	e035      	b.n	800d060 <USBH_AC_GetRes+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800cff4:	78bb      	ldrb	r3, [r7, #2]
 800cff6:	68ba      	ldr	r2, [r7, #8]
 800cff8:	3322      	adds	r3, #34	@ 0x22
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	4413      	add	r3, r2
 800cffe:	689b      	ldr	r3, [r3, #8]
 800d000:	78db      	ldrb	r3, [r3, #3]
 800d002:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800d004:	2300      	movs	r3, #0
 800d006:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800d008:	7c3b      	ldrb	r3, [r7, #16]
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	021b      	lsls	r3, r3, #8
 800d00e:	b29a      	uxth	r2, r3
 800d010:	7bfb      	ldrb	r3, [r7, #15]
 800d012:	b29b      	uxth	r3, r3
 800d014:	4313      	orrs	r3, r2
 800d016:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800d018:	787b      	ldrb	r3, [r7, #1]
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	021b      	lsls	r3, r3, #8
 800d01e:	b29a      	uxth	r2, r3
 800d020:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d024:	b29b      	uxth	r3, r3
 800d026:	4313      	orrs	r3, r2
 800d028:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 800d02a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d02c:	827b      	strh	r3, [r7, #18]
      break;
 800d02e:	e017      	b.n	800d060 <USBH_AC_GetRes+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d036:	78db      	ldrb	r3, [r3, #3]
 800d038:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800d03a:	2300      	movs	r3, #0
 800d03c:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800d03e:	7c3b      	ldrb	r3, [r7, #16]
 800d040:	b29b      	uxth	r3, r3
 800d042:	021b      	lsls	r3, r3, #8
 800d044:	b29a      	uxth	r2, r3
 800d046:	7bfb      	ldrb	r3, [r7, #15]
 800d048:	b29b      	uxth	r3, r3
 800d04a:	4313      	orrs	r3, r2
 800d04c:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800d04e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d052:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 800d054:	2301      	movs	r3, #1
 800d056:	827b      	strh	r3, [r7, #18]
      break;
 800d058:	e002      	b.n	800d060 <USBH_AC_GetRes+0xec>

    default:
      ret = USBH_FAIL;
 800d05a:	2302      	movs	r3, #2
 800d05c:	747b      	strb	r3, [r7, #17]
      break;
 800d05e:	bf00      	nop
  }

  if (ret != USBH_OK)
 800d060:	7c7b      	ldrb	r3, [r7, #17]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d001      	beq.n	800d06a <USBH_AC_GetRes+0xf6>
  {
    return ret;
 800d066:	7c7b      	ldrb	r3, [r7, #17]
 800d068:	e017      	b.n	800d09a <USBH_AC_GetRes+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	22a1      	movs	r2, #161	@ 0xa1
 800d06e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2284      	movs	r2, #132	@ 0x84
 800d074:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	8afa      	ldrh	r2, [r7, #22]
 800d07a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	8aba      	ldrh	r2, [r7, #20]
 800d080:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	8a7a      	ldrh	r2, [r7, #18]
 800d086:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800d08e:	8a7a      	ldrh	r2, [r7, #18]
 800d090:	4619      	mov	r1, r3
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f002 f84e 	bl	800f134 <USBH_CtlReq>
 800d098:	4603      	mov	r3, r0

}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3718      	adds	r7, #24
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 800d0a2:	b580      	push	{r7, lr}
 800d0a4:	b086      	sub	sp, #24
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
 800d0aa:	4608      	mov	r0, r1
 800d0ac:	4611      	mov	r1, r2
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	70fb      	strb	r3, [r7, #3]
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	70bb      	strb	r3, [r7, #2]
 800d0b8:	4613      	mov	r3, r2
 800d0ba:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	82fb      	strh	r3, [r7, #22]
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	82bb      	strh	r3, [r7, #20]
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	743b      	strb	r3, [r7, #16]
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800d0d6:	69db      	ldr	r3, [r3, #28]
 800d0d8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 800d0de:	78fb      	ldrb	r3, [r7, #3]
 800d0e0:	2b06      	cmp	r3, #6
 800d0e2:	d01e      	beq.n	800d122 <USBH_AC_GetMin+0x80>
 800d0e4:	2b06      	cmp	r3, #6
 800d0e6:	dc4f      	bgt.n	800d188 <USBH_AC_GetMin+0xe6>
 800d0e8:	2b02      	cmp	r3, #2
 800d0ea:	d002      	beq.n	800d0f2 <USBH_AC_GetMin+0x50>
 800d0ec:	2b03      	cmp	r3, #3
 800d0ee:	d036      	beq.n	800d15e <USBH_AC_GetMin+0xbc>
 800d0f0:	e04a      	b.n	800d188 <USBH_AC_GetMin+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0f6:	78db      	ldrb	r3, [r3, #3]
 800d0f8:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800d0fe:	7c3b      	ldrb	r3, [r7, #16]
 800d100:	b29b      	uxth	r3, r3
 800d102:	021b      	lsls	r3, r3, #8
 800d104:	b29a      	uxth	r2, r3
 800d106:	7bfb      	ldrb	r3, [r7, #15]
 800d108:	b29b      	uxth	r3, r3
 800d10a:	4313      	orrs	r3, r2
 800d10c:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800d10e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d112:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	2200      	movs	r2, #0
 800d118:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 800d11c:	2301      	movs	r3, #1
 800d11e:	827b      	strh	r3, [r7, #18]
      break;
 800d120:	e035      	b.n	800d18e <USBH_AC_GetMin+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800d122:	78bb      	ldrb	r3, [r7, #2]
 800d124:	68ba      	ldr	r2, [r7, #8]
 800d126:	3322      	adds	r3, #34	@ 0x22
 800d128:	009b      	lsls	r3, r3, #2
 800d12a:	4413      	add	r3, r2
 800d12c:	689b      	ldr	r3, [r3, #8]
 800d12e:	78db      	ldrb	r3, [r3, #3]
 800d130:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800d132:	2300      	movs	r3, #0
 800d134:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800d136:	7c3b      	ldrb	r3, [r7, #16]
 800d138:	b29b      	uxth	r3, r3
 800d13a:	021b      	lsls	r3, r3, #8
 800d13c:	b29a      	uxth	r2, r3
 800d13e:	7bfb      	ldrb	r3, [r7, #15]
 800d140:	b29b      	uxth	r3, r3
 800d142:	4313      	orrs	r3, r2
 800d144:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800d146:	787b      	ldrb	r3, [r7, #1]
 800d148:	b29b      	uxth	r3, r3
 800d14a:	021b      	lsls	r3, r3, #8
 800d14c:	b29a      	uxth	r2, r3
 800d14e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d152:	b29b      	uxth	r3, r3
 800d154:	4313      	orrs	r3, r2
 800d156:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 800d158:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d15a:	827b      	strh	r3, [r7, #18]
      break;
 800d15c:	e017      	b.n	800d18e <USBH_AC_GetMin+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d164:	78db      	ldrb	r3, [r3, #3]
 800d166:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800d168:	2300      	movs	r3, #0
 800d16a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800d16c:	7c3b      	ldrb	r3, [r7, #16]
 800d16e:	b29b      	uxth	r3, r3
 800d170:	021b      	lsls	r3, r3, #8
 800d172:	b29a      	uxth	r2, r3
 800d174:	7bfb      	ldrb	r3, [r7, #15]
 800d176:	b29b      	uxth	r3, r3
 800d178:	4313      	orrs	r3, r2
 800d17a:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800d17c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d180:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 800d182:	2301      	movs	r3, #1
 800d184:	827b      	strh	r3, [r7, #18]
      break;
 800d186:	e002      	b.n	800d18e <USBH_AC_GetMin+0xec>

    default:
      ret = USBH_FAIL;
 800d188:	2302      	movs	r3, #2
 800d18a:	747b      	strb	r3, [r7, #17]
      break;
 800d18c:	bf00      	nop
  }

  if (ret != USBH_OK)
 800d18e:	7c7b      	ldrb	r3, [r7, #17]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d001      	beq.n	800d198 <USBH_AC_GetMin+0xf6>
  {
    return ret;
 800d194:	7c7b      	ldrb	r3, [r7, #17]
 800d196:	e017      	b.n	800d1c8 <USBH_AC_GetMin+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	22a1      	movs	r2, #161	@ 0xa1
 800d19c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2282      	movs	r2, #130	@ 0x82
 800d1a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	8afa      	ldrh	r2, [r7, #22]
 800d1a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	8aba      	ldrh	r2, [r7, #20]
 800d1ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	8a7a      	ldrh	r2, [r7, #18]
 800d1b4:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800d1bc:	8a7a      	ldrh	r2, [r7, #18]
 800d1be:	4619      	mov	r1, r3
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f001 ffb7 	bl	800f134 <USBH_CtlReq>
 800d1c6:	4603      	mov	r3, r0

}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3718      	adds	r7, #24
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b086      	sub	sp, #24
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	460b      	mov	r3, r1
 800d1da:	607a      	str	r2, [r7, #4]
 800d1dc:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 800d1de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d1e2:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 800d1e4:	7afb      	ldrb	r3, [r7, #11]
 800d1e6:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /* length of the frequency parameter */
 800d1e8:	2303      	movs	r3, #3
 800d1ea:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2222      	movs	r2, #34	@ 0x22
 800d1f0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	8afa      	ldrh	r2, [r7, #22]
 800d1fc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	8aba      	ldrh	r2, [r7, #20]
 800d202:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	8a7a      	ldrh	r2, [r7, #18]
 800d208:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 800d20a:	8a7b      	ldrh	r3, [r7, #18]
 800d20c:	461a      	mov	r2, r3
 800d20e:	6879      	ldr	r1, [r7, #4]
 800d210:	68f8      	ldr	r0, [r7, #12]
 800d212:	f001 ff8f 	bl	800f134 <USBH_CtlReq>
 800d216:	4603      	mov	r3, r0
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3718      	adds	r7, #24
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 800d220:	b480      	push	{r7}
 800d222:	b085      	sub	sp, #20
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 800d228:	2301      	movs	r3, #1
 800d22a:	73fb      	strb	r3, [r7, #15]

  return status;
 800d22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3714      	adds	r7, #20
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
	...

0800d23c <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b086      	sub	sp, #24
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d244:	2301      	movs	r3, #1
 800d246:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800d24e:	69db      	ldr	r3, [r3, #28]
 800d250:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 800d252:	2300      	movs	r3, #0
 800d254:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	78db      	ldrb	r3, [r3, #3]
 800d25a:	3b01      	subs	r3, #1
 800d25c:	2b04      	cmp	r3, #4
 800d25e:	f200 8090 	bhi.w	800d382 <USBH_AUDIO_Control+0x146>
 800d262:	a201      	add	r2, pc, #4	@ (adr r2, 800d268 <USBH_AUDIO_Control+0x2c>)
 800d264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d268:	0800d27d 	.word	0x0800d27d
 800d26c:	0800d2d1 	.word	0x0800d2d1
 800d270:	0800d383 	.word	0x0800d383
 800d274:	0800d34f 	.word	0x0800d34f
 800d278:	0800d369 	.word	0x0800d369
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f8d3 3860 	ldr.w	r3, [r3, #2144]	@ 0x860
 800d282:	f003 0301 	and.w	r3, r3, #1
 800d286:	2b00      	cmp	r3, #0
 800d288:	d17d      	bne.n	800d386 <USBH_AUDIO_Control+0x14a>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8d3 2860 	ldr.w	r2, [r3, #2144]	@ 0x860
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
        (void)USBH_InterruptReceiveData(phost,
                                        (uint8_t *)(void *)(AUDIO_Handle->mem),
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	f503 71c8 	add.w	r1, r3, #400	@ 0x190
                                        (uint8_t)AUDIO_Handle->control.EpSize,
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	f8b3 3186 	ldrh.w	r3, [r3, #390]	@ 0x186
        (void)USBH_InterruptReceiveData(phost,
 800d2a2:	b2da      	uxtb	r2, r3
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f002 f95f 	bl	800f56e <USBH_InterruptReceiveData>
                                        AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE;
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	2202      	movs	r2, #2
 800d2cc:	70da      	strb	r2, [r3, #3]
      }
      break;
 800d2ce:	e05a      	b.n	800d386 <USBH_AUDIO_Control+0x14a>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f002 fd10 	bl	800fcfe <USBH_LL_GetURBState>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d114      	bne.n	800d30e <USBH_AUDIO_Control+0xd2>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800d2f0:	3302      	adds	r3, #2
 800d2f2:	881b      	ldrh	r3, [r3, #0]
 800d2f4:	021b      	lsls	r3, r3, #8
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	4313      	orrs	r3, r2
 800d2fa:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 800d2fc:	89fb      	ldrh	r3, [r7, #14]
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	4619      	mov	r1, r3
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 faaa 	bl	800d85c <USBH_AUDIO_SetControlAttribute>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d03d      	beq.n	800d38a <USBH_AUDIO_Control+0x14e>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8d3 2860 	ldr.w	r2, [r3, #2144]	@ 0x860
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 800d31a:	1ad3      	subs	r3, r2, r3
 800d31c:	693a      	ldr	r2, [r7, #16]
 800d31e:	f892 218b 	ldrb.w	r2, [r2, #395]	@ 0x18b
 800d322:	4293      	cmp	r3, r2
 800d324:	d333      	bcc.n	800d38e <USBH_AUDIO_Control+0x152>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8d3 2860 	ldr.w	r2, [r3, #2144]	@ 0x860
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c

        (void)USBH_InterruptReceiveData(phost,
                                        (uint8_t *)(void *)(AUDIO_Handle->mem),
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	f503 71c8 	add.w	r1, r3, #400	@ 0x190
                                        (uint8_t)AUDIO_Handle->control.EpSize,
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	f8b3 3186 	ldrh.w	r3, [r3, #390]	@ 0x186
        (void)USBH_InterruptReceiveData(phost,
 800d33e:	b2da      	uxtb	r2, r3
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f002 f911 	bl	800f56e <USBH_InterruptReceiveData>
                                        AUDIO_Handle->control.Pipe);

      }
      break;
 800d34c:	e01f      	b.n	800d38e <USBH_AUDIO_Control+0x152>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 800d34e:	2101      	movs	r1, #1
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f000 fa83 	bl	800d85c <USBH_AUDIO_SetControlAttribute>
 800d356:	4603      	mov	r3, r0
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d11a      	bne.n	800d392 <USBH_AUDIO_Control+0x156>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	2201      	movs	r2, #1
 800d360:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 800d362:	2300      	movs	r3, #0
 800d364:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d366:	e014      	b.n	800d392 <USBH_AUDIO_Control+0x156>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 800d368:	2102      	movs	r1, #2
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 fa76 	bl	800d85c <USBH_AUDIO_SetControlAttribute>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	d10f      	bne.n	800d396 <USBH_AUDIO_Control+0x15a>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	2201      	movs	r2, #1
 800d37a:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 800d37c:	2300      	movs	r3, #0
 800d37e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d380:	e009      	b.n	800d396 <USBH_AUDIO_Control+0x15a>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 800d382:	bf00      	nop
 800d384:	e008      	b.n	800d398 <USBH_AUDIO_Control+0x15c>
      break;
 800d386:	bf00      	nop
 800d388:	e006      	b.n	800d398 <USBH_AUDIO_Control+0x15c>
          break;
 800d38a:	bf00      	nop
 800d38c:	e004      	b.n	800d398 <USBH_AUDIO_Control+0x15c>
      break;
 800d38e:	bf00      	nop
 800d390:	e002      	b.n	800d398 <USBH_AUDIO_Control+0x15c>
      break;
 800d392:	bf00      	nop
 800d394:	e000      	b.n	800d398 <USBH_AUDIO_Control+0x15c>
      break;
 800d396:	bf00      	nop
  }

  return status;
 800d398:	7dfb      	ldrb	r3, [r7, #23]
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3718      	adds	r7, #24
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop

0800d3a4 <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b086      	sub	sp, #24
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800d3b6:	69db      	ldr	r3, [r3, #28]
 800d3b8:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	789b      	ldrb	r3, [r3, #2]
 800d3be:	3b01      	subs	r3, #1
 800d3c0:	2b04      	cmp	r3, #4
 800d3c2:	d85c      	bhi.n	800d47e <USBH_AUDIO_OutputStream+0xda>
 800d3c4:	a201      	add	r2, pc, #4	@ (adr r2, 800d3cc <USBH_AUDIO_OutputStream+0x28>)
 800d3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ca:	bf00      	nop
 800d3cc:	0800d3e1 	.word	0x0800d3e1
 800d3d0:	0800d43d 	.word	0x0800d43d
 800d3d4:	0800d407 	.word	0x0800d407
 800d3d8:	0800d473 	.word	0x0800d473
 800d3dc:	0800d46d 	.word	0x0800d46d
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d3e6:	693a      	ldr	r2, [r7, #16]
 800d3e8:	3317      	adds	r3, #23
 800d3ea:	00db      	lsls	r3, r3, #3
 800d3ec:	4413      	add	r3, r2
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	79db      	ldrb	r3, [r3, #7]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d103      	bne.n	800d3fe <USBH_AUDIO_OutputStream+0x5a>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	2203      	movs	r2, #3
 800d3fa:	709a      	strb	r2, [r3, #2]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800d3fc:	e044      	b.n	800d488 <USBH_AUDIO_OutputStream+0xe4>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	2202      	movs	r2, #2
 800d402:	709a      	strb	r2, [r3, #2]
      break;
 800d404:	e040      	b.n	800d488 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d40c:	693a      	ldr	r2, [r7, #16]
 800d40e:	3317      	adds	r3, #23
 800d410:	00db      	lsls	r3, r3, #3
 800d412:	4413      	add	r3, r2
 800d414:	68db      	ldr	r3, [r3, #12]
 800d416:	3308      	adds	r3, #8
 800d418:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 800d420:	68fa      	ldr	r2, [r7, #12]
 800d422:	4619      	mov	r1, r3
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f7ff fed3 	bl	800d1d0 <USBH_AUDIO_SetEndpointControls>
 800d42a:	4603      	mov	r3, r0
 800d42c:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800d42e:	7dfb      	ldrb	r3, [r7, #23]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d126      	bne.n	800d482 <USBH_AUDIO_OutputStream+0xde>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	2205      	movs	r2, #5
 800d438:	709a      	strb	r2, [r3, #2]
      }
      break;
 800d43a:	e022      	b.n	800d482 <USBH_AUDIO_OutputStream+0xde>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800d442:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 800d44a:	68fa      	ldr	r2, [r7, #12]
 800d44c:	4619      	mov	r1, r3
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f7ff febe 	bl	800d1d0 <USBH_AUDIO_SetEndpointControls>
 800d454:	4603      	mov	r3, r0
 800d456:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800d458:	7dfb      	ldrb	r3, [r7, #23]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d113      	bne.n	800d486 <USBH_AUDIO_OutputStream+0xe2>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	2205      	movs	r2, #5
 800d462:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f7f3 fbe1 	bl	8000c2c <USBH_AUDIO_FrequencySet>
      }
      break;
 800d46a:	e00c      	b.n	800d486 <USBH_AUDIO_OutputStream+0xe2>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 800d46c:	2300      	movs	r3, #0
 800d46e:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800d470:	e00a      	b.n	800d488 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_PLAY:
      (void)USBH_AUDIO_Transmit(phost);
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 f80e 	bl	800d494 <USBH_AUDIO_Transmit>
      status = USBH_OK;
 800d478:	2300      	movs	r3, #0
 800d47a:	75fb      	strb	r3, [r7, #23]
      break;
 800d47c:	e004      	b.n	800d488 <USBH_AUDIO_OutputStream+0xe4>

    default:
      break;
 800d47e:	bf00      	nop
 800d480:	e002      	b.n	800d488 <USBH_AUDIO_OutputStream+0xe4>
      break;
 800d482:	bf00      	nop
 800d484:	e000      	b.n	800d488 <USBH_AUDIO_OutputStream+0xe4>
      break;
 800d486:	bf00      	nop
  }

  return status;
 800d488:	7dfb      	ldrb	r3, [r7, #23]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3718      	adds	r7, #24
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop

0800d494 <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d49c:	2301      	movs	r3, #1
 800d49e:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800d4a6:	69db      	ldr	r3, [r3, #28]
 800d4a8:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	791b      	ldrb	r3, [r3, #4]
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	d002      	beq.n	800d4b8 <USBH_AUDIO_Transmit+0x24>
 800d4b2:	2b02      	cmp	r3, #2
 800d4b4:	d033      	beq.n	800d51e <USBH_AUDIO_Transmit+0x8a>
 800d4b6:	e096      	b.n	800d5e6 <USBH_AUDIO_Transmit+0x152>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 3860 	ldr.w	r3, [r3, #2144]	@ 0x860
 800d4be:	f003 0301 	and.w	r3, r3, #1
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	f040 8092 	bne.w	800d5ec <USBH_AUDIO_Transmit+0x158>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8d3 2860 	ldr.w	r2, [r3, #2144]	@ 0x860
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	2202      	movs	r2, #2
 800d4d8:	711a      	strb	r2, [r3, #4]
        (void)USBH_IsocSendData(phost,
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	f8d3 1110 	ldr.w	r1, [r3, #272]	@ 0x110
                                AUDIO_Handle->headphone.buf,
                                (uint32_t)AUDIO_Handle->headphone.frame_length,
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
        (void)USBH_IsocSendData(phost,
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f002 f85c 	bl	800f5ac <USBH_IsocSendData>
                                AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 800d508:	461a      	mov	r2, r3
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
#if (USBH_USE_OS == 1U)
        osDelay(1);
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800d51c:	e066      	b.n	800d5ec <USBH_AUDIO_Transmit+0x158>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 800d524:	4619      	mov	r1, r3
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f002 fbe9 	bl	800fcfe <USBH_LL_GetURBState>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d15e      	bne.n	800d5f0 <USBH_AUDIO_Transmit+0x15c>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8d3 2860 	ldr.w	r2, [r3, #2144]	@ 0x860
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800d53e:	1ad3      	subs	r3, r2, r3
 800d540:	68ba      	ldr	r2, [r7, #8]
 800d542:	f892 20fc 	ldrb.w	r2, [r2, #252]	@ 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 800d546:	4293      	cmp	r3, r2
 800d548:	d352      	bcc.n	800d5f0 <USBH_AUDIO_Transmit+0x15c>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f8d3 2860 	ldr.w	r2, [r3, #2144]	@ 0x860
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

        if (AUDIO_Handle->control.supported == 1U)
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 800d55c:	2b01      	cmp	r3, #1
 800d55e:	d102      	bne.n	800d566 <USBH_AUDIO_Transmit+0xd2>
        {
          (void)USBH_AUDIO_Control(phost);
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f7ff fe6b 	bl	800d23c <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d572:	429a      	cmp	r2, r3
 800d574:	d82b      	bhi.n	800d5ce <USBH_AUDIO_Transmit+0x13a>
        {
          (void)USBH_IsocSendData(phost,
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
                                  AUDIO_Handle->headphone.cbuf,
                                  (uint32_t)AUDIO_Handle->headphone.frame_length,
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
          (void)USBH_IsocSendData(phost,
 800d582:	461a      	mov	r2, r3
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f002 f80e 	bl	800f5ac <USBH_IsocSendData>
                                  AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800d596:	68ba      	ldr	r2, [r7, #8]
 800d598:	f8b2 2120 	ldrh.w	r2, [r2, #288]	@ 0x120
 800d59c:	441a      	add	r2, r3
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d5aa:	68ba      	ldr	r2, [r7, #8]
 800d5ac:	f8b2 2120 	ldrh.w	r2, [r2, #288]	@ 0x120
 800d5b0:	441a      	add	r2, r3
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800d5be:	68ba      	ldr	r2, [r7, #8]
 800d5c0:	f8b2 2120 	ldrh.w	r2, [r2, #288]	@ 0x120
 800d5c4:	441a      	add	r2, r3
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 800d5cc:	e010      	b.n	800d5f0 <USBH_AUDIO_Transmit+0x15c>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d5d4:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	2205      	movs	r2, #5
 800d5dc:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f7f3 fb0a 	bl	8000bf8 <USBH_AUDIO_BufferEmptyCallback>
      break;
 800d5e4:	e004      	b.n	800d5f0 <USBH_AUDIO_Transmit+0x15c>

    default:
      status = USBH_FAIL;
 800d5e6:	2302      	movs	r3, #2
 800d5e8:	73fb      	strb	r3, [r7, #15]
      break;
 800d5ea:	e002      	b.n	800d5f2 <USBH_AUDIO_Transmit+0x15e>
      break;
 800d5ec:	bf00      	nop
 800d5ee:	e000      	b.n	800d5f2 <USBH_AUDIO_Transmit+0x15e>
      break;
 800d5f0:	bf00      	nop
  }
  return status;
 800d5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3710      	adds	r7, #16
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <USBH_AUDIO_SetFrequency>:
  */
USBH_StatusTypeDef USBH_AUDIO_SetFrequency(USBH_HandleTypeDef *phost,
                                           uint16_t SampleRate,
                                           uint8_t  NbrChannels,
                                           uint8_t  BitPerSample)
{
 800d5fc:	b590      	push	{r4, r7, lr}
 800d5fe:	b089      	sub	sp, #36	@ 0x24
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	4608      	mov	r0, r1
 800d606:	4611      	mov	r1, r2
 800d608:	461a      	mov	r2, r3
 800d60a:	4603      	mov	r3, r0
 800d60c:	807b      	strh	r3, [r7, #2]
 800d60e:	460b      	mov	r3, r1
 800d610:	707b      	strb	r3, [r7, #1]
 800d612:	4613      	mov	r3, r2
 800d614:	703b      	strb	r3, [r7, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d616:	2301      	movs	r3, #1
 800d618:	77fb      	strb	r3, [r7, #31]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t              index;
  uint8_t              change_freq = FALSE;
 800d61a:	2300      	movs	r3, #0
 800d61c:	777b      	strb	r3, [r7, #29]
  uint32_t             freq_min, freq_max;
  uint8_t              num_supported_freq;

  if (phost->gState == HOST_CLASS)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	b2db      	uxtb	r3, r3
 800d624:	2b0b      	cmp	r3, #11
 800d626:	f040 80dc 	bne.w	800d7e2 <USBH_AUDIO_SetFrequency+0x1e6>
  {
    AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800d630:	69db      	ldr	r3, [r3, #28]
 800d632:	61bb      	str	r3, [r7, #24]

    if (AUDIO_Handle->play_state == AUDIO_PLAYBACK_IDLE)
 800d634:	69bb      	ldr	r3, [r7, #24]
 800d636:	789b      	ldrb	r3, [r3, #2]
 800d638:	2b05      	cmp	r3, #5
 800d63a:	f040 80d2 	bne.w	800d7e2 <USBH_AUDIO_SetFrequency+0x1e6>
    {
      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d644:	69ba      	ldr	r2, [r7, #24]
 800d646:	3317      	adds	r3, #23
 800d648:	00db      	lsls	r3, r3, #3
 800d64a:	4413      	add	r3, r2
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	79db      	ldrb	r3, [r3, #7]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d14e      	bne.n	800d6f2 <USBH_AUDIO_SetFrequency+0xf6>
      {
        freq_min = LE24(AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0]);
 800d654:	69bb      	ldr	r3, [r7, #24]
 800d656:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d65a:	69ba      	ldr	r2, [r7, #24]
 800d65c:	3317      	adds	r3, #23
 800d65e:	00db      	lsls	r3, r3, #3
 800d660:	4413      	add	r3, r2
 800d662:	68db      	ldr	r3, [r3, #12]
 800d664:	7a1b      	ldrb	r3, [r3, #8]
 800d666:	4619      	mov	r1, r3
 800d668:	69bb      	ldr	r3, [r7, #24]
 800d66a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d66e:	69ba      	ldr	r2, [r7, #24]
 800d670:	3317      	adds	r3, #23
 800d672:	00db      	lsls	r3, r3, #3
 800d674:	4413      	add	r3, r2
 800d676:	68db      	ldr	r3, [r3, #12]
 800d678:	7a5b      	ldrb	r3, [r3, #9]
 800d67a:	021b      	lsls	r3, r3, #8
 800d67c:	ea41 0203 	orr.w	r2, r1, r3
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d686:	69b9      	ldr	r1, [r7, #24]
 800d688:	3317      	adds	r3, #23
 800d68a:	00db      	lsls	r3, r3, #3
 800d68c:	440b      	add	r3, r1
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	7a9b      	ldrb	r3, [r3, #10]
 800d692:	041b      	lsls	r3, r3, #16
 800d694:	4313      	orrs	r3, r2
 800d696:	613b      	str	r3, [r7, #16]
        freq_max = LE24(AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[1]);
 800d698:	69bb      	ldr	r3, [r7, #24]
 800d69a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d69e:	69ba      	ldr	r2, [r7, #24]
 800d6a0:	3317      	adds	r3, #23
 800d6a2:	00db      	lsls	r3, r3, #3
 800d6a4:	4413      	add	r3, r2
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	7adb      	ldrb	r3, [r3, #11]
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d6b2:	69ba      	ldr	r2, [r7, #24]
 800d6b4:	3317      	adds	r3, #23
 800d6b6:	00db      	lsls	r3, r3, #3
 800d6b8:	4413      	add	r3, r2
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	7b1b      	ldrb	r3, [r3, #12]
 800d6be:	021b      	lsls	r3, r3, #8
 800d6c0:	ea41 0203 	orr.w	r2, r1, r3
 800d6c4:	69bb      	ldr	r3, [r7, #24]
 800d6c6:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d6ca:	69b9      	ldr	r1, [r7, #24]
 800d6cc:	3317      	adds	r3, #23
 800d6ce:	00db      	lsls	r3, r3, #3
 800d6d0:	440b      	add	r3, r1
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	7b5b      	ldrb	r3, [r3, #13]
 800d6d6:	041b      	lsls	r3, r3, #16
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	60fb      	str	r3, [r7, #12]

        if ((SampleRate >= freq_min) && (SampleRate <= freq_max))
 800d6dc:	887b      	ldrh	r3, [r7, #2]
 800d6de:	693a      	ldr	r2, [r7, #16]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d858      	bhi.n	800d796 <USBH_AUDIO_SetFrequency+0x19a>
 800d6e4:	887b      	ldrh	r3, [r7, #2]
 800d6e6:	68fa      	ldr	r2, [r7, #12]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d354      	bcc.n	800d796 <USBH_AUDIO_SetFrequency+0x19a>
        {
          change_freq = TRUE;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	777b      	strb	r3, [r7, #29]
 800d6f0:	e051      	b.n	800d796 <USBH_AUDIO_SetFrequency+0x19a>
        }
      }
      else
      {
        num_supported_freq = (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bLength - 8U) / 3U;
 800d6f2:	69bb      	ldr	r3, [r7, #24]
 800d6f4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d6f8:	69ba      	ldr	r2, [r7, #24]
 800d6fa:	3317      	adds	r3, #23
 800d6fc:	00db      	lsls	r3, r3, #3
 800d6fe:	4413      	add	r3, r2
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	3b08      	subs	r3, #8
 800d706:	4a39      	ldr	r2, [pc, #228]	@ (800d7ec <USBH_AUDIO_SetFrequency+0x1f0>)
 800d708:	fba2 2303 	umull	r2, r3, r2, r3
 800d70c:	085b      	lsrs	r3, r3, #1
 800d70e:	75fb      	strb	r3, [r7, #23]

        for (index = 0U; index < num_supported_freq; index++)
 800d710:	2300      	movs	r3, #0
 800d712:	77bb      	strb	r3, [r7, #30]
 800d714:	e03b      	b.n	800d78e <USBH_AUDIO_SetFrequency+0x192>
        {
          if (SampleRate == LE24(
 800d716:	8879      	ldrh	r1, [r7, #2]
 800d718:	69bb      	ldr	r3, [r7, #24]
 800d71a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d71e:	69ba      	ldr	r2, [r7, #24]
 800d720:	3317      	adds	r3, #23
 800d722:	00db      	lsls	r3, r3, #3
 800d724:	4413      	add	r3, r2
 800d726:	68d8      	ldr	r0, [r3, #12]
 800d728:	7fba      	ldrb	r2, [r7, #30]
 800d72a:	4613      	mov	r3, r2
 800d72c:	005b      	lsls	r3, r3, #1
 800d72e:	4413      	add	r3, r2
 800d730:	4403      	add	r3, r0
 800d732:	3308      	adds	r3, #8
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	461c      	mov	r4, r3
 800d738:	69bb      	ldr	r3, [r7, #24]
 800d73a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d73e:	69ba      	ldr	r2, [r7, #24]
 800d740:	3317      	adds	r3, #23
 800d742:	00db      	lsls	r3, r3, #3
 800d744:	4413      	add	r3, r2
 800d746:	68d8      	ldr	r0, [r3, #12]
 800d748:	7fba      	ldrb	r2, [r7, #30]
 800d74a:	4613      	mov	r3, r2
 800d74c:	005b      	lsls	r3, r3, #1
 800d74e:	4413      	add	r3, r2
 800d750:	4403      	add	r3, r0
 800d752:	3309      	adds	r3, #9
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	021b      	lsls	r3, r3, #8
 800d758:	ea44 0003 	orr.w	r0, r4, r3
 800d75c:	69bb      	ldr	r3, [r7, #24]
 800d75e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d762:	69ba      	ldr	r2, [r7, #24]
 800d764:	3317      	adds	r3, #23
 800d766:	00db      	lsls	r3, r3, #3
 800d768:	4413      	add	r3, r2
 800d76a:	68dc      	ldr	r4, [r3, #12]
 800d76c:	7fba      	ldrb	r2, [r7, #30]
 800d76e:	4613      	mov	r3, r2
 800d770:	005b      	lsls	r3, r3, #1
 800d772:	4413      	add	r3, r2
 800d774:	4423      	add	r3, r4
 800d776:	330a      	adds	r3, #10
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	041b      	lsls	r3, r3, #16
 800d77c:	4303      	orrs	r3, r0
 800d77e:	4299      	cmp	r1, r3
 800d780:	d102      	bne.n	800d788 <USBH_AUDIO_SetFrequency+0x18c>
                AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[index]))
          {
            change_freq = TRUE;
 800d782:	2301      	movs	r3, #1
 800d784:	777b      	strb	r3, [r7, #29]
            break;
 800d786:	e006      	b.n	800d796 <USBH_AUDIO_SetFrequency+0x19a>
        for (index = 0U; index < num_supported_freq; index++)
 800d788:	7fbb      	ldrb	r3, [r7, #30]
 800d78a:	3301      	adds	r3, #1
 800d78c:	77bb      	strb	r3, [r7, #30]
 800d78e:	7fba      	ldrb	r2, [r7, #30]
 800d790:	7dfb      	ldrb	r3, [r7, #23]
 800d792:	429a      	cmp	r2, r3
 800d794:	d3bf      	bcc.n	800d716 <USBH_AUDIO_SetFrequency+0x11a>
          }
        }
      }

      if (change_freq == TRUE)
 800d796:	7f7b      	ldrb	r3, [r7, #29]
 800d798:	2b01      	cmp	r3, #1
 800d79a:	d119      	bne.n	800d7d0 <USBH_AUDIO_SetFrequency+0x1d4>
      {
        AUDIO_Handle->headphone.frequency = SampleRate;
 800d79c:	887a      	ldrh	r2, [r7, #2]
 800d79e:	69bb      	ldr	r3, [r7, #24]
 800d7a0:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
        AUDIO_Handle->headphone.frame_length = (SampleRate * BitPerSample * NbrChannels) / 8000U;
 800d7a4:	887b      	ldrh	r3, [r7, #2]
 800d7a6:	783a      	ldrb	r2, [r7, #0]
 800d7a8:	fb02 f303 	mul.w	r3, r2, r3
 800d7ac:	787a      	ldrb	r2, [r7, #1]
 800d7ae:	fb02 f303 	mul.w	r3, r2, r3
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	4b0e      	ldr	r3, [pc, #56]	@ (800d7f0 <USBH_AUDIO_SetFrequency+0x1f4>)
 800d7b6:	fba3 2302 	umull	r2, r3, r3, r2
 800d7ba:	0a5b      	lsrs	r3, r3, #9
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 800d7c4:	69bb      	ldr	r3, [r7, #24]
 800d7c6:	2202      	movs	r2, #2
 800d7c8:	709a      	strb	r2, [r3, #2]
        Status = USBH_OK;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	77fb      	strb	r3, [r7, #31]
 800d7ce:	e008      	b.n	800d7e2 <USBH_AUDIO_SetFrequency+0x1e6>
      }
      else
      {
        USBH_ErrLog("Sample Rate not supported by the Audio Device");
 800d7d0:	4808      	ldr	r0, [pc, #32]	@ (800d7f4 <USBH_AUDIO_SetFrequency+0x1f8>)
 800d7d2:	f002 fcb3 	bl	801013c <iprintf>
 800d7d6:	4808      	ldr	r0, [pc, #32]	@ (800d7f8 <USBH_AUDIO_SetFrequency+0x1fc>)
 800d7d8:	f002 fcb0 	bl	801013c <iprintf>
 800d7dc:	200a      	movs	r0, #10
 800d7de:	f002 fcbf 	bl	8010160 <putchar>
      }
    }
  }
  return Status;
 800d7e2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3724      	adds	r7, #36	@ 0x24
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd90      	pop	{r4, r7, pc}
 800d7ec:	aaaaaaab 	.word	0xaaaaaaab
 800d7f0:	10624dd3 	.word	0x10624dd3
 800d7f4:	08010f30 	.word	0x08010f30
 800d7f8:	08010f74 	.word	0x08010f74

0800d7fc <USBH_AUDIO_Play>:
  * @param  buf: pointer to raw audio data
  * @param  length: total length of the audio data
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_AUDIO_Play(USBH_HandleTypeDef *phost, uint8_t *buf, uint32_t length)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b087      	sub	sp, #28
 800d800:	af00      	add	r7, sp, #0
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	60b9      	str	r1, [r7, #8]
 800d806:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_FAIL;
 800d808:	2302      	movs	r3, #2
 800d80a:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  if (phost->gState == HOST_CLASS)
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	b2db      	uxtb	r3, r3
 800d812:	2b0b      	cmp	r3, #11
 800d814:	d11b      	bne.n	800d84e <USBH_AUDIO_Play+0x52>
  {
    AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800d81c:	69db      	ldr	r3, [r3, #28]
 800d81e:	613b      	str	r3, [r7, #16]

    if (AUDIO_Handle->play_state == AUDIO_PLAYBACK_IDLE)
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	789b      	ldrb	r3, [r3, #2]
 800d824:	2b05      	cmp	r3, #5
 800d826:	d112      	bne.n	800d84e <USBH_AUDIO_Play+0x52>
    {
      AUDIO_Handle->headphone.buf = buf;
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	68ba      	ldr	r2, [r7, #8]
 800d82c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      AUDIO_Handle->headphone.total_length = length;
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_PLAY;
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	2204      	movs	r2, #4
 800d83c:	709a      	strb	r2, [r3, #2]
      AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	2201      	movs	r2, #1
 800d842:	70da      	strb	r2, [r3, #3]
      AUDIO_Handle->processing_state = AUDIO_DATA_START_OUT;
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	2201      	movs	r2, #1
 800d848:	711a      	strb	r2, [r3, #4]
      Status = USBH_OK;
 800d84a:	2300      	movs	r3, #0
 800d84c:	75fb      	strb	r3, [r7, #23]
#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
    }
  }
  return Status;
 800d84e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d850:	4618      	mov	r0, r3
 800d852:	371c      	adds	r7, #28
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	460b      	mov	r3, r1
 800d866:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d868:	2301      	movs	r3, #1
 800d86a:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800d872:	69db      	ldr	r3, [r3, #28]
 800d874:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 800d876:	78fb      	ldrb	r3, [r7, #3]
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d002      	beq.n	800d882 <USBH_AUDIO_SetControlAttribute+0x26>
 800d87c:	2b02      	cmp	r3, #2
 800d87e:	d00b      	beq.n	800d898 <USBH_AUDIO_SetControlAttribute+0x3c>
 800d880:	e015      	b.n	800d8ae <USBH_AUDIO_SetControlAttribute+0x52>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800d88e:	441a      	add	r2, r3
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      break;
 800d896:	e00d      	b.n	800d8b4 <USBH_AUDIO_SetControlAttribute+0x58>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800d8a4:	1ad2      	subs	r2, r2, r3
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      break;
 800d8ac:	e002      	b.n	800d8b4 <USBH_AUDIO_SetControlAttribute+0x58>

    default :
      status = USBH_FAIL;
 800d8ae:	2302      	movs	r3, #2
 800d8b0:	73fb      	strb	r3, [r7, #15]
      break;
 800d8b2:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d905      	bls.n	800d8d0 <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d205      	bcs.n	800d8ec <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
  }

  if (AUDIO_SetVolume(phost,
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	f893 11a0 	ldrb.w	r1, [r3, #416]	@ 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	f893 21a1 	ldrb.w	r2, [r3, #417]	@ 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
  if (AUDIO_SetVolume(phost,
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 f827 	bl	800d954 <AUDIO_SetVolume>
 800d906:	4603      	mov	r3, r0
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d01e      	beq.n	800d94a <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 800d912:	2b01      	cmp	r3, #1
 800d914:	d10e      	bne.n	800d934 <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
      status = USBH_OK;
 800d92e:	2300      	movs	r3, #0
 800d930:	73fb      	strb	r3, [r7, #15]
 800d932:	e007      	b.n	800d944 <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 800d93a:	3b01      	subs	r3, #1
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	2206      	movs	r2, #6
 800d948:	705a      	strb	r2, [r3, #1]
  }


  return status;
 800d94a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3710      	adds	r7, #16
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}

0800d954 <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b086      	sub	sp, #24
 800d958:	af02      	add	r7, sp, #8
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	4608      	mov	r0, r1
 800d95e:	4611      	mov	r1, r2
 800d960:	461a      	mov	r2, r3
 800d962:	4603      	mov	r3, r0
 800d964:	70fb      	strb	r3, [r7, #3]
 800d966:	460b      	mov	r3, r1
 800d968:	70bb      	strb	r3, [r7, #2]
 800d96a:	4613      	mov	r3, r2
 800d96c:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d96e:	2301      	movs	r3, #1
 800d970:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800d978:	69db      	ldr	r3, [r3, #28]
 800d97a:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	883a      	ldrh	r2, [r7, #0]
 800d980:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 800d984:	78fa      	ldrb	r2, [r7, #3]
 800d986:	2302      	movs	r3, #2
 800d988:	9301      	str	r3, [sp, #4]
 800d98a:	78bb      	ldrb	r3, [r7, #2]
 800d98c:	9300      	str	r3, [sp, #0]
 800d98e:	2302      	movs	r3, #2
 800d990:	2106      	movs	r1, #6
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f7ff f946 	bl	800cc24 <USBH_AC_SetCur>
 800d998:	4603      	mov	r3, r0
 800d99a:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 800d99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3710      	adds	r7, #16
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
	...

0800d9a8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d10a      	bne.n	800d9d2 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800d9bc:	481c      	ldr	r0, [pc, #112]	@ (800da30 <USBH_Init+0x88>)
 800d9be:	f002 fbbd 	bl	801013c <iprintf>
 800d9c2:	481c      	ldr	r0, [pc, #112]	@ (800da34 <USBH_Init+0x8c>)
 800d9c4:	f002 fbba 	bl	801013c <iprintf>
 800d9c8:	200a      	movs	r0, #10
 800d9ca:	f002 fbc9 	bl	8010160 <putchar>
    return USBH_FAIL;
 800d9ce:	2302      	movs	r3, #2
 800d9d0:	e029      	b.n	800da26 <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	79fa      	ldrb	r2, [r7, #7]
 800d9d6:	f883 2868 	strb.w	r2, [r3, #2152]	@ 0x868

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	f8c3 2818 	str.w	r2, [r3, #2072]	@ 0x818
  phost->ClassNumber = 0U;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800d9ea:	68f8      	ldr	r0, [r7, #12]
 800d9ec:	f000 f824 	bl	800da38 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f883 2623 	strb.w	r2, [r3, #1571]	@ 0x623
  phost->device.is_connected = 0U;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f883 2620 	strb.w	r2, [r3, #1568]	@ 0x620
  phost->device.is_disconnected = 0U;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2200      	movs	r2, #0
 800da04:	f883 2621 	strb.w	r2, [r3, #1569]	@ 0x621
  phost->device.is_ReEnumerated = 0U;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2200      	movs	r2, #0
 800da0c:	f883 2622 	strb.w	r2, [r3, #1570]	@ 0x622

  /* Assign User process */
  if (pUsrFunc != NULL)
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d003      	beq.n	800da1e <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	68ba      	ldr	r2, [r7, #8]
 800da1a:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800da1e:	68f8      	ldr	r0, [r7, #12]
 800da20:	f002 f832 	bl	800fa88 <USBH_LL_Init>

  return USBH_OK;
 800da24:	2300      	movs	r3, #0
}
 800da26:	4618      	mov	r0, r3
 800da28:	3710      	adds	r7, #16
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	08010fa4 	.word	0x08010fa4
 800da34:	08010fac 	.word	0x08010fac

0800da38 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b084      	sub	sp, #16
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800da40:	2300      	movs	r3, #0
 800da42:	60fb      	str	r3, [r7, #12]
 800da44:	e009      	b.n	800da5a <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	f502 7202 	add.w	r2, r2, #520	@ 0x208
 800da4e:	2100      	movs	r1, #0
 800da50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	3301      	adds	r3, #1
 800da58:	60fb      	str	r3, [r7, #12]
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2b0f      	cmp	r3, #15
 800da5e:	d9f2      	bls.n	800da46 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800da60:	2300      	movs	r3, #0
 800da62:	60fb      	str	r3, [r7, #12]
 800da64:	e009      	b.n	800da7a <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800da66:	687a      	ldr	r2, [r7, #4]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	4413      	add	r3, r2
 800da6c:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800da70:	2200      	movs	r2, #0
 800da72:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	3301      	adds	r3, #1
 800da78:	60fb      	str	r3, [r7, #12]
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da80:	d3f1      	bcc.n	800da66 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2200      	movs	r2, #0
 800da86:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2200      	movs	r2, #0
 800da8c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2201      	movs	r2, #1
 800da92:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	f8c3 2860 	str.w	r2, [r3, #2144]	@ 0x860

  phost->Control.state = CTRL_SETUP;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2201      	movs	r2, #1
 800daa0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2240      	movs	r2, #64	@ 0x40
 800daa6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2200      	movs	r2, #0
 800daac:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2200      	movs	r2, #0
 800dab2:	f883 261c 	strb.w	r2, [r3, #1564]	@ 0x61c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2201      	movs	r2, #1
 800daba:	f883 261d 	strb.w	r2, [r3, #1565]	@ 0x61d
  phost->device.RstCnt = 0U;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	f883 261f 	strb.w	r2, [r3, #1567]	@ 0x61f
  phost->device.EnumCnt = 0U;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2200      	movs	r2, #0
 800daca:	f883 261e 	strb.w	r2, [r3, #1566]	@ 0x61e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	331c      	adds	r3, #28
 800dad2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800dad6:	2100      	movs	r1, #0
 800dad8:	4618      	mov	r0, r3
 800dada:	f002 fb8c 	bl	80101f6 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800dae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dae8:	2100      	movs	r1, #0
 800daea:	4618      	mov	r0, r3
 800daec:	f002 fb83 	bl	80101f6 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f203 6326 	addw	r3, r3, #1574	@ 0x626
 800daf6:	2212      	movs	r2, #18
 800daf8:	2100      	movs	r1, #0
 800dafa:	4618      	mov	r0, r3
 800dafc:	f002 fb7b 	bl	80101f6 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 800db06:	f44f 72ed 	mov.w	r2, #474	@ 0x1da
 800db0a:	2100      	movs	r1, #0
 800db0c:	4618      	mov	r0, r3
 800db0e:	f002 fb72 	bl	80101f6 <memset>

  return USBH_OK;
 800db12:	2300      	movs	r3, #0
}
 800db14:	4618      	mov	r0, r3
 800db16:	3710      	adds	r7, #16
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800db26:	2300      	movs	r3, #0
 800db28:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d021      	beq.n	800db74 <USBH_RegisterClass+0x58>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8d3 381c 	ldr.w	r3, [r3, #2076]	@ 0x81c
 800db36:	2b00      	cmp	r3, #0
 800db38:	d110      	bne.n	800db5c <USBH_RegisterClass+0x40>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8d3 381c 	ldr.w	r3, [r3, #2076]	@ 0x81c
 800db40:	1c59      	adds	r1, r3, #1
 800db42:	687a      	ldr	r2, [r7, #4]
 800db44:	f8c2 181c 	str.w	r1, [r2, #2076]	@ 0x81c
 800db48:	687a      	ldr	r2, [r7, #4]
 800db4a:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800db4e:	009b      	lsls	r3, r3, #2
 800db50:	4413      	add	r3, r2
 800db52:	683a      	ldr	r2, [r7, #0]
 800db54:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800db56:	2300      	movs	r3, #0
 800db58:	73fb      	strb	r3, [r7, #15]
 800db5a:	e016      	b.n	800db8a <USBH_RegisterClass+0x6e>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800db5c:	480d      	ldr	r0, [pc, #52]	@ (800db94 <USBH_RegisterClass+0x78>)
 800db5e:	f002 faed 	bl	801013c <iprintf>
 800db62:	480d      	ldr	r0, [pc, #52]	@ (800db98 <USBH_RegisterClass+0x7c>)
 800db64:	f002 faea 	bl	801013c <iprintf>
 800db68:	200a      	movs	r0, #10
 800db6a:	f002 faf9 	bl	8010160 <putchar>
      status = USBH_FAIL;
 800db6e:	2302      	movs	r3, #2
 800db70:	73fb      	strb	r3, [r7, #15]
 800db72:	e00a      	b.n	800db8a <USBH_RegisterClass+0x6e>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800db74:	4807      	ldr	r0, [pc, #28]	@ (800db94 <USBH_RegisterClass+0x78>)
 800db76:	f002 fae1 	bl	801013c <iprintf>
 800db7a:	4808      	ldr	r0, [pc, #32]	@ (800db9c <USBH_RegisterClass+0x80>)
 800db7c:	f002 fade 	bl	801013c <iprintf>
 800db80:	200a      	movs	r0, #10
 800db82:	f002 faed 	bl	8010160 <putchar>
    status = USBH_FAIL;
 800db86:	2302      	movs	r3, #2
 800db88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800db8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3710      	adds	r7, #16
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}
 800db94:	08010fa4 	.word	0x08010fa4
 800db98:	08010fc0 	.word	0x08010fc0
 800db9c:	08010fdc 	.word	0x08010fdc

0800dba0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b087      	sub	sp, #28
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	4608      	mov	r0, r1
 800dbaa:	4611      	mov	r1, r2
 800dbac:	461a      	mov	r2, r3
 800dbae:	4603      	mov	r3, r0
 800dbb0:	70fb      	strb	r3, [r7, #3]
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	70bb      	strb	r3, [r7, #2]
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 800dbc8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800dbca:	e025      	b.n	800dc18 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800dbcc:	7dfb      	ldrb	r3, [r7, #23]
 800dbce:	223a      	movs	r2, #58	@ 0x3a
 800dbd0:	fb02 f303 	mul.w	r3, r2, r3
 800dbd4:	3308      	adds	r3, #8
 800dbd6:	68fa      	ldr	r2, [r7, #12]
 800dbd8:	4413      	add	r3, r2
 800dbda:	3302      	adds	r3, #2
 800dbdc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	795b      	ldrb	r3, [r3, #5]
 800dbe2:	78fa      	ldrb	r2, [r7, #3]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d002      	beq.n	800dbee <USBH_FindInterface+0x4e>
 800dbe8:	78fb      	ldrb	r3, [r7, #3]
 800dbea:	2bff      	cmp	r3, #255	@ 0xff
 800dbec:	d111      	bne.n	800dc12 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800dbf2:	78ba      	ldrb	r2, [r7, #2]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d002      	beq.n	800dbfe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800dbf8:	78bb      	ldrb	r3, [r7, #2]
 800dbfa:	2bff      	cmp	r3, #255	@ 0xff
 800dbfc:	d109      	bne.n	800dc12 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800dc02:	787a      	ldrb	r2, [r7, #1]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d002      	beq.n	800dc0e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800dc08:	787b      	ldrb	r3, [r7, #1]
 800dc0a:	2bff      	cmp	r3, #255	@ 0xff
 800dc0c:	d101      	bne.n	800dc12 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800dc0e:	7dfb      	ldrb	r3, [r7, #23]
 800dc10:	e006      	b.n	800dc20 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800dc12:	7dfb      	ldrb	r3, [r7, #23]
 800dc14:	3301      	adds	r3, #1
 800dc16:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800dc18:	7dfb      	ldrb	r3, [r7, #23]
 800dc1a:	2b07      	cmp	r3, #7
 800dc1c:	d9d6      	bls.n	800dbcc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800dc1e:	23ff      	movs	r3, #255	@ 0xff
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	371c      	adds	r7, #28
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b087      	sub	sp, #28
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	460b      	mov	r3, r1
 800dc36:	70fb      	strb	r3, [r7, #3]
 800dc38:	4613      	mov	r3, r2
 800dc3a:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800dc40:	2300      	movs	r3, #0
 800dc42:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 800dc4a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800dc4c:	e017      	b.n	800dc7e <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800dc4e:	7dfb      	ldrb	r3, [r7, #23]
 800dc50:	223a      	movs	r2, #58	@ 0x3a
 800dc52:	fb02 f303 	mul.w	r3, r2, r3
 800dc56:	3308      	adds	r3, #8
 800dc58:	68fa      	ldr	r2, [r7, #12]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	3302      	adds	r3, #2
 800dc5e:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	789b      	ldrb	r3, [r3, #2]
 800dc64:	78fa      	ldrb	r2, [r7, #3]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d106      	bne.n	800dc78 <USBH_FindInterfaceIndex+0x4c>
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	78db      	ldrb	r3, [r3, #3]
 800dc6e:	78ba      	ldrb	r2, [r7, #2]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d101      	bne.n	800dc78 <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 800dc74:	7dfb      	ldrb	r3, [r7, #23]
 800dc76:	e006      	b.n	800dc86 <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 800dc78:	7dfb      	ldrb	r3, [r7, #23]
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800dc7e:	7dfb      	ldrb	r3, [r7, #23]
 800dc80:	2b07      	cmp	r3, #7
 800dc82:	d9e4      	bls.n	800dc4e <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 800dc84:	23ff      	movs	r3, #255	@ 0xff
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	371c      	adds	r7, #28
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr

0800dc92 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800dc92:	b580      	push	{r7, lr}
 800dc94:	b082      	sub	sp, #8
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f001 ff38 	bl	800fb10 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800dca0:	2101      	movs	r1, #1
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f002 f83e 	bl	800fd24 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3708      	adds	r7, #8
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
	...

0800dcb4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b088      	sub	sp, #32
 800dcb8:	af04      	add	r7, sp, #16
 800dcba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800dcbc:	2302      	movs	r3, #2
 800dcbe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f893 3621 	ldrb.w	r3, [r3, #1569]	@ 0x621
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d102      	bne.n	800dcd6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2203      	movs	r2, #3
 800dcd4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	2b0b      	cmp	r3, #11
 800dcde:	f200 823d 	bhi.w	800e15c <USBH_Process+0x4a8>
 800dce2:	a201      	add	r2, pc, #4	@ (adr r2, 800dce8 <USBH_Process+0x34>)
 800dce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dce8:	0800dd19 	.word	0x0800dd19
 800dcec:	0800dd57 	.word	0x0800dd57
 800dcf0:	0800ddd9 	.word	0x0800ddd9
 800dcf4:	0800e0eb 	.word	0x0800e0eb
 800dcf8:	0800e15d 	.word	0x0800e15d
 800dcfc:	0800de79 	.word	0x0800de79
 800dd00:	0800e06d 	.word	0x0800e06d
 800dd04:	0800dec7 	.word	0x0800dec7
 800dd08:	0800dee7 	.word	0x0800dee7
 800dd0c:	0800df11 	.word	0x0800df11
 800dd10:	0800df6d 	.word	0x0800df6d
 800dd14:	0800e0d3 	.word	0x0800e0d3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f893 3620 	ldrb.w	r3, [r3, #1568]	@ 0x620
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	f000 821d 	beq.w	800e160 <USBH_Process+0x4ac>
      {
        USBH_UsrLog("USB Device Connected");
 800dd26:	48a7      	ldr	r0, [pc, #668]	@ (800dfc4 <USBH_Process+0x310>)
 800dd28:	f002 fa08 	bl	801013c <iprintf>
 800dd2c:	200a      	movs	r0, #10
 800dd2e:	f002 fa17 	bl	8010160 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2201      	movs	r2, #1
 800dd36:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800dd38:	20c8      	movs	r0, #200	@ 0xc8
 800dd3a:	f002 f847 	bl	800fdcc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f001 ff43 	bl	800fbca <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2200      	movs	r2, #0
 800dd48:	f883 261c 	strb.w	r2, [r3, #1564]	@ 0x61c
        phost->Timeout = 0U;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f8c3 2864 	str.w	r2, [r3, #2148]	@ 0x864

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800dd54:	e204      	b.n	800e160 <USBH_Process+0x4ac>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f893 3623 	ldrb.w	r3, [r3, #1571]	@ 0x623
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d10d      	bne.n	800dd7e <USBH_Process+0xca>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800dd62:	4899      	ldr	r0, [pc, #612]	@ (800dfc8 <USBH_Process+0x314>)
 800dd64:	f002 f9ea 	bl	801013c <iprintf>
 800dd68:	200a      	movs	r0, #10
 800dd6a:	f002 f9f9 	bl	8010160 <putchar>
        phost->device.RstCnt = 0U;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2200      	movs	r2, #0
 800dd72:	f883 261f 	strb.w	r2, [r3, #1567]	@ 0x61f
        phost->gState = HOST_DEV_ATTACHED;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2202      	movs	r2, #2
 800dd7a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800dd7c:	e1fd      	b.n	800e17a <USBH_Process+0x4c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f8d3 3864 	ldr.w	r3, [r3, #2148]	@ 0x864
 800dd84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dd88:	d91a      	bls.n	800ddc0 <USBH_Process+0x10c>
          phost->device.RstCnt++;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f893 361f 	ldrb.w	r3, [r3, #1567]	@ 0x61f
 800dd90:	3301      	adds	r3, #1
 800dd92:	b2da      	uxtb	r2, r3
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f883 261f 	strb.w	r2, [r3, #1567]	@ 0x61f
          if (phost->device.RstCnt > 3U)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f893 361f 	ldrb.w	r3, [r3, #1567]	@ 0x61f
 800dda0:	2b03      	cmp	r3, #3
 800dda2:	d909      	bls.n	800ddb8 <USBH_Process+0x104>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800dda4:	4889      	ldr	r0, [pc, #548]	@ (800dfcc <USBH_Process+0x318>)
 800dda6:	f002 f9c9 	bl	801013c <iprintf>
 800ddaa:	200a      	movs	r0, #10
 800ddac:	f002 f9d8 	bl	8010160 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	220d      	movs	r2, #13
 800ddb4:	701a      	strb	r2, [r3, #0]
      break;
 800ddb6:	e1e0      	b.n	800e17a <USBH_Process+0x4c6>
            phost->gState = HOST_IDLE;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	701a      	strb	r2, [r3, #0]
      break;
 800ddbe:	e1dc      	b.n	800e17a <USBH_Process+0x4c6>
          phost->Timeout += 10U;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 3864 	ldr.w	r3, [r3, #2148]	@ 0x864
 800ddc6:	f103 020a 	add.w	r2, r3, #10
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f8c3 2864 	str.w	r2, [r3, #2148]	@ 0x864
          USBH_Delay(10U);
 800ddd0:	200a      	movs	r0, #10
 800ddd2:	f001 fffb 	bl	800fdcc <USBH_Delay>
      break;
 800ddd6:	e1d0      	b.n	800e17a <USBH_Process+0x4c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d005      	beq.n	800ddee <USBH_Process+0x13a>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 800dde8:	2104      	movs	r1, #4
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ddee:	2064      	movs	r0, #100	@ 0x64
 800ddf0:	f001 ffec 	bl	800fdcc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f001 fec1 	bl	800fb7c <USBH_LL_GetSpeed>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f883 261d 	strb.w	r2, [r3, #1565]	@ 0x61d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2205      	movs	r2, #5
 800de08:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800de0a:	2100      	movs	r1, #0
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f001 fc17 	bl	800f640 <USBH_AllocPipe>
 800de12:	4603      	mov	r3, r0
 800de14:	461a      	mov	r2, r3
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800de1a:	2180      	movs	r1, #128	@ 0x80
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f001 fc0f 	bl	800f640 <USBH_AllocPipe>
 800de22:	4603      	mov	r3, r0
 800de24:	461a      	mov	r2, r3
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	7919      	ldrb	r1, [r3, #4]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f893 061c 	ldrb.w	r0, [r3, #1564]	@ 0x61c
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f893 361d 	ldrb.w	r3, [r3, #1565]	@ 0x61d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800de3e:	9202      	str	r2, [sp, #8]
 800de40:	2200      	movs	r2, #0
 800de42:	9201      	str	r2, [sp, #4]
 800de44:	9300      	str	r3, [sp, #0]
 800de46:	4603      	mov	r3, r0
 800de48:	2280      	movs	r2, #128	@ 0x80
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f001 fbc9 	bl	800f5e2 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	7959      	ldrb	r1, [r3, #5]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f893 061c 	ldrb.w	r0, [r3, #1564]	@ 0x61c
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f893 361d 	ldrb.w	r3, [r3, #1565]	@ 0x61d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800de60:	687a      	ldr	r2, [r7, #4]
 800de62:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800de64:	9202      	str	r2, [sp, #8]
 800de66:	2200      	movs	r2, #0
 800de68:	9201      	str	r2, [sp, #4]
 800de6a:	9300      	str	r3, [sp, #0]
 800de6c:	4603      	mov	r3, r0
 800de6e:	2200      	movs	r2, #0
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f001 fbb6 	bl	800f5e2 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800de76:	e180      	b.n	800e17a <USBH_Process+0x4c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f000 f991 	bl	800e1a0 <USBH_HandleEnum>
 800de7e:	4603      	mov	r3, r0
 800de80:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800de82:	7bbb      	ldrb	r3, [r7, #14]
 800de84:	b2db      	uxtb	r3, r3
 800de86:	2b00      	cmp	r3, #0
 800de88:	f040 816c 	bne.w	800e164 <USBH_Process+0x4b0>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800de8c:	4850      	ldr	r0, [pc, #320]	@ (800dfd0 <USBH_Process+0x31c>)
 800de8e:	f002 f955 	bl	801013c <iprintf>
 800de92:	200a      	movs	r0, #10
 800de94:	f002 f964 	bl	8010160 <putchar>

        phost->device.current_interface = 0U;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f893 3637 	ldrb.w	r3, [r3, #1591]	@ 0x637
 800dea6:	2b01      	cmp	r3, #1
 800dea8:	d109      	bne.n	800debe <USBH_Process+0x20a>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800deaa:	484a      	ldr	r0, [pc, #296]	@ (800dfd4 <USBH_Process+0x320>)
 800deac:	f002 f946 	bl	801013c <iprintf>
 800deb0:	200a      	movs	r0, #10
 800deb2:	f002 f955 	bl	8010160 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2208      	movs	r2, #8
 800deba:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800debc:	e152      	b.n	800e164 <USBH_Process+0x4b0>
          phost->gState = HOST_INPUT;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2207      	movs	r2, #7
 800dec2:	701a      	strb	r2, [r3, #0]
      break;
 800dec4:	e14e      	b.n	800e164 <USBH_Process+0x4b0>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 800decc:	2b00      	cmp	r3, #0
 800dece:	f000 814b 	beq.w	800e168 <USBH_Process+0x4b4>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 800ded8:	2101      	movs	r1, #1
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2208      	movs	r2, #8
 800dee2:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800dee4:	e140      	b.n	800e168 <USBH_Process+0x4b4>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f893 363d 	ldrb.w	r3, [r3, #1597]	@ 0x63d
 800deec:	4619      	mov	r1, r3
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 fda1 	bl	800ea36 <USBH_SetCfg>
 800def4:	4603      	mov	r3, r0
 800def6:	2b00      	cmp	r3, #0
 800def8:	f040 8138 	bne.w	800e16c <USBH_Process+0x4b8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2209      	movs	r2, #9
 800df00:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800df02:	4835      	ldr	r0, [pc, #212]	@ (800dfd8 <USBH_Process+0x324>)
 800df04:	f002 f91a 	bl	801013c <iprintf>
 800df08:	200a      	movs	r0, #10
 800df0a:	f002 f929 	bl	8010160 <putchar>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800df0e:	e12d      	b.n	800e16c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f893 363f 	ldrb.w	r3, [r3, #1599]	@ 0x63f
 800df16:	f003 0320 	and.w	r3, r3, #32
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d022      	beq.n	800df64 <USBH_Process+0x2b0>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800df1e:	2101      	movs	r1, #1
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f000 fdd2 	bl	800eaca <USBH_SetFeature>
 800df26:	4603      	mov	r3, r0
 800df28:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800df2a:	7bbb      	ldrb	r3, [r7, #14]
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d109      	bne.n	800df46 <USBH_Process+0x292>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800df32:	482a      	ldr	r0, [pc, #168]	@ (800dfdc <USBH_Process+0x328>)
 800df34:	f002 f902 	bl	801013c <iprintf>
 800df38:	200a      	movs	r0, #10
 800df3a:	f002 f911 	bl	8010160 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	220a      	movs	r2, #10
 800df42:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800df44:	e114      	b.n	800e170 <USBH_Process+0x4bc>
        else if (status == USBH_NOT_SUPPORTED)
 800df46:	7bbb      	ldrb	r3, [r7, #14]
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	2b03      	cmp	r3, #3
 800df4c:	f040 8110 	bne.w	800e170 <USBH_Process+0x4bc>
          USBH_UsrLog("Remote wakeup not supported by the device");
 800df50:	4823      	ldr	r0, [pc, #140]	@ (800dfe0 <USBH_Process+0x32c>)
 800df52:	f002 f8f3 	bl	801013c <iprintf>
 800df56:	200a      	movs	r0, #10
 800df58:	f002 f902 	bl	8010160 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	220a      	movs	r2, #10
 800df60:	701a      	strb	r2, [r3, #0]
      break;
 800df62:	e105      	b.n	800e170 <USBH_Process+0x4bc>
        phost->gState = HOST_CHECK_CLASS;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	220a      	movs	r2, #10
 800df68:	701a      	strb	r2, [r3, #0]
      break;
 800df6a:	e101      	b.n	800e170 <USBH_Process+0x4bc>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f8d3 381c 	ldr.w	r3, [r3, #2076]	@ 0x81c
 800df72:	2b00      	cmp	r3, #0
 800df74:	d106      	bne.n	800df84 <USBH_Process+0x2d0>
      {
        USBH_UsrLog("No Class has been registered.");
 800df76:	481b      	ldr	r0, [pc, #108]	@ (800dfe4 <USBH_Process+0x330>)
 800df78:	f002 f8e0 	bl	801013c <iprintf>
 800df7c:	200a      	movs	r0, #10
 800df7e:	f002 f8ef 	bl	8010160 <putchar>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800df82:	e0fa      	b.n	800e17a <USBH_Process+0x4c6>
        phost->pActiveClass = NULL;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2200      	movs	r2, #0
 800df88:	f8c3 2818 	str.w	r2, [r3, #2072]	@ 0x818
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800df8c:	2300      	movs	r3, #0
 800df8e:	73fb      	strb	r3, [r7, #15]
 800df90:	e02d      	b.n	800dfee <USBH_Process+0x33a>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800df92:	7bfb      	ldrb	r3, [r7, #15]
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	4413      	add	r3, r2
 800df9e:	685b      	ldr	r3, [r3, #4]
 800dfa0:	791a      	ldrb	r2, [r3, #4]
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f893 3647 	ldrb.w	r3, [r3, #1607]	@ 0x647
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d11d      	bne.n	800dfe8 <USBH_Process+0x334>
            phost->pActiveClass = phost->pClass[idx];
 800dfac:	7bfb      	ldrb	r3, [r7, #15]
 800dfae:	687a      	ldr	r2, [r7, #4]
 800dfb0:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	4413      	add	r3, r2
 800dfb8:	685a      	ldr	r2, [r3, #4]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f8c3 2818 	str.w	r2, [r3, #2072]	@ 0x818
            break;
 800dfc0:	e018      	b.n	800dff4 <USBH_Process+0x340>
 800dfc2:	bf00      	nop
 800dfc4:	08011064 	.word	0x08011064
 800dfc8:	0801107c 	.word	0x0801107c
 800dfcc:	08011098 	.word	0x08011098
 800dfd0:	080110c4 	.word	0x080110c4
 800dfd4:	080110d8 	.word	0x080110d8
 800dfd8:	08011100 	.word	0x08011100
 800dfdc:	0801111c 	.word	0x0801111c
 800dfe0:	0801113c 	.word	0x0801113c
 800dfe4:	08011168 	.word	0x08011168
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800dfe8:	7bfb      	ldrb	r3, [r7, #15]
 800dfea:	3301      	adds	r3, #1
 800dfec:	73fb      	strb	r3, [r7, #15]
 800dfee:	7bfb      	ldrb	r3, [r7, #15]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d0ce      	beq.n	800df92 <USBH_Process+0x2de>
        if (phost->pActiveClass != NULL)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d02c      	beq.n	800e058 <USBH_Process+0x3a4>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	4798      	blx	r3
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d114      	bne.n	800e03a <USBH_Process+0x386>
            phost->gState = HOST_CLASS_REQUEST;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2206      	movs	r2, #6
 800e014:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4619      	mov	r1, r3
 800e020:	4858      	ldr	r0, [pc, #352]	@ (800e184 <USBH_Process+0x4d0>)
 800e022:	f002 f88b 	bl	801013c <iprintf>
 800e026:	200a      	movs	r0, #10
 800e028:	f002 f89a 	bl	8010160 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 800e032:	2103      	movs	r1, #3
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	4798      	blx	r3
      break;
 800e038:	e09f      	b.n	800e17a <USBH_Process+0x4c6>
            phost->gState = HOST_ABORT_STATE;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	220d      	movs	r2, #13
 800e03e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	4619      	mov	r1, r3
 800e04a:	484f      	ldr	r0, [pc, #316]	@ (800e188 <USBH_Process+0x4d4>)
 800e04c:	f002 f876 	bl	801013c <iprintf>
 800e050:	200a      	movs	r0, #10
 800e052:	f002 f885 	bl	8010160 <putchar>
      break;
 800e056:	e090      	b.n	800e17a <USBH_Process+0x4c6>
          phost->gState = HOST_ABORT_STATE;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	220d      	movs	r2, #13
 800e05c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800e05e:	484b      	ldr	r0, [pc, #300]	@ (800e18c <USBH_Process+0x4d8>)
 800e060:	f002 f86c 	bl	801013c <iprintf>
 800e064:	200a      	movs	r0, #10
 800e066:	f002 f87b 	bl	8010160 <putchar>
      break;
 800e06a:	e086      	b.n	800e17a <USBH_Process+0x4c6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800e072:	2b00      	cmp	r3, #0
 800e074:	d020      	beq.n	800e0b8 <USBH_Process+0x404>
      {
        status = phost->pActiveClass->Requests(phost);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800e07c:	691b      	ldr	r3, [r3, #16]
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	4798      	blx	r3
 800e082:	4603      	mov	r3, r0
 800e084:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e086:	7bbb      	ldrb	r3, [r7, #14]
 800e088:	b2db      	uxtb	r3, r3
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d103      	bne.n	800e096 <USBH_Process+0x3e2>
        {
          phost->gState = HOST_CLASS;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	220b      	movs	r2, #11
 800e092:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800e094:	e06e      	b.n	800e174 <USBH_Process+0x4c0>
        else if (status == USBH_FAIL)
 800e096:	7bbb      	ldrb	r3, [r7, #14]
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	2b02      	cmp	r3, #2
 800e09c:	d16a      	bne.n	800e174 <USBH_Process+0x4c0>
          phost->gState = HOST_ABORT_STATE;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	220d      	movs	r2, #13
 800e0a2:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800e0a4:	483a      	ldr	r0, [pc, #232]	@ (800e190 <USBH_Process+0x4dc>)
 800e0a6:	f002 f849 	bl	801013c <iprintf>
 800e0aa:	483a      	ldr	r0, [pc, #232]	@ (800e194 <USBH_Process+0x4e0>)
 800e0ac:	f002 f846 	bl	801013c <iprintf>
 800e0b0:	200a      	movs	r0, #10
 800e0b2:	f002 f855 	bl	8010160 <putchar>
      break;
 800e0b6:	e05d      	b.n	800e174 <USBH_Process+0x4c0>
        phost->gState = HOST_ABORT_STATE;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	220d      	movs	r2, #13
 800e0bc:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800e0be:	4834      	ldr	r0, [pc, #208]	@ (800e190 <USBH_Process+0x4dc>)
 800e0c0:	f002 f83c 	bl	801013c <iprintf>
 800e0c4:	4834      	ldr	r0, [pc, #208]	@ (800e198 <USBH_Process+0x4e4>)
 800e0c6:	f002 f839 	bl	801013c <iprintf>
 800e0ca:	200a      	movs	r0, #10
 800e0cc:	f002 f848 	bl	8010160 <putchar>
      break;
 800e0d0:	e050      	b.n	800e174 <USBH_Process+0x4c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d04d      	beq.n	800e178 <USBH_Process+0x4c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800e0e2:	695b      	ldr	r3, [r3, #20]
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	4798      	blx	r3
      }
      break;
 800e0e8:	e046      	b.n	800e178 <USBH_Process+0x4c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	f883 2621 	strb.w	r2, [r3, #1569]	@ 0x621

      (void)DeInitStateMachine(phost);
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f7ff fca0 	bl	800da38 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d009      	beq.n	800e116 <USBH_Process+0x462>
      {
        phost->pActiveClass->DeInit(phost);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800e108:	68db      	ldr	r3, [r3, #12]
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2200      	movs	r2, #0
 800e112:	f8c3 2818 	str.w	r2, [r3, #2072]	@ 0x818
      }

      if (phost->pUser != NULL)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d005      	beq.n	800e12c <USBH_Process+0x478>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 800e126:	2105      	movs	r1, #5
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800e12c:	481b      	ldr	r0, [pc, #108]	@ (800e19c <USBH_Process+0x4e8>)
 800e12e:	f002 f805 	bl	801013c <iprintf>
 800e132:	200a      	movs	r0, #10
 800e134:	f002 f814 	bl	8010160 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f893 3622 	ldrb.w	r3, [r3, #1570]	@ 0x622
 800e13e:	b2db      	uxtb	r3, r3
 800e140:	2b01      	cmp	r3, #1
 800e142:	d107      	bne.n	800e154 <USBH_Process+0x4a0>
      {
        phost->device.is_ReEnumerated = 0U;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2200      	movs	r2, #0
 800e148:	f883 2622 	strb.w	r2, [r3, #1570]	@ 0x622

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f7ff fda0 	bl	800dc92 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800e152:	e012      	b.n	800e17a <USBH_Process+0x4c6>
        (void)USBH_LL_Start(phost);
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f001 fcdb 	bl	800fb10 <USBH_LL_Start>
      break;
 800e15a:	e00e      	b.n	800e17a <USBH_Process+0x4c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800e15c:	bf00      	nop
 800e15e:	e00c      	b.n	800e17a <USBH_Process+0x4c6>
      break;
 800e160:	bf00      	nop
 800e162:	e00a      	b.n	800e17a <USBH_Process+0x4c6>
      break;
 800e164:	bf00      	nop
 800e166:	e008      	b.n	800e17a <USBH_Process+0x4c6>
    break;
 800e168:	bf00      	nop
 800e16a:	e006      	b.n	800e17a <USBH_Process+0x4c6>
      break;
 800e16c:	bf00      	nop
 800e16e:	e004      	b.n	800e17a <USBH_Process+0x4c6>
      break;
 800e170:	bf00      	nop
 800e172:	e002      	b.n	800e17a <USBH_Process+0x4c6>
      break;
 800e174:	bf00      	nop
 800e176:	e000      	b.n	800e17a <USBH_Process+0x4c6>
      break;
 800e178:	bf00      	nop
  }
  return USBH_OK;
 800e17a:	2300      	movs	r3, #0
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3710      	adds	r7, #16
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	08011188 	.word	0x08011188
 800e188:	0801119c 	.word	0x0801119c
 800e18c:	080111bc 	.word	0x080111bc
 800e190:	08010fa4 	.word	0x08010fa4
 800e194:	080111e4 	.word	0x080111e4
 800e198:	0801120c 	.word	0x0801120c
 800e19c:	08011224 	.word	0x08011224

0800e1a0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b088      	sub	sp, #32
 800e1a4:	af04      	add	r7, sp, #16
 800e1a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	785b      	ldrb	r3, [r3, #1]
 800e1b4:	2b07      	cmp	r3, #7
 800e1b6:	f200 827b 	bhi.w	800e6b0 <USBH_HandleEnum+0x510>
 800e1ba:	a201      	add	r2, pc, #4	@ (adr r2, 800e1c0 <USBH_HandleEnum+0x20>)
 800e1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1c0:	0800e1e1 	.word	0x0800e1e1
 800e1c4:	0800e2b9 	.word	0x0800e2b9
 800e1c8:	0800e369 	.word	0x0800e369
 800e1cc:	0800e425 	.word	0x0800e425
 800e1d0:	0800e4ad 	.word	0x0800e4ad
 800e1d4:	0800e55f 	.word	0x0800e55f
 800e1d8:	0800e5d3 	.word	0x0800e5d3
 800e1dc:	0800e645 	.word	0x0800e645
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e1e0:	2108      	movs	r1, #8
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f000 fb1a 	bl	800e81c <USBH_Get_DevDesc>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e1ec:	7bbb      	ldrb	r3, [r7, #14]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d12e      	bne.n	800e250 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f893 262d 	ldrb.w	r2, [r3, #1581]	@ 0x62d
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2201      	movs	r2, #1
 800e200:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	7919      	ldrb	r1, [r3, #4]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f893 061c 	ldrb.w	r0, [r3, #1564]	@ 0x61c
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f893 361d 	ldrb.w	r3, [r3, #1565]	@ 0x61d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e216:	9202      	str	r2, [sp, #8]
 800e218:	2200      	movs	r2, #0
 800e21a:	9201      	str	r2, [sp, #4]
 800e21c:	9300      	str	r3, [sp, #0]
 800e21e:	4603      	mov	r3, r0
 800e220:	2280      	movs	r2, #128	@ 0x80
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f001 f9dd 	bl	800f5e2 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	7959      	ldrb	r1, [r3, #5]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f893 061c 	ldrb.w	r0, [r3, #1564]	@ 0x61c
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f893 361d 	ldrb.w	r3, [r3, #1565]	@ 0x61d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e23c:	9202      	str	r2, [sp, #8]
 800e23e:	2200      	movs	r2, #0
 800e240:	9201      	str	r2, [sp, #4]
 800e242:	9300      	str	r3, [sp, #0]
 800e244:	4603      	mov	r3, r0
 800e246:	2200      	movs	r2, #0
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f001 f9ca 	bl	800f5e2 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e24e:	e231      	b.n	800e6b4 <USBH_HandleEnum+0x514>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e250:	7bbb      	ldrb	r3, [r7, #14]
 800e252:	2b03      	cmp	r3, #3
 800e254:	f040 822e 	bne.w	800e6b4 <USBH_HandleEnum+0x514>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800e258:	48ae      	ldr	r0, [pc, #696]	@ (800e514 <USBH_HandleEnum+0x374>)
 800e25a:	f001 ff6f 	bl	801013c <iprintf>
 800e25e:	48ae      	ldr	r0, [pc, #696]	@ (800e518 <USBH_HandleEnum+0x378>)
 800e260:	f001 ff6c 	bl	801013c <iprintf>
 800e264:	200a      	movs	r0, #10
 800e266:	f001 ff7b 	bl	8010160 <putchar>
        phost->device.EnumCnt++;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f893 361e 	ldrb.w	r3, [r3, #1566]	@ 0x61e
 800e270:	3301      	adds	r3, #1
 800e272:	b2da      	uxtb	r2, r3
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f883 261e 	strb.w	r2, [r3, #1566]	@ 0x61e
        if (phost->device.EnumCnt > 3U)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f893 361e 	ldrb.w	r3, [r3, #1566]	@ 0x61e
 800e280:	2b03      	cmp	r3, #3
 800e282:	d909      	bls.n	800e298 <USBH_HandleEnum+0xf8>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800e284:	48a5      	ldr	r0, [pc, #660]	@ (800e51c <USBH_HandleEnum+0x37c>)
 800e286:	f001 ff59 	bl	801013c <iprintf>
 800e28a:	200a      	movs	r0, #10
 800e28c:	f001 ff68 	bl	8010160 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	220d      	movs	r2, #13
 800e294:	701a      	strb	r2, [r3, #0]
      break;
 800e296:	e20d      	b.n	800e6b4 <USBH_HandleEnum+0x514>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	795b      	ldrb	r3, [r3, #5]
 800e29c:	4619      	mov	r1, r3
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f001 f9ef 	bl	800f682 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	791b      	ldrb	r3, [r3, #4]
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f001 f9e9 	bl	800f682 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	701a      	strb	r2, [r3, #0]
      break;
 800e2b6:	e1fd      	b.n	800e6b4 <USBH_HandleEnum+0x514>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e2b8:	2112      	movs	r1, #18
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f000 faae 	bl	800e81c <USBH_Get_DevDesc>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e2c4:	7bbb      	ldrb	r3, [r7, #14]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d117      	bne.n	800e2fa <USBH_HandleEnum+0x15a>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	@ 0x630
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	4893      	ldr	r0, [pc, #588]	@ (800e520 <USBH_HandleEnum+0x380>)
 800e2d4:	f001 ff32 	bl	801013c <iprintf>
 800e2d8:	200a      	movs	r0, #10
 800e2da:	f001 ff41 	bl	8010160 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	@ 0x62e
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	488f      	ldr	r0, [pc, #572]	@ (800e524 <USBH_HandleEnum+0x384>)
 800e2e8:	f001 ff28 	bl	801013c <iprintf>
 800e2ec:	200a      	movs	r0, #10
 800e2ee:	f001 ff37 	bl	8010160 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2202      	movs	r2, #2
 800e2f6:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e2f8:	e1de      	b.n	800e6b8 <USBH_HandleEnum+0x518>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e2fa:	7bbb      	ldrb	r3, [r7, #14]
 800e2fc:	2b03      	cmp	r3, #3
 800e2fe:	f040 81db 	bne.w	800e6b8 <USBH_HandleEnum+0x518>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800e302:	4884      	ldr	r0, [pc, #528]	@ (800e514 <USBH_HandleEnum+0x374>)
 800e304:	f001 ff1a 	bl	801013c <iprintf>
 800e308:	4887      	ldr	r0, [pc, #540]	@ (800e528 <USBH_HandleEnum+0x388>)
 800e30a:	f001 ff17 	bl	801013c <iprintf>
 800e30e:	200a      	movs	r0, #10
 800e310:	f001 ff26 	bl	8010160 <putchar>
        phost->device.EnumCnt++;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f893 361e 	ldrb.w	r3, [r3, #1566]	@ 0x61e
 800e31a:	3301      	adds	r3, #1
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f883 261e 	strb.w	r2, [r3, #1566]	@ 0x61e
        if (phost->device.EnumCnt > 3U)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f893 361e 	ldrb.w	r3, [r3, #1566]	@ 0x61e
 800e32a:	2b03      	cmp	r3, #3
 800e32c:	d909      	bls.n	800e342 <USBH_HandleEnum+0x1a2>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800e32e:	487b      	ldr	r0, [pc, #492]	@ (800e51c <USBH_HandleEnum+0x37c>)
 800e330:	f001 ff04 	bl	801013c <iprintf>
 800e334:	200a      	movs	r0, #10
 800e336:	f001 ff13 	bl	8010160 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	220d      	movs	r2, #13
 800e33e:	701a      	strb	r2, [r3, #0]
      break;
 800e340:	e1ba      	b.n	800e6b8 <USBH_HandleEnum+0x518>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	795b      	ldrb	r3, [r3, #5]
 800e346:	4619      	mov	r1, r3
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f001 f99a 	bl	800f682 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	791b      	ldrb	r3, [r3, #4]
 800e352:	4619      	mov	r1, r3
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f001 f994 	bl	800f682 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2200      	movs	r2, #0
 800e35e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2200      	movs	r2, #0
 800e364:	701a      	strb	r2, [r3, #0]
      break;
 800e366:	e1a7      	b.n	800e6b8 <USBH_HandleEnum+0x518>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e368:	2101      	movs	r1, #1
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 fb3f 	bl	800e9ee <USBH_SetAddress>
 800e370:	4603      	mov	r3, r0
 800e372:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e374:	7bbb      	ldrb	r3, [r7, #14]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d13a      	bne.n	800e3f0 <USBH_HandleEnum+0x250>
      {
        USBH_Delay(2U);
 800e37a:	2002      	movs	r0, #2
 800e37c:	f001 fd26 	bl	800fdcc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2201      	movs	r2, #1
 800e384:	f883 261c 	strb.w	r2, [r3, #1564]	@ 0x61c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f893 361c 	ldrb.w	r3, [r3, #1564]	@ 0x61c
 800e38e:	4619      	mov	r1, r3
 800e390:	4866      	ldr	r0, [pc, #408]	@ (800e52c <USBH_HandleEnum+0x38c>)
 800e392:	f001 fed3 	bl	801013c <iprintf>
 800e396:	200a      	movs	r0, #10
 800e398:	f001 fee2 	bl	8010160 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2203      	movs	r2, #3
 800e3a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	7919      	ldrb	r1, [r3, #4]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f893 061c 	ldrb.w	r0, [r3, #1564]	@ 0x61c
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f893 361d 	ldrb.w	r3, [r3, #1565]	@ 0x61d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e3b6:	9202      	str	r2, [sp, #8]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	9201      	str	r2, [sp, #4]
 800e3bc:	9300      	str	r3, [sp, #0]
 800e3be:	4603      	mov	r3, r0
 800e3c0:	2280      	movs	r2, #128	@ 0x80
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f001 f90d 	bl	800f5e2 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	7959      	ldrb	r1, [r3, #5]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f893 061c 	ldrb.w	r0, [r3, #1564]	@ 0x61c
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f893 361d 	ldrb.w	r3, [r3, #1565]	@ 0x61d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e3d8:	687a      	ldr	r2, [r7, #4]
 800e3da:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e3dc:	9202      	str	r2, [sp, #8]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	9201      	str	r2, [sp, #4]
 800e3e2:	9300      	str	r3, [sp, #0]
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f001 f8fa 	bl	800f5e2 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e3ee:	e165      	b.n	800e6bc <USBH_HandleEnum+0x51c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e3f0:	7bbb      	ldrb	r3, [r7, #14]
 800e3f2:	2b03      	cmp	r3, #3
 800e3f4:	f040 8162 	bne.w	800e6bc <USBH_HandleEnum+0x51c>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800e3f8:	4846      	ldr	r0, [pc, #280]	@ (800e514 <USBH_HandleEnum+0x374>)
 800e3fa:	f001 fe9f 	bl	801013c <iprintf>
 800e3fe:	484c      	ldr	r0, [pc, #304]	@ (800e530 <USBH_HandleEnum+0x390>)
 800e400:	f001 fe9c 	bl	801013c <iprintf>
 800e404:	200a      	movs	r0, #10
 800e406:	f001 feab 	bl	8010160 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800e40a:	4844      	ldr	r0, [pc, #272]	@ (800e51c <USBH_HandleEnum+0x37c>)
 800e40c:	f001 fe96 	bl	801013c <iprintf>
 800e410:	200a      	movs	r0, #10
 800e412:	f001 fea5 	bl	8010160 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	220d      	movs	r2, #13
 800e41a:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2200      	movs	r2, #0
 800e420:	705a      	strb	r2, [r3, #1]
      break;
 800e422:	e14b      	b.n	800e6bc <USBH_HandleEnum+0x51c>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e424:	2109      	movs	r1, #9
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 fa32 	bl	800e890 <USBH_Get_CfgDesc>
 800e42c:	4603      	mov	r3, r0
 800e42e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e430:	7bbb      	ldrb	r3, [r7, #14]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d103      	bne.n	800e43e <USBH_HandleEnum+0x29e>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2204      	movs	r2, #4
 800e43a:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e43c:	e140      	b.n	800e6c0 <USBH_HandleEnum+0x520>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e43e:	7bbb      	ldrb	r3, [r7, #14]
 800e440:	2b03      	cmp	r3, #3
 800e442:	f040 813d 	bne.w	800e6c0 <USBH_HandleEnum+0x520>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800e446:	4833      	ldr	r0, [pc, #204]	@ (800e514 <USBH_HandleEnum+0x374>)
 800e448:	f001 fe78 	bl	801013c <iprintf>
 800e44c:	4839      	ldr	r0, [pc, #228]	@ (800e534 <USBH_HandleEnum+0x394>)
 800e44e:	f001 fe75 	bl	801013c <iprintf>
 800e452:	200a      	movs	r0, #10
 800e454:	f001 fe84 	bl	8010160 <putchar>
        phost->device.EnumCnt++;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f893 361e 	ldrb.w	r3, [r3, #1566]	@ 0x61e
 800e45e:	3301      	adds	r3, #1
 800e460:	b2da      	uxtb	r2, r3
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f883 261e 	strb.w	r2, [r3, #1566]	@ 0x61e
        if (phost->device.EnumCnt > 3U)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f893 361e 	ldrb.w	r3, [r3, #1566]	@ 0x61e
 800e46e:	2b03      	cmp	r3, #3
 800e470:	d909      	bls.n	800e486 <USBH_HandleEnum+0x2e6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800e472:	482a      	ldr	r0, [pc, #168]	@ (800e51c <USBH_HandleEnum+0x37c>)
 800e474:	f001 fe62 	bl	801013c <iprintf>
 800e478:	200a      	movs	r0, #10
 800e47a:	f001 fe71 	bl	8010160 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	220d      	movs	r2, #13
 800e482:	701a      	strb	r2, [r3, #0]
      break;
 800e484:	e11c      	b.n	800e6c0 <USBH_HandleEnum+0x520>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	795b      	ldrb	r3, [r3, #5]
 800e48a:	4619      	mov	r1, r3
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f001 f8f8 	bl	800f682 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	791b      	ldrb	r3, [r3, #4]
 800e496:	4619      	mov	r1, r3
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f001 f8f2 	bl	800f682 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	701a      	strb	r2, [r3, #0]
      break;
 800e4aa:	e109      	b.n	800e6c0 <USBH_HandleEnum+0x520>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f000 f9eb 	bl	800e890 <USBH_Get_CfgDesc>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e4be:	7bbb      	ldrb	r3, [r7, #14]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d103      	bne.n	800e4cc <USBH_HandleEnum+0x32c>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2205      	movs	r2, #5
 800e4c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e4ca:	e0fb      	b.n	800e6c4 <USBH_HandleEnum+0x524>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e4cc:	7bbb      	ldrb	r3, [r7, #14]
 800e4ce:	2b03      	cmp	r3, #3
 800e4d0:	f040 80f8 	bne.w	800e6c4 <USBH_HandleEnum+0x524>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800e4d4:	480f      	ldr	r0, [pc, #60]	@ (800e514 <USBH_HandleEnum+0x374>)
 800e4d6:	f001 fe31 	bl	801013c <iprintf>
 800e4da:	4816      	ldr	r0, [pc, #88]	@ (800e534 <USBH_HandleEnum+0x394>)
 800e4dc:	f001 fe2e 	bl	801013c <iprintf>
 800e4e0:	200a      	movs	r0, #10
 800e4e2:	f001 fe3d 	bl	8010160 <putchar>
        phost->device.EnumCnt++;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f893 361e 	ldrb.w	r3, [r3, #1566]	@ 0x61e
 800e4ec:	3301      	adds	r3, #1
 800e4ee:	b2da      	uxtb	r2, r3
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f883 261e 	strb.w	r2, [r3, #1566]	@ 0x61e
        if (phost->device.EnumCnt > 3U)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f893 361e 	ldrb.w	r3, [r3, #1566]	@ 0x61e
 800e4fc:	2b03      	cmp	r3, #3
 800e4fe:	d91b      	bls.n	800e538 <USBH_HandleEnum+0x398>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800e500:	4806      	ldr	r0, [pc, #24]	@ (800e51c <USBH_HandleEnum+0x37c>)
 800e502:	f001 fe1b 	bl	801013c <iprintf>
 800e506:	200a      	movs	r0, #10
 800e508:	f001 fe2a 	bl	8010160 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	220d      	movs	r2, #13
 800e510:	701a      	strb	r2, [r3, #0]
      break;
 800e512:	e0d7      	b.n	800e6c4 <USBH_HandleEnum+0x524>
 800e514:	08010fa4 	.word	0x08010fa4
 800e518:	0801123c 	.word	0x0801123c
 800e51c:	08011270 	.word	0x08011270
 800e520:	080112b0 	.word	0x080112b0
 800e524:	080112bc 	.word	0x080112bc
 800e528:	080112c8 	.word	0x080112c8
 800e52c:	08011304 	.word	0x08011304
 800e530:	0801131c 	.word	0x0801131c
 800e534:	08011350 	.word	0x08011350
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	795b      	ldrb	r3, [r3, #5]
 800e53c:	4619      	mov	r1, r3
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f001 f89f 	bl	800f682 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	791b      	ldrb	r3, [r3, #4]
 800e548:	4619      	mov	r1, r3
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f001 f899 	bl	800f682 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2200      	movs	r2, #0
 800e554:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2200      	movs	r2, #0
 800e55a:	701a      	strb	r2, [r3, #0]
      break;
 800e55c:	e0b2      	b.n	800e6c4 <USBH_HandleEnum+0x524>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f893 3634 	ldrb.w	r3, [r3, #1588]	@ 0x634
 800e564:	2b00      	cmp	r3, #0
 800e566:	d02a      	beq.n	800e5be <USBH_HandleEnum+0x41e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f893 1634 	ldrb.w	r1, [r3, #1588]	@ 0x634
                                        phost->device.Data, 0xFFU);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f203 421c 	addw	r2, r3, #1052	@ 0x41c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e574:	23ff      	movs	r3, #255	@ 0xff
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f000 f9c2 	bl	800e900 <USBH_Get_StringDesc>
 800e57c:	4603      	mov	r3, r0
 800e57e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e580:	7bbb      	ldrb	r3, [r7, #14]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d10d      	bne.n	800e5a2 <USBH_HandleEnum+0x402>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800e58c:	4619      	mov	r1, r3
 800e58e:	4853      	ldr	r0, [pc, #332]	@ (800e6dc <USBH_HandleEnum+0x53c>)
 800e590:	f001 fdd4 	bl	801013c <iprintf>
 800e594:	200a      	movs	r0, #10
 800e596:	f001 fde3 	bl	8010160 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2206      	movs	r2, #6
 800e59e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800e5a0:	e092      	b.n	800e6c8 <USBH_HandleEnum+0x528>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e5a2:	7bbb      	ldrb	r3, [r7, #14]
 800e5a4:	2b03      	cmp	r3, #3
 800e5a6:	f040 808f 	bne.w	800e6c8 <USBH_HandleEnum+0x528>
          USBH_UsrLog("Manufacturer : N/A");
 800e5aa:	484d      	ldr	r0, [pc, #308]	@ (800e6e0 <USBH_HandleEnum+0x540>)
 800e5ac:	f001 fdc6 	bl	801013c <iprintf>
 800e5b0:	200a      	movs	r0, #10
 800e5b2:	f001 fdd5 	bl	8010160 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2206      	movs	r2, #6
 800e5ba:	705a      	strb	r2, [r3, #1]
      break;
 800e5bc:	e084      	b.n	800e6c8 <USBH_HandleEnum+0x528>
        USBH_UsrLog("Manufacturer : N/A");
 800e5be:	4848      	ldr	r0, [pc, #288]	@ (800e6e0 <USBH_HandleEnum+0x540>)
 800e5c0:	f001 fdbc 	bl	801013c <iprintf>
 800e5c4:	200a      	movs	r0, #10
 800e5c6:	f001 fdcb 	bl	8010160 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2206      	movs	r2, #6
 800e5ce:	705a      	strb	r2, [r3, #1]
      break;
 800e5d0:	e07a      	b.n	800e6c8 <USBH_HandleEnum+0x528>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f893 3635 	ldrb.w	r3, [r3, #1589]	@ 0x635
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d029      	beq.n	800e630 <USBH_HandleEnum+0x490>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f893 1635 	ldrb.w	r1, [r3, #1589]	@ 0x635
                                        phost->device.Data, 0xFFU);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f203 421c 	addw	r2, r3, #1052	@ 0x41c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e5e8:	23ff      	movs	r3, #255	@ 0xff
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f000 f988 	bl	800e900 <USBH_Get_StringDesc>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e5f4:	7bbb      	ldrb	r3, [r7, #14]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d10d      	bne.n	800e616 <USBH_HandleEnum+0x476>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800e600:	4619      	mov	r1, r3
 800e602:	4838      	ldr	r0, [pc, #224]	@ (800e6e4 <USBH_HandleEnum+0x544>)
 800e604:	f001 fd9a 	bl	801013c <iprintf>
 800e608:	200a      	movs	r0, #10
 800e60a:	f001 fda9 	bl	8010160 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2207      	movs	r2, #7
 800e612:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800e614:	e05a      	b.n	800e6cc <USBH_HandleEnum+0x52c>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e616:	7bbb      	ldrb	r3, [r7, #14]
 800e618:	2b03      	cmp	r3, #3
 800e61a:	d157      	bne.n	800e6cc <USBH_HandleEnum+0x52c>
          USBH_UsrLog("Product : N/A");
 800e61c:	4832      	ldr	r0, [pc, #200]	@ (800e6e8 <USBH_HandleEnum+0x548>)
 800e61e:	f001 fd8d 	bl	801013c <iprintf>
 800e622:	200a      	movs	r0, #10
 800e624:	f001 fd9c 	bl	8010160 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2207      	movs	r2, #7
 800e62c:	705a      	strb	r2, [r3, #1]
      break;
 800e62e:	e04d      	b.n	800e6cc <USBH_HandleEnum+0x52c>
        USBH_UsrLog("Product : N/A");
 800e630:	482d      	ldr	r0, [pc, #180]	@ (800e6e8 <USBH_HandleEnum+0x548>)
 800e632:	f001 fd83 	bl	801013c <iprintf>
 800e636:	200a      	movs	r0, #10
 800e638:	f001 fd92 	bl	8010160 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2207      	movs	r2, #7
 800e640:	705a      	strb	r2, [r3, #1]
      break;
 800e642:	e043      	b.n	800e6cc <USBH_HandleEnum+0x52c>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f893 3636 	ldrb.w	r3, [r3, #1590]	@ 0x636
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d027      	beq.n	800e69e <USBH_HandleEnum+0x4fe>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f893 1636 	ldrb.w	r1, [r3, #1590]	@ 0x636
                                        phost->device.Data, 0xFFU);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f203 421c 	addw	r2, r3, #1052	@ 0x41c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e65a:	23ff      	movs	r3, #255	@ 0xff
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f000 f94f 	bl	800e900 <USBH_Get_StringDesc>
 800e662:	4603      	mov	r3, r0
 800e664:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e666:	7bbb      	ldrb	r3, [r7, #14]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d10c      	bne.n	800e686 <USBH_HandleEnum+0x4e6>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800e672:	4619      	mov	r1, r3
 800e674:	481d      	ldr	r0, [pc, #116]	@ (800e6ec <USBH_HandleEnum+0x54c>)
 800e676:	f001 fd61 	bl	801013c <iprintf>
 800e67a:	200a      	movs	r0, #10
 800e67c:	f001 fd70 	bl	8010160 <putchar>
          Status = USBH_OK;
 800e680:	2300      	movs	r3, #0
 800e682:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e684:	e024      	b.n	800e6d0 <USBH_HandleEnum+0x530>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e686:	7bbb      	ldrb	r3, [r7, #14]
 800e688:	2b03      	cmp	r3, #3
 800e68a:	d121      	bne.n	800e6d0 <USBH_HandleEnum+0x530>
          USBH_UsrLog("Serial Number : N/A");
 800e68c:	4818      	ldr	r0, [pc, #96]	@ (800e6f0 <USBH_HandleEnum+0x550>)
 800e68e:	f001 fd55 	bl	801013c <iprintf>
 800e692:	200a      	movs	r0, #10
 800e694:	f001 fd64 	bl	8010160 <putchar>
          Status = USBH_OK;
 800e698:	2300      	movs	r3, #0
 800e69a:	73fb      	strb	r3, [r7, #15]
      break;
 800e69c:	e018      	b.n	800e6d0 <USBH_HandleEnum+0x530>
        USBH_UsrLog("Serial Number : N/A");
 800e69e:	4814      	ldr	r0, [pc, #80]	@ (800e6f0 <USBH_HandleEnum+0x550>)
 800e6a0:	f001 fd4c 	bl	801013c <iprintf>
 800e6a4:	200a      	movs	r0, #10
 800e6a6:	f001 fd5b 	bl	8010160 <putchar>
        Status = USBH_OK;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	73fb      	strb	r3, [r7, #15]
      break;
 800e6ae:	e00f      	b.n	800e6d0 <USBH_HandleEnum+0x530>

    default:
      break;
 800e6b0:	bf00      	nop
 800e6b2:	e00e      	b.n	800e6d2 <USBH_HandleEnum+0x532>
      break;
 800e6b4:	bf00      	nop
 800e6b6:	e00c      	b.n	800e6d2 <USBH_HandleEnum+0x532>
      break;
 800e6b8:	bf00      	nop
 800e6ba:	e00a      	b.n	800e6d2 <USBH_HandleEnum+0x532>
      break;
 800e6bc:	bf00      	nop
 800e6be:	e008      	b.n	800e6d2 <USBH_HandleEnum+0x532>
      break;
 800e6c0:	bf00      	nop
 800e6c2:	e006      	b.n	800e6d2 <USBH_HandleEnum+0x532>
      break;
 800e6c4:	bf00      	nop
 800e6c6:	e004      	b.n	800e6d2 <USBH_HandleEnum+0x532>
      break;
 800e6c8:	bf00      	nop
 800e6ca:	e002      	b.n	800e6d2 <USBH_HandleEnum+0x532>
      break;
 800e6cc:	bf00      	nop
 800e6ce:	e000      	b.n	800e6d2 <USBH_HandleEnum+0x532>
      break;
 800e6d0:	bf00      	nop
  }
  return Status;
 800e6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3710      	adds	r7, #16
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	08011394 	.word	0x08011394
 800e6e0:	080113a8 	.word	0x080113a8
 800e6e4:	080113bc 	.word	0x080113bc
 800e6e8:	080113cc 	.word	0x080113cc
 800e6ec:	080113dc 	.word	0x080113dc
 800e6f0:	080113f0 	.word	0x080113f0

0800e6f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	683a      	ldr	r2, [r7, #0]
 800e702:	f8c3 2860 	str.w	r2, [r3, #2144]	@ 0x860
}
 800e706:	bf00      	nop
 800e708:	370c      	adds	r7, #12
 800e70a:	46bd      	mov	sp, r7
 800e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e710:	4770      	bx	lr

0800e712 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e712:	b580      	push	{r7, lr}
 800e714:	b082      	sub	sp, #8
 800e716:	af00      	add	r7, sp, #0
 800e718:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f8d3 3860 	ldr.w	r3, [r3, #2144]	@ 0x860
 800e720:	1c5a      	adds	r2, r3, #1
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8c3 2860 	str.w	r2, [r3, #2144]	@ 0x860
  USBH_HandleSof(phost);
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f000 f804 	bl	800e736 <USBH_HandleSof>
}
 800e72e:	bf00      	nop
 800e730:	3708      	adds	r7, #8
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}

0800e736 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e736:	b580      	push	{r7, lr}
 800e738:	b082      	sub	sp, #8
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	b2db      	uxtb	r3, r3
 800e744:	2b0b      	cmp	r3, #11
 800e746:	d10a      	bne.n	800e75e <USBH_HandleSof+0x28>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d005      	beq.n	800e75e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800e758:	699b      	ldr	r3, [r3, #24]
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	4798      	blx	r3
  }
}
 800e75e:	bf00      	nop
 800e760:	3708      	adds	r7, #8
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}

0800e766 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e766:	b480      	push	{r7}
 800e768:	b083      	sub	sp, #12
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2201      	movs	r2, #1
 800e772:	f883 2623 	strb.w	r2, [r3, #1571]	@ 0x623

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800e776:	bf00      	nop
}
 800e778:	370c      	adds	r7, #12
 800e77a:	46bd      	mov	sp, r7
 800e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e780:	4770      	bx	lr

0800e782 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e782:	b480      	push	{r7}
 800e784:	b083      	sub	sp, #12
 800e786:	af00      	add	r7, sp, #0
 800e788:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2200      	movs	r2, #0
 800e78e:	f883 2623 	strb.w	r2, [r3, #1571]	@ 0x623
  phost->device.is_disconnected = 1U;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2201      	movs	r2, #1
 800e796:	f883 2621 	strb.w	r2, [r3, #1569]	@ 0x621

  return;
 800e79a:	bf00      	nop
}
 800e79c:	370c      	adds	r7, #12
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a4:	4770      	bx	lr

0800e7a6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e7a6:	b480      	push	{r7}
 800e7a8:	b083      	sub	sp, #12
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	f883 2620 	strb.w	r2, [r3, #1568]	@ 0x620
  phost->device.is_disconnected = 0U;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	f883 2621 	strb.w	r2, [r3, #1569]	@ 0x621
  phost->device.is_ReEnumerated = 0U;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	f883 2622 	strb.w	r2, [r3, #1570]	@ 0x622

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800e7c6:	2300      	movs	r3, #0
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	370c      	adds	r7, #12
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d2:	4770      	bx	lr

0800e7d4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b082      	sub	sp, #8
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2201      	movs	r2, #1
 800e7e0:	f883 2621 	strb.w	r2, [r3, #1569]	@ 0x621
  phost->device.is_connected = 0U;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f883 2620 	strb.w	r2, [r3, #1568]	@ 0x620
  phost->device.PortEnabled = 0U;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	f883 2623 	strb.w	r2, [r3, #1571]	@ 0x623

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f001 f9a6 	bl	800fb46 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	791b      	ldrb	r3, [r3, #4]
 800e7fe:	4619      	mov	r1, r3
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 ff3e 	bl	800f682 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	795b      	ldrb	r3, [r3, #5]
 800e80a:	4619      	mov	r1, r3
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f000 ff38 	bl	800f682 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800e812:	2300      	movs	r3, #0
}
 800e814:	4618      	mov	r0, r3
 800e816:	3708      	adds	r7, #8
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}

0800e81c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b086      	sub	sp, #24
 800e820:	af02      	add	r7, sp, #8
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	460b      	mov	r3, r1
 800e826:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800e828:	887b      	ldrh	r3, [r7, #2]
 800e82a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e82e:	d90a      	bls.n	800e846 <USBH_Get_DevDesc+0x2a>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 800e830:	4815      	ldr	r0, [pc, #84]	@ (800e888 <USBH_Get_DevDesc+0x6c>)
 800e832:	f001 fc83 	bl	801013c <iprintf>
 800e836:	4815      	ldr	r0, [pc, #84]	@ (800e88c <USBH_Get_DevDesc+0x70>)
 800e838:	f001 fc80 	bl	801013c <iprintf>
 800e83c:	200a      	movs	r0, #10
 800e83e:	f001 fc8f 	bl	8010160 <putchar>
    return USBH_NOT_SUPPORTED;
 800e842:	2303      	movs	r3, #3
 800e844:	e01b      	b.n	800e87e <USBH_Get_DevDesc+0x62>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f203 421c 	addw	r2, r3, #1052	@ 0x41c
  status = USBH_GetDescriptor(phost,
 800e84c:	887b      	ldrh	r3, [r7, #2]
 800e84e:	9300      	str	r3, [sp, #0]
 800e850:	4613      	mov	r3, r2
 800e852:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e856:	2100      	movs	r1, #0
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f000 f893 	bl	800e984 <USBH_GetDescriptor>
 800e85e:	4603      	mov	r3, r0
 800e860:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800e862:	7bfb      	ldrb	r3, [r7, #15]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d109      	bne.n	800e87c <USBH_Get_DevDesc+0x60>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800e86e:	887a      	ldrh	r2, [r7, #2]
 800e870:	4619      	mov	r1, r3
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f000 f94e 	bl	800eb14 <USBH_ParseDevDesc>
 800e878:	4603      	mov	r3, r0
 800e87a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3710      	adds	r7, #16
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
 800e886:	bf00      	nop
 800e888:	08011404 	.word	0x08011404
 800e88c:	0801140c 	.word	0x0801140c

0800e890 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b086      	sub	sp, #24
 800e894:	af02      	add	r7, sp, #8
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	460b      	mov	r3, r1
 800e89a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	331c      	adds	r3, #28
 800e8a0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800e8a2:	887b      	ldrh	r3, [r7, #2]
 800e8a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e8a8:	d90a      	bls.n	800e8c0 <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 800e8aa:	4813      	ldr	r0, [pc, #76]	@ (800e8f8 <USBH_Get_CfgDesc+0x68>)
 800e8ac:	f001 fc46 	bl	801013c <iprintf>
 800e8b0:	4812      	ldr	r0, [pc, #72]	@ (800e8fc <USBH_Get_CfgDesc+0x6c>)
 800e8b2:	f001 fc43 	bl	801013c <iprintf>
 800e8b6:	200a      	movs	r0, #10
 800e8b8:	f001 fc52 	bl	8010160 <putchar>
    return USBH_NOT_SUPPORTED;
 800e8bc:	2303      	movs	r3, #3
 800e8be:	e016      	b.n	800e8ee <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800e8c0:	887b      	ldrh	r3, [r7, #2]
 800e8c2:	9300      	str	r3, [sp, #0]
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e8ca:	2100      	movs	r1, #0
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f000 f859 	bl	800e984 <USBH_GetDescriptor>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800e8d6:	7bfb      	ldrb	r3, [r7, #15]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d107      	bne.n	800e8ec <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800e8dc:	887b      	ldrh	r3, [r7, #2]
 800e8de:	461a      	mov	r2, r3
 800e8e0:	68b9      	ldr	r1, [r7, #8]
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f000 f9c6 	bl	800ec74 <USBH_ParseCfgDesc>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3710      	adds	r7, #16
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	08011404 	.word	0x08011404
 800e8fc:	08011450 	.word	0x08011450

0800e900 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b088      	sub	sp, #32
 800e904:	af02      	add	r7, sp, #8
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	607a      	str	r2, [r7, #4]
 800e90a:	461a      	mov	r2, r3
 800e90c:	460b      	mov	r3, r1
 800e90e:	72fb      	strb	r3, [r7, #11]
 800e910:	4613      	mov	r3, r2
 800e912:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800e914:	893b      	ldrh	r3, [r7, #8]
 800e916:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e91a:	d802      	bhi.n	800e922 <USBH_Get_StringDesc+0x22>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d10a      	bne.n	800e938 <USBH_Get_StringDesc+0x38>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 800e922:	4816      	ldr	r0, [pc, #88]	@ (800e97c <USBH_Get_StringDesc+0x7c>)
 800e924:	f001 fc0a 	bl	801013c <iprintf>
 800e928:	4815      	ldr	r0, [pc, #84]	@ (800e980 <USBH_Get_StringDesc+0x80>)
 800e92a:	f001 fc07 	bl	801013c <iprintf>
 800e92e:	200a      	movs	r0, #10
 800e930:	f001 fc16 	bl	8010160 <putchar>
    return USBH_NOT_SUPPORTED;
 800e934:	2303      	movs	r3, #3
 800e936:	e01c      	b.n	800e972 <USBH_Get_StringDesc+0x72>
  }

  status = USBH_GetDescriptor(phost,
 800e938:	7afb      	ldrb	r3, [r7, #11]
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800e940:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f203 411c 	addw	r1, r3, #1052	@ 0x41c
  status = USBH_GetDescriptor(phost,
 800e948:	893b      	ldrh	r3, [r7, #8]
 800e94a:	9300      	str	r3, [sp, #0]
 800e94c:	460b      	mov	r3, r1
 800e94e:	2100      	movs	r1, #0
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	f000 f817 	bl	800e984 <USBH_GetDescriptor>
 800e956:	4603      	mov	r3, r0
 800e958:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800e95a:	7dfb      	ldrb	r3, [r7, #23]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d107      	bne.n	800e970 <USBH_Get_StringDesc+0x70>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800e966:	893a      	ldrh	r2, [r7, #8]
 800e968:	6879      	ldr	r1, [r7, #4]
 800e96a:	4618      	mov	r0, r3
 800e96c:	f000 fb95 	bl	800f09a <USBH_ParseStringDesc>
  }

  return status;
 800e970:	7dfb      	ldrb	r3, [r7, #23]
}
 800e972:	4618      	mov	r0, r3
 800e974:	3718      	adds	r7, #24
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop
 800e97c:	08011404 	.word	0x08011404
 800e980:	0801149c 	.word	0x0801149c

0800e984 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	60f8      	str	r0, [r7, #12]
 800e98c:	607b      	str	r3, [r7, #4]
 800e98e:	460b      	mov	r3, r1
 800e990:	72fb      	strb	r3, [r7, #11]
 800e992:	4613      	mov	r3, r2
 800e994:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	789b      	ldrb	r3, [r3, #2]
 800e99a:	2b01      	cmp	r3, #1
 800e99c:	d11c      	bne.n	800e9d8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800e99e:	7afb      	ldrb	r3, [r7, #11]
 800e9a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e9a4:	b2da      	uxtb	r2, r3
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	2206      	movs	r2, #6
 800e9ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	893a      	ldrh	r2, [r7, #8]
 800e9b4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800e9b6:	893b      	ldrh	r3, [r7, #8]
 800e9b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e9bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e9c0:	d104      	bne.n	800e9cc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	f240 4209 	movw	r2, #1033	@ 0x409
 800e9c8:	829a      	strh	r2, [r3, #20]
 800e9ca:	e002      	b.n	800e9d2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	8b3a      	ldrh	r2, [r7, #24]
 800e9d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800e9d8:	8b3b      	ldrh	r3, [r7, #24]
 800e9da:	461a      	mov	r2, r3
 800e9dc:	6879      	ldr	r1, [r7, #4]
 800e9de:	68f8      	ldr	r0, [r7, #12]
 800e9e0:	f000 fba8 	bl	800f134 <USBH_CtlReq>
 800e9e4:	4603      	mov	r3, r0
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3710      	adds	r7, #16
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}

0800e9ee <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b082      	sub	sp, #8
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	789b      	ldrb	r3, [r3, #2]
 800e9fe:	2b01      	cmp	r3, #1
 800ea00:	d10f      	bne.n	800ea22 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2205      	movs	r2, #5
 800ea0c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ea0e:	78fb      	ldrb	r3, [r7, #3]
 800ea10:	b29a      	uxth	r2, r3
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ea22:	2200      	movs	r2, #0
 800ea24:	2100      	movs	r1, #0
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f000 fb84 	bl	800f134 <USBH_CtlReq>
 800ea2c:	4603      	mov	r3, r0
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3708      	adds	r7, #8
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b082      	sub	sp, #8
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
 800ea3e:	460b      	mov	r3, r1
 800ea40:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	789b      	ldrb	r3, [r3, #2]
 800ea46:	2b01      	cmp	r3, #1
 800ea48:	d10e      	bne.n	800ea68 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2209      	movs	r2, #9
 800ea54:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	887a      	ldrh	r2, [r7, #2]
 800ea5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2200      	movs	r2, #0
 800ea66:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ea68:	2200      	movs	r2, #0
 800ea6a:	2100      	movs	r1, #0
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f000 fb61 	bl	800f134 <USBH_CtlReq>
 800ea72:	4603      	mov	r3, r0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3708      	adds	r7, #8
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <USBH_SetInterface>:
  * @param  phost: Host Handle
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num, uint8_t altSetting)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
 800ea84:	460b      	mov	r3, r1
 800ea86:	70fb      	strb	r3, [r7, #3]
 800ea88:	4613      	mov	r3, r2
 800ea8a:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	789b      	ldrb	r3, [r3, #2]
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d110      	bne.n	800eab6 <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2201      	movs	r2, #1
 800ea98:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	220b      	movs	r2, #11
 800ea9e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 800eaa0:	78bb      	ldrb	r3, [r7, #2]
 800eaa2:	b29a      	uxth	r2, r3
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800eaa8:	78fb      	ldrb	r3, [r7, #3]
 800eaaa:	b29a      	uxth	r2, r3
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2200      	movs	r2, #0
 800eab4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800eab6:	2200      	movs	r2, #0
 800eab8:	2100      	movs	r1, #0
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f000 fb3a 	bl	800f134 <USBH_CtlReq>
 800eac0:	4603      	mov	r3, r0
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3708      	adds	r7, #8
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b082      	sub	sp, #8
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
 800ead2:	460b      	mov	r3, r1
 800ead4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	789b      	ldrb	r3, [r3, #2]
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d10f      	bne.n	800eafe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2200      	movs	r2, #0
 800eae2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2203      	movs	r2, #3
 800eae8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800eaea:	78fb      	ldrb	r3, [r7, #3]
 800eaec:	b29a      	uxth	r2, r3
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2200      	movs	r2, #0
 800eafc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800eafe:	2200      	movs	r2, #0
 800eb00:	2100      	movs	r1, #0
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 fb16 	bl	800f134 <USBH_CtlReq>
 800eb08:	4603      	mov	r3, r0
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3708      	adds	r7, #8
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
	...

0800eb14 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b087      	sub	sp, #28
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	4613      	mov	r3, r2
 800eb20:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	f203 6326 	addw	r3, r3, #1574	@ 0x626
 800eb28:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d101      	bne.n	800eb38 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800eb34:	2302      	movs	r3, #2
 800eb36:	e094      	b.n	800ec62 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	781a      	ldrb	r2, [r3, #0]
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	785a      	ldrb	r2, [r3, #1]
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	3302      	adds	r3, #2
 800eb4c:	781b      	ldrb	r3, [r3, #0]
 800eb4e:	461a      	mov	r2, r3
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	3303      	adds	r3, #3
 800eb54:	781b      	ldrb	r3, [r3, #0]
 800eb56:	021b      	lsls	r3, r3, #8
 800eb58:	b29b      	uxth	r3, r3
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	b29a      	uxth	r2, r3
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	791a      	ldrb	r2, [r3, #4]
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	795a      	ldrb	r2, [r3, #5]
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	799a      	ldrb	r2, [r3, #6]
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	79da      	ldrb	r2, [r3, #7]
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f893 361d 	ldrb.w	r3, [r3, #1565]	@ 0x61d
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d004      	beq.n	800eb96 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	f893 361d 	ldrb.w	r3, [r3, #1565]	@ 0x61d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d11b      	bne.n	800ebce <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	79db      	ldrb	r3, [r3, #7]
 800eb9a:	2b20      	cmp	r3, #32
 800eb9c:	dc0f      	bgt.n	800ebbe <USBH_ParseDevDesc+0xaa>
 800eb9e:	2b08      	cmp	r3, #8
 800eba0:	db0f      	blt.n	800ebc2 <USBH_ParseDevDesc+0xae>
 800eba2:	3b08      	subs	r3, #8
 800eba4:	4a32      	ldr	r2, [pc, #200]	@ (800ec70 <USBH_ParseDevDesc+0x15c>)
 800eba6:	fa22 f303 	lsr.w	r3, r2, r3
 800ebaa:	f003 0301 	and.w	r3, r3, #1
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	bf14      	ite	ne
 800ebb2:	2301      	movne	r3, #1
 800ebb4:	2300      	moveq	r3, #0
 800ebb6:	b2db      	uxtb	r3, r3
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d106      	bne.n	800ebca <USBH_ParseDevDesc+0xb6>
 800ebbc:	e001      	b.n	800ebc2 <USBH_ParseDevDesc+0xae>
 800ebbe:	2b40      	cmp	r3, #64	@ 0x40
 800ebc0:	d003      	beq.n	800ebca <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	2208      	movs	r2, #8
 800ebc6:	71da      	strb	r2, [r3, #7]
        break;
 800ebc8:	e000      	b.n	800ebcc <USBH_ParseDevDesc+0xb8>
        break;
 800ebca:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800ebcc:	e00e      	b.n	800ebec <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	f893 361d 	ldrb.w	r3, [r3, #1565]	@ 0x61d
 800ebd4:	2b02      	cmp	r3, #2
 800ebd6:	d107      	bne.n	800ebe8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	79db      	ldrb	r3, [r3, #7]
 800ebdc:	2b08      	cmp	r3, #8
 800ebde:	d005      	beq.n	800ebec <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	2208      	movs	r2, #8
 800ebe4:	71da      	strb	r2, [r3, #7]
 800ebe6:	e001      	b.n	800ebec <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ebe8:	2303      	movs	r3, #3
 800ebea:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800ebec:	88fb      	ldrh	r3, [r7, #6]
 800ebee:	2b08      	cmp	r3, #8
 800ebf0:	d936      	bls.n	800ec60 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	3308      	adds	r3, #8
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	3309      	adds	r3, #9
 800ebfe:	781b      	ldrb	r3, [r3, #0]
 800ec00:	021b      	lsls	r3, r3, #8
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	4313      	orrs	r3, r2
 800ec06:	b29a      	uxth	r2, r3
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	330a      	adds	r3, #10
 800ec10:	781b      	ldrb	r3, [r3, #0]
 800ec12:	461a      	mov	r2, r3
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	330b      	adds	r3, #11
 800ec18:	781b      	ldrb	r3, [r3, #0]
 800ec1a:	021b      	lsls	r3, r3, #8
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	b29a      	uxth	r2, r3
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	330c      	adds	r3, #12
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	330d      	adds	r3, #13
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	021b      	lsls	r3, r3, #8
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	4313      	orrs	r3, r2
 800ec3a:	b29a      	uxth	r2, r3
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	7b9a      	ldrb	r2, [r3, #14]
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	7bda      	ldrb	r2, [r3, #15]
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	7c1a      	ldrb	r2, [r3, #16]
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	7c5a      	ldrb	r2, [r3, #17]
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800ec60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	371c      	adds	r7, #28
 800ec66:	46bd      	mov	sp, r7
 800ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop
 800ec70:	01000101 	.word	0x01000101

0800ec74 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b08c      	sub	sp, #48	@ 0x30
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	60b9      	str	r1, [r7, #8]
 800ec7e:	4613      	mov	r3, r2
 800ec80:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 800ec88:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ec90:	2300      	movs	r3, #0
 800ec92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800ec96:	2300      	movs	r3, #0
 800ec98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d101      	bne.n	800eca6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800eca2:	2302      	movs	r3, #2
 800eca4:	e0de      	b.n	800ee64 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800ecaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	2b09      	cmp	r3, #9
 800ecb0:	d002      	beq.n	800ecb8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ecb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb4:	2209      	movs	r2, #9
 800ecb6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	781a      	ldrb	r2, [r3, #0]
 800ecbc:	6a3b      	ldr	r3, [r7, #32]
 800ecbe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	785a      	ldrb	r2, [r3, #1]
 800ecc4:	6a3b      	ldr	r3, [r7, #32]
 800ecc6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	3302      	adds	r3, #2
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	461a      	mov	r2, r3
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	3303      	adds	r3, #3
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	021b      	lsls	r3, r3, #8
 800ecd8:	b29b      	uxth	r3, r3
 800ecda:	4313      	orrs	r3, r2
 800ecdc:	b29b      	uxth	r3, r3
 800ecde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ece2:	bf28      	it	cs
 800ece4:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 800ece8:	b29a      	uxth	r2, r3
 800ecea:	6a3b      	ldr	r3, [r7, #32]
 800ecec:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	791a      	ldrb	r2, [r3, #4]
 800ecf2:	6a3b      	ldr	r3, [r7, #32]
 800ecf4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	795a      	ldrb	r2, [r3, #5]
 800ecfa:	6a3b      	ldr	r3, [r7, #32]
 800ecfc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	799a      	ldrb	r2, [r3, #6]
 800ed02:	6a3b      	ldr	r3, [r7, #32]
 800ed04:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	79da      	ldrb	r2, [r3, #7]
 800ed0a:	6a3b      	ldr	r3, [r7, #32]
 800ed0c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	7a1a      	ldrb	r2, [r3, #8]
 800ed12:	6a3b      	ldr	r3, [r7, #32]
 800ed14:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ed16:	88fb      	ldrh	r3, [r7, #6]
 800ed18:	2b09      	cmp	r3, #9
 800ed1a:	f240 80a1 	bls.w	800ee60 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800ed1e:	2309      	movs	r3, #9
 800ed20:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ed22:	2300      	movs	r3, #0
 800ed24:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ed26:	e085      	b.n	800ee34 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ed28:	f107 0316 	add.w	r3, r7, #22
 800ed2c:	4619      	mov	r1, r3
 800ed2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed30:	f000 f9e6 	bl	800f100 <USBH_GetNextDesc>
 800ed34:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ed36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed38:	785b      	ldrb	r3, [r3, #1]
 800ed3a:	2b04      	cmp	r3, #4
 800ed3c:	d17a      	bne.n	800ee34 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ed3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	2b09      	cmp	r3, #9
 800ed44:	d002      	beq.n	800ed4c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ed46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed48:	2209      	movs	r2, #9
 800ed4a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ed4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed50:	223a      	movs	r2, #58	@ 0x3a
 800ed52:	fb02 f303 	mul.w	r3, r2, r3
 800ed56:	3308      	adds	r3, #8
 800ed58:	6a3a      	ldr	r2, [r7, #32]
 800ed5a:	4413      	add	r3, r2
 800ed5c:	3302      	adds	r3, #2
 800ed5e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ed60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ed62:	69f8      	ldr	r0, [r7, #28]
 800ed64:	f000 f882 	bl	800ee6c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ed72:	e043      	b.n	800edfc <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ed74:	f107 0316 	add.w	r3, r7, #22
 800ed78:	4619      	mov	r1, r3
 800ed7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed7c:	f000 f9c0 	bl	800f100 <USBH_GetNextDesc>
 800ed80:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ed82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed84:	785b      	ldrb	r3, [r3, #1]
 800ed86:	2b05      	cmp	r3, #5
 800ed88:	d138      	bne.n	800edfc <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800ed8a:	69fb      	ldr	r3, [r7, #28]
 800ed8c:	795b      	ldrb	r3, [r3, #5]
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	d113      	bne.n	800edba <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ed92:	69fb      	ldr	r3, [r7, #28]
 800ed94:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800ed96:	2b02      	cmp	r3, #2
 800ed98:	d003      	beq.n	800eda2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ed9a:	69fb      	ldr	r3, [r7, #28]
 800ed9c:	799b      	ldrb	r3, [r3, #6]
 800ed9e:	2b03      	cmp	r3, #3
 800eda0:	d10b      	bne.n	800edba <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	79db      	ldrb	r3, [r3, #7]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d10b      	bne.n	800edc2 <USBH_ParseCfgDesc+0x14e>
 800edaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	2b09      	cmp	r3, #9
 800edb0:	d007      	beq.n	800edc2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800edb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edb4:	2209      	movs	r2, #9
 800edb6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800edb8:	e003      	b.n	800edc2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800edba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edbc:	2207      	movs	r2, #7
 800edbe:	701a      	strb	r2, [r3, #0]
 800edc0:	e000      	b.n	800edc4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800edc2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800edc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800edc8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800edcc:	3201      	adds	r2, #1
 800edce:	00d2      	lsls	r2, r2, #3
 800edd0:	213a      	movs	r1, #58	@ 0x3a
 800edd2:	fb01 f303 	mul.w	r3, r1, r3
 800edd6:	4413      	add	r3, r2
 800edd8:	3308      	adds	r3, #8
 800edda:	6a3a      	ldr	r2, [r7, #32]
 800eddc:	4413      	add	r3, r2
 800edde:	3304      	adds	r3, #4
 800ede0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ede2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ede4:	69b9      	ldr	r1, [r7, #24]
 800ede6:	68f8      	ldr	r0, [r7, #12]
 800ede8:	f000 f86f 	bl	800eeca <USBH_ParseEPDesc>
 800edec:	4603      	mov	r3, r0
 800edee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800edf2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800edf6:	3301      	adds	r3, #1
 800edf8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800edfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ee00:	2b05      	cmp	r3, #5
 800ee02:	d80a      	bhi.n	800ee1a <USBH_ParseCfgDesc+0x1a6>
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	791b      	ldrb	r3, [r3, #4]
 800ee08:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d204      	bcs.n	800ee1a <USBH_ParseCfgDesc+0x1a6>
 800ee10:	6a3b      	ldr	r3, [r7, #32]
 800ee12:	885a      	ldrh	r2, [r3, #2]
 800ee14:	8afb      	ldrh	r3, [r7, #22]
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d8ac      	bhi.n	800ed74 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ee1a:	69fb      	ldr	r3, [r7, #28]
 800ee1c:	791b      	ldrb	r3, [r3, #4]
 800ee1e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d201      	bcs.n	800ee2a <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800ee26:	2303      	movs	r3, #3
 800ee28:	e01c      	b.n	800ee64 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800ee2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee2e:	3301      	adds	r3, #1
 800ee30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ee34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee38:	2b07      	cmp	r3, #7
 800ee3a:	d805      	bhi.n	800ee48 <USBH_ParseCfgDesc+0x1d4>
 800ee3c:	6a3b      	ldr	r3, [r7, #32]
 800ee3e:	885a      	ldrh	r2, [r3, #2]
 800ee40:	8afb      	ldrh	r3, [r7, #22]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	f63f af70 	bhi.w	800ed28 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ee48:	6a3b      	ldr	r3, [r7, #32]
 800ee4a:	791b      	ldrb	r3, [r3, #4]
 800ee4c:	2b08      	cmp	r3, #8
 800ee4e:	bf28      	it	cs
 800ee50:	2308      	movcs	r3, #8
 800ee52:	b2db      	uxtb	r3, r3
 800ee54:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d201      	bcs.n	800ee60 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800ee5c:	2303      	movs	r3, #3
 800ee5e:	e001      	b.n	800ee64 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800ee60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	3730      	adds	r7, #48	@ 0x30
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}

0800ee6c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b083      	sub	sp, #12
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	781a      	ldrb	r2, [r3, #0]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	785a      	ldrb	r2, [r3, #1]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	789a      	ldrb	r2, [r3, #2]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	78da      	ldrb	r2, [r3, #3]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	791a      	ldrb	r2, [r3, #4]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	795a      	ldrb	r2, [r3, #5]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	799a      	ldrb	r2, [r3, #6]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	79da      	ldrb	r2, [r3, #7]
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	7a1a      	ldrb	r2, [r3, #8]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	721a      	strb	r2, [r3, #8]
}
 800eebe:	bf00      	nop
 800eec0:	370c      	adds	r7, #12
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr

0800eeca <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800eeca:	b480      	push	{r7}
 800eecc:	b087      	sub	sp, #28
 800eece:	af00      	add	r7, sp, #0
 800eed0:	60f8      	str	r0, [r7, #12]
 800eed2:	60b9      	str	r1, [r7, #8]
 800eed4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800eed6:	2300      	movs	r3, #0
 800eed8:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	781a      	ldrb	r2, [r3, #0]
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	785a      	ldrb	r2, [r3, #1]
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	789a      	ldrb	r2, [r3, #2]
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	78da      	ldrb	r2, [r3, #3]
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	3304      	adds	r3, #4
 800eefe:	781b      	ldrb	r3, [r3, #0]
 800ef00:	461a      	mov	r2, r3
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	3305      	adds	r3, #5
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	021b      	lsls	r3, r3, #8
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	4313      	orrs	r3, r2
 800ef0e:	b29a      	uxth	r2, r3
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	799a      	ldrb	r2, [r3, #6]
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	889b      	ldrh	r3, [r3, #4]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d009      	beq.n	800ef38 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ef28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ef2c:	d804      	bhi.n	800ef38 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ef32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef36:	d901      	bls.n	800ef3c <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800ef38:	2303      	movs	r3, #3
 800ef3a:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f893 361d 	ldrb.w	r3, [r3, #1565]	@ 0x61d
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d136      	bne.n	800efb4 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	78db      	ldrb	r3, [r3, #3]
 800ef4a:	f003 0303 	and.w	r3, r3, #3
 800ef4e:	2b02      	cmp	r3, #2
 800ef50:	d108      	bne.n	800ef64 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	889b      	ldrh	r3, [r3, #4]
 800ef56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef5a:	f240 8097 	bls.w	800f08c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ef5e:	2303      	movs	r3, #3
 800ef60:	75fb      	strb	r3, [r7, #23]
 800ef62:	e093      	b.n	800f08c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	78db      	ldrb	r3, [r3, #3]
 800ef68:	f003 0303 	and.w	r3, r3, #3
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d107      	bne.n	800ef80 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	889b      	ldrh	r3, [r3, #4]
 800ef74:	2b40      	cmp	r3, #64	@ 0x40
 800ef76:	f240 8089 	bls.w	800f08c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ef7a:	2303      	movs	r3, #3
 800ef7c:	75fb      	strb	r3, [r7, #23]
 800ef7e:	e085      	b.n	800f08c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	78db      	ldrb	r3, [r3, #3]
 800ef84:	f003 0303 	and.w	r3, r3, #3
 800ef88:	2b01      	cmp	r3, #1
 800ef8a:	d005      	beq.n	800ef98 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	78db      	ldrb	r3, [r3, #3]
 800ef90:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ef94:	2b03      	cmp	r3, #3
 800ef96:	d10a      	bne.n	800efae <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	799b      	ldrb	r3, [r3, #6]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d003      	beq.n	800efa8 <USBH_ParseEPDesc+0xde>
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	799b      	ldrb	r3, [r3, #6]
 800efa4:	2b10      	cmp	r3, #16
 800efa6:	d970      	bls.n	800f08a <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800efa8:	2303      	movs	r3, #3
 800efaa:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800efac:	e06d      	b.n	800f08a <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800efae:	2303      	movs	r3, #3
 800efb0:	75fb      	strb	r3, [r7, #23]
 800efb2:	e06b      	b.n	800f08c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	f893 361d 	ldrb.w	r3, [r3, #1565]	@ 0x61d
 800efba:	2b01      	cmp	r3, #1
 800efbc:	d13c      	bne.n	800f038 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	78db      	ldrb	r3, [r3, #3]
 800efc2:	f003 0303 	and.w	r3, r3, #3
 800efc6:	2b02      	cmp	r3, #2
 800efc8:	d005      	beq.n	800efd6 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	78db      	ldrb	r3, [r3, #3]
 800efce:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d106      	bne.n	800efe4 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800efd6:	68bb      	ldr	r3, [r7, #8]
 800efd8:	889b      	ldrh	r3, [r3, #4]
 800efda:	2b40      	cmp	r3, #64	@ 0x40
 800efdc:	d956      	bls.n	800f08c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800efde:	2303      	movs	r3, #3
 800efe0:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800efe2:	e053      	b.n	800f08c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	78db      	ldrb	r3, [r3, #3]
 800efe8:	f003 0303 	and.w	r3, r3, #3
 800efec:	2b01      	cmp	r3, #1
 800efee:	d10e      	bne.n	800f00e <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	799b      	ldrb	r3, [r3, #6]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d007      	beq.n	800f008 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800effc:	2b10      	cmp	r3, #16
 800effe:	d803      	bhi.n	800f008 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800f004:	2b40      	cmp	r3, #64	@ 0x40
 800f006:	d941      	bls.n	800f08c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800f008:	2303      	movs	r3, #3
 800f00a:	75fb      	strb	r3, [r7, #23]
 800f00c:	e03e      	b.n	800f08c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	78db      	ldrb	r3, [r3, #3]
 800f012:	f003 0303 	and.w	r3, r3, #3
 800f016:	2b03      	cmp	r3, #3
 800f018:	d10b      	bne.n	800f032 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	799b      	ldrb	r3, [r3, #6]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d004      	beq.n	800f02c <USBH_ParseEPDesc+0x162>
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	889b      	ldrh	r3, [r3, #4]
 800f026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f02a:	d32f      	bcc.n	800f08c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800f02c:	2303      	movs	r3, #3
 800f02e:	75fb      	strb	r3, [r7, #23]
 800f030:	e02c      	b.n	800f08c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800f032:	2303      	movs	r3, #3
 800f034:	75fb      	strb	r3, [r7, #23]
 800f036:	e029      	b.n	800f08c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	f893 361d 	ldrb.w	r3, [r3, #1565]	@ 0x61d
 800f03e:	2b02      	cmp	r3, #2
 800f040:	d120      	bne.n	800f084 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	78db      	ldrb	r3, [r3, #3]
 800f046:	f003 0303 	and.w	r3, r3, #3
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d106      	bne.n	800f05c <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	889b      	ldrh	r3, [r3, #4]
 800f052:	2b08      	cmp	r3, #8
 800f054:	d01a      	beq.n	800f08c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800f056:	2303      	movs	r3, #3
 800f058:	75fb      	strb	r3, [r7, #23]
 800f05a:	e017      	b.n	800f08c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	78db      	ldrb	r3, [r3, #3]
 800f060:	f003 0303 	and.w	r3, r3, #3
 800f064:	2b03      	cmp	r3, #3
 800f066:	d10a      	bne.n	800f07e <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	799b      	ldrb	r3, [r3, #6]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d003      	beq.n	800f078 <USBH_ParseEPDesc+0x1ae>
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	889b      	ldrh	r3, [r3, #4]
 800f074:	2b08      	cmp	r3, #8
 800f076:	d909      	bls.n	800f08c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800f078:	2303      	movs	r3, #3
 800f07a:	75fb      	strb	r3, [r7, #23]
 800f07c:	e006      	b.n	800f08c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800f07e:	2303      	movs	r3, #3
 800f080:	75fb      	strb	r3, [r7, #23]
 800f082:	e003      	b.n	800f08c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800f084:	2303      	movs	r3, #3
 800f086:	75fb      	strb	r3, [r7, #23]
 800f088:	e000      	b.n	800f08c <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f08a:	bf00      	nop
  }

  return status;
 800f08c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f08e:	4618      	mov	r0, r3
 800f090:	371c      	adds	r7, #28
 800f092:	46bd      	mov	sp, r7
 800f094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f098:	4770      	bx	lr

0800f09a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f09a:	b480      	push	{r7}
 800f09c:	b087      	sub	sp, #28
 800f09e:	af00      	add	r7, sp, #0
 800f0a0:	60f8      	str	r0, [r7, #12]
 800f0a2:	60b9      	str	r1, [r7, #8]
 800f0a4:	4613      	mov	r3, r2
 800f0a6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	2b03      	cmp	r3, #3
 800f0b0:	d120      	bne.n	800f0f4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	1e9a      	subs	r2, r3, #2
 800f0b8:	88fb      	ldrh	r3, [r7, #6]
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	bf28      	it	cs
 800f0be:	4613      	movcs	r3, r2
 800f0c0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	3302      	adds	r3, #2
 800f0c6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	82fb      	strh	r3, [r7, #22]
 800f0cc:	e00b      	b.n	800f0e6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f0ce:	8afb      	ldrh	r3, [r7, #22]
 800f0d0:	68fa      	ldr	r2, [r7, #12]
 800f0d2:	4413      	add	r3, r2
 800f0d4:	781a      	ldrb	r2, [r3, #0]
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	3301      	adds	r3, #1
 800f0de:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f0e0:	8afb      	ldrh	r3, [r7, #22]
 800f0e2:	3302      	adds	r3, #2
 800f0e4:	82fb      	strh	r3, [r7, #22]
 800f0e6:	8afa      	ldrh	r2, [r7, #22]
 800f0e8:	8abb      	ldrh	r3, [r7, #20]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d3ef      	bcc.n	800f0ce <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	701a      	strb	r2, [r3, #0]
  }
}
 800f0f4:	bf00      	nop
 800f0f6:	371c      	adds	r7, #28
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f100:	b480      	push	{r7}
 800f102:	b085      	sub	sp, #20
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	881b      	ldrh	r3, [r3, #0]
 800f10e:	687a      	ldr	r2, [r7, #4]
 800f110:	7812      	ldrb	r2, [r2, #0]
 800f112:	4413      	add	r3, r2
 800f114:	b29a      	uxth	r2, r3
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	4413      	add	r3, r2
 800f124:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f126:	68fb      	ldr	r3, [r7, #12]
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3714      	adds	r7, #20
 800f12c:	46bd      	mov	sp, r7
 800f12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f132:	4770      	bx	lr

0800f134 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b086      	sub	sp, #24
 800f138:	af00      	add	r7, sp, #0
 800f13a:	60f8      	str	r0, [r7, #12]
 800f13c:	60b9      	str	r1, [r7, #8]
 800f13e:	4613      	mov	r3, r2
 800f140:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f142:	2301      	movs	r3, #1
 800f144:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	789b      	ldrb	r3, [r3, #2]
 800f14a:	2b01      	cmp	r3, #1
 800f14c:	d002      	beq.n	800f154 <USBH_CtlReq+0x20>
 800f14e:	2b02      	cmp	r3, #2
 800f150:	d00f      	beq.n	800f172 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800f152:	e027      	b.n	800f1a4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	68ba      	ldr	r2, [r7, #8]
 800f158:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	88fa      	ldrh	r2, [r7, #6]
 800f15e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2201      	movs	r2, #1
 800f164:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2202      	movs	r2, #2
 800f16a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f16c:	2301      	movs	r3, #1
 800f16e:	75fb      	strb	r3, [r7, #23]
      break;
 800f170:	e018      	b.n	800f1a4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800f172:	68f8      	ldr	r0, [r7, #12]
 800f174:	f000 f81c 	bl	800f1b0 <USBH_HandleControl>
 800f178:	4603      	mov	r3, r0
 800f17a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f17c:	7dfb      	ldrb	r3, [r7, #23]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d002      	beq.n	800f188 <USBH_CtlReq+0x54>
 800f182:	7dfb      	ldrb	r3, [r7, #23]
 800f184:	2b03      	cmp	r3, #3
 800f186:	d106      	bne.n	800f196 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	2201      	movs	r2, #1
 800f18c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	2200      	movs	r2, #0
 800f192:	761a      	strb	r2, [r3, #24]
      break;
 800f194:	e005      	b.n	800f1a2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800f196:	7dfb      	ldrb	r3, [r7, #23]
 800f198:	2b02      	cmp	r3, #2
 800f19a:	d102      	bne.n	800f1a2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2201      	movs	r2, #1
 800f1a0:	709a      	strb	r2, [r3, #2]
      break;
 800f1a2:	bf00      	nop
  }
  return status;
 800f1a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3718      	adds	r7, #24
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
	...

0800f1b0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b086      	sub	sp, #24
 800f1b4:	af02      	add	r7, sp, #8
 800f1b6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	7e1b      	ldrb	r3, [r3, #24]
 800f1c4:	3b01      	subs	r3, #1
 800f1c6:	2b0a      	cmp	r3, #10
 800f1c8:	f200 8160 	bhi.w	800f48c <USBH_HandleControl+0x2dc>
 800f1cc:	a201      	add	r2, pc, #4	@ (adr r2, 800f1d4 <USBH_HandleControl+0x24>)
 800f1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1d2:	bf00      	nop
 800f1d4:	0800f201 	.word	0x0800f201
 800f1d8:	0800f21b 	.word	0x0800f21b
 800f1dc:	0800f285 	.word	0x0800f285
 800f1e0:	0800f2ab 	.word	0x0800f2ab
 800f1e4:	0800f2e5 	.word	0x0800f2e5
 800f1e8:	0800f30f 	.word	0x0800f30f
 800f1ec:	0800f361 	.word	0x0800f361
 800f1f0:	0800f383 	.word	0x0800f383
 800f1f4:	0800f3bf 	.word	0x0800f3bf
 800f1f8:	0800f3e5 	.word	0x0800f3e5
 800f1fc:	0800f423 	.word	0x0800f423
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f103 0110 	add.w	r1, r3, #16
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	795b      	ldrb	r3, [r3, #5]
 800f20a:	461a      	mov	r2, r3
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f000 f951 	bl	800f4b4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	2202      	movs	r2, #2
 800f216:	761a      	strb	r2, [r3, #24]
      break;
 800f218:	e143      	b.n	800f4a2 <USBH_HandleControl+0x2f2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	795b      	ldrb	r3, [r3, #5]
 800f21e:	4619      	mov	r1, r3
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f000 fd6c 	bl	800fcfe <USBH_LL_GetURBState>
 800f226:	4603      	mov	r3, r0
 800f228:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f22a:	7bbb      	ldrb	r3, [r7, #14]
 800f22c:	2b01      	cmp	r3, #1
 800f22e:	d11e      	bne.n	800f26e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	7c1b      	ldrb	r3, [r3, #16]
 800f234:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f238:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	8adb      	ldrh	r3, [r3, #22]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d00a      	beq.n	800f258 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f242:	7b7b      	ldrb	r3, [r7, #13]
 800f244:	2b80      	cmp	r3, #128	@ 0x80
 800f246:	d103      	bne.n	800f250 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2203      	movs	r2, #3
 800f24c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800f24e:	e11f      	b.n	800f490 <USBH_HandleControl+0x2e0>
            phost->Control.state = CTRL_DATA_OUT;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2205      	movs	r2, #5
 800f254:	761a      	strb	r2, [r3, #24]
      break;
 800f256:	e11b      	b.n	800f490 <USBH_HandleControl+0x2e0>
          if (direction == USB_D2H)
 800f258:	7b7b      	ldrb	r3, [r7, #13]
 800f25a:	2b80      	cmp	r3, #128	@ 0x80
 800f25c:	d103      	bne.n	800f266 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2209      	movs	r2, #9
 800f262:	761a      	strb	r2, [r3, #24]
      break;
 800f264:	e114      	b.n	800f490 <USBH_HandleControl+0x2e0>
            phost->Control.state = CTRL_STATUS_IN;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2207      	movs	r2, #7
 800f26a:	761a      	strb	r2, [r3, #24]
      break;
 800f26c:	e110      	b.n	800f490 <USBH_HandleControl+0x2e0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f26e:	7bbb      	ldrb	r3, [r7, #14]
 800f270:	2b04      	cmp	r3, #4
 800f272:	d003      	beq.n	800f27c <USBH_HandleControl+0xcc>
 800f274:	7bbb      	ldrb	r3, [r7, #14]
 800f276:	2b02      	cmp	r3, #2
 800f278:	f040 810a 	bne.w	800f490 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	220b      	movs	r2, #11
 800f280:	761a      	strb	r2, [r3, #24]
      break;
 800f282:	e105      	b.n	800f490 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f8d3 3860 	ldr.w	r3, [r3, #2144]	@ 0x860
 800f28a:	b29a      	uxth	r2, r3
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6899      	ldr	r1, [r3, #8]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	899a      	ldrh	r2, [r3, #12]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	791b      	ldrb	r3, [r3, #4]
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f000 f948 	bl	800f532 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2204      	movs	r2, #4
 800f2a6:	761a      	strb	r2, [r3, #24]
      break;
 800f2a8:	e0fb      	b.n	800f4a2 <USBH_HandleControl+0x2f2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	791b      	ldrb	r3, [r3, #4]
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f000 fd24 	bl	800fcfe <USBH_LL_GetURBState>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f2ba:	7bbb      	ldrb	r3, [r7, #14]
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	d103      	bne.n	800f2c8 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2209      	movs	r2, #9
 800f2c4:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800f2c6:	e0e5      	b.n	800f494 <USBH_HandleControl+0x2e4>
      else if (URB_Status == USBH_URB_STALL)
 800f2c8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ca:	2b05      	cmp	r3, #5
 800f2cc:	d102      	bne.n	800f2d4 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800f2ce:	2303      	movs	r3, #3
 800f2d0:	73fb      	strb	r3, [r7, #15]
      break;
 800f2d2:	e0df      	b.n	800f494 <USBH_HandleControl+0x2e4>
        if (URB_Status == USBH_URB_ERROR)
 800f2d4:	7bbb      	ldrb	r3, [r7, #14]
 800f2d6:	2b04      	cmp	r3, #4
 800f2d8:	f040 80dc 	bne.w	800f494 <USBH_HandleControl+0x2e4>
          phost->Control.state = CTRL_ERROR;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	220b      	movs	r2, #11
 800f2e0:	761a      	strb	r2, [r3, #24]
      break;
 800f2e2:	e0d7      	b.n	800f494 <USBH_HandleControl+0x2e4>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6899      	ldr	r1, [r3, #8]
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	899a      	ldrh	r2, [r3, #12]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	795b      	ldrb	r3, [r3, #5]
 800f2f0:	2001      	movs	r0, #1
 800f2f2:	9000      	str	r0, [sp, #0]
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f000 f8f7 	bl	800f4e8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f8d3 3860 	ldr.w	r3, [r3, #2144]	@ 0x860
 800f300:	b29a      	uxth	r2, r3
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2206      	movs	r2, #6
 800f30a:	761a      	strb	r2, [r3, #24]
      break;
 800f30c:	e0c9      	b.n	800f4a2 <USBH_HandleControl+0x2f2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	795b      	ldrb	r3, [r3, #5]
 800f312:	4619      	mov	r1, r3
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f000 fcf2 	bl	800fcfe <USBH_LL_GetURBState>
 800f31a:	4603      	mov	r3, r0
 800f31c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f31e:	7bbb      	ldrb	r3, [r7, #14]
 800f320:	2b01      	cmp	r3, #1
 800f322:	d103      	bne.n	800f32c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2207      	movs	r2, #7
 800f328:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800f32a:	e0b5      	b.n	800f498 <USBH_HandleControl+0x2e8>
      else if (URB_Status == USBH_URB_STALL)
 800f32c:	7bbb      	ldrb	r3, [r7, #14]
 800f32e:	2b05      	cmp	r3, #5
 800f330:	d105      	bne.n	800f33e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	220c      	movs	r2, #12
 800f336:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f338:	2303      	movs	r3, #3
 800f33a:	73fb      	strb	r3, [r7, #15]
      break;
 800f33c:	e0ac      	b.n	800f498 <USBH_HandleControl+0x2e8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f33e:	7bbb      	ldrb	r3, [r7, #14]
 800f340:	2b02      	cmp	r3, #2
 800f342:	d103      	bne.n	800f34c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2205      	movs	r2, #5
 800f348:	761a      	strb	r2, [r3, #24]
      break;
 800f34a:	e0a5      	b.n	800f498 <USBH_HandleControl+0x2e8>
        if (URB_Status == USBH_URB_ERROR)
 800f34c:	7bbb      	ldrb	r3, [r7, #14]
 800f34e:	2b04      	cmp	r3, #4
 800f350:	f040 80a2 	bne.w	800f498 <USBH_HandleControl+0x2e8>
          phost->Control.state = CTRL_ERROR;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	220b      	movs	r2, #11
 800f358:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f35a:	2302      	movs	r3, #2
 800f35c:	73fb      	strb	r3, [r7, #15]
      break;
 800f35e:	e09b      	b.n	800f498 <USBH_HandleControl+0x2e8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	791b      	ldrb	r3, [r3, #4]
 800f364:	2200      	movs	r2, #0
 800f366:	2100      	movs	r1, #0
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f000 f8e2 	bl	800f532 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f8d3 3860 	ldr.w	r3, [r3, #2144]	@ 0x860
 800f374:	b29a      	uxth	r2, r3
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2208      	movs	r2, #8
 800f37e:	761a      	strb	r2, [r3, #24]

      break;
 800f380:	e08f      	b.n	800f4a2 <USBH_HandleControl+0x2f2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	791b      	ldrb	r3, [r3, #4]
 800f386:	4619      	mov	r1, r3
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f000 fcb8 	bl	800fcfe <USBH_LL_GetURBState>
 800f38e:	4603      	mov	r3, r0
 800f390:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f392:	7bbb      	ldrb	r3, [r7, #14]
 800f394:	2b01      	cmp	r3, #1
 800f396:	d105      	bne.n	800f3a4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	220d      	movs	r2, #13
 800f39c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800f3a2:	e07b      	b.n	800f49c <USBH_HandleControl+0x2ec>
      else if (URB_Status == USBH_URB_ERROR)
 800f3a4:	7bbb      	ldrb	r3, [r7, #14]
 800f3a6:	2b04      	cmp	r3, #4
 800f3a8:	d103      	bne.n	800f3b2 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	220b      	movs	r2, #11
 800f3ae:	761a      	strb	r2, [r3, #24]
      break;
 800f3b0:	e074      	b.n	800f49c <USBH_HandleControl+0x2ec>
        if (URB_Status == USBH_URB_STALL)
 800f3b2:	7bbb      	ldrb	r3, [r7, #14]
 800f3b4:	2b05      	cmp	r3, #5
 800f3b6:	d171      	bne.n	800f49c <USBH_HandleControl+0x2ec>
          status = USBH_NOT_SUPPORTED;
 800f3b8:	2303      	movs	r3, #3
 800f3ba:	73fb      	strb	r3, [r7, #15]
      break;
 800f3bc:	e06e      	b.n	800f49c <USBH_HandleControl+0x2ec>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	795b      	ldrb	r3, [r3, #5]
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	9200      	str	r2, [sp, #0]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	2100      	movs	r1, #0
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f000 f88c 	bl	800f4e8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f8d3 3860 	ldr.w	r3, [r3, #2144]	@ 0x860
 800f3d6:	b29a      	uxth	r2, r3
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	220a      	movs	r2, #10
 800f3e0:	761a      	strb	r2, [r3, #24]
      break;
 800f3e2:	e05e      	b.n	800f4a2 <USBH_HandleControl+0x2f2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	795b      	ldrb	r3, [r3, #5]
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f000 fc87 	bl	800fcfe <USBH_LL_GetURBState>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f3f4:	7bbb      	ldrb	r3, [r7, #14]
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	d105      	bne.n	800f406 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	220d      	movs	r2, #13
 800f402:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800f404:	e04c      	b.n	800f4a0 <USBH_HandleControl+0x2f0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f406:	7bbb      	ldrb	r3, [r7, #14]
 800f408:	2b02      	cmp	r3, #2
 800f40a:	d103      	bne.n	800f414 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2209      	movs	r2, #9
 800f410:	761a      	strb	r2, [r3, #24]
      break;
 800f412:	e045      	b.n	800f4a0 <USBH_HandleControl+0x2f0>
        if (URB_Status == USBH_URB_ERROR)
 800f414:	7bbb      	ldrb	r3, [r7, #14]
 800f416:	2b04      	cmp	r3, #4
 800f418:	d142      	bne.n	800f4a0 <USBH_HandleControl+0x2f0>
          phost->Control.state = CTRL_ERROR;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	220b      	movs	r2, #11
 800f41e:	761a      	strb	r2, [r3, #24]
      break;
 800f420:	e03e      	b.n	800f4a0 <USBH_HandleControl+0x2f0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	7e5b      	ldrb	r3, [r3, #25]
 800f426:	3301      	adds	r3, #1
 800f428:	b2da      	uxtb	r2, r3
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	765a      	strb	r2, [r3, #25]
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	7e5b      	ldrb	r3, [r3, #25]
 800f432:	2b02      	cmp	r3, #2
 800f434:	d806      	bhi.n	800f444 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2201      	movs	r2, #1
 800f43a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2201      	movs	r2, #1
 800f440:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f442:	e02e      	b.n	800f4a2 <USBH_HandleControl+0x2f2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 800f44a:	2106      	movs	r1, #6
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2200      	movs	r2, #0
 800f454:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800f456:	4815      	ldr	r0, [pc, #84]	@ (800f4ac <USBH_HandleControl+0x2fc>)
 800f458:	f000 fe70 	bl	801013c <iprintf>
 800f45c:	4814      	ldr	r0, [pc, #80]	@ (800f4b0 <USBH_HandleControl+0x300>)
 800f45e:	f000 fe6d 	bl	801013c <iprintf>
 800f462:	200a      	movs	r0, #10
 800f464:	f000 fe7c 	bl	8010160 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	795b      	ldrb	r3, [r3, #5]
 800f46c:	4619      	mov	r1, r3
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f000 f907 	bl	800f682 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	791b      	ldrb	r3, [r3, #4]
 800f478:	4619      	mov	r1, r3
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 f901 	bl	800f682 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2200      	movs	r2, #0
 800f484:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f486:	2302      	movs	r3, #2
 800f488:	73fb      	strb	r3, [r7, #15]
      break;
 800f48a:	e00a      	b.n	800f4a2 <USBH_HandleControl+0x2f2>

    default:
      break;
 800f48c:	bf00      	nop
 800f48e:	e008      	b.n	800f4a2 <USBH_HandleControl+0x2f2>
      break;
 800f490:	bf00      	nop
 800f492:	e006      	b.n	800f4a2 <USBH_HandleControl+0x2f2>
      break;
 800f494:	bf00      	nop
 800f496:	e004      	b.n	800f4a2 <USBH_HandleControl+0x2f2>
      break;
 800f498:	bf00      	nop
 800f49a:	e002      	b.n	800f4a2 <USBH_HandleControl+0x2f2>
      break;
 800f49c:	bf00      	nop
 800f49e:	e000      	b.n	800f4a2 <USBH_HandleControl+0x2f2>
      break;
 800f4a0:	bf00      	nop
  }

  return status;
 800f4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3710      	adds	r7, #16
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	08011404 	.word	0x08011404
 800f4b0:	080114e0 	.word	0x080114e0

0800f4b4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b088      	sub	sp, #32
 800f4b8:	af04      	add	r7, sp, #16
 800f4ba:	60f8      	str	r0, [r7, #12]
 800f4bc:	60b9      	str	r1, [r7, #8]
 800f4be:	4613      	mov	r3, r2
 800f4c0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f4c2:	79f9      	ldrb	r1, [r7, #7]
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	9303      	str	r3, [sp, #12]
 800f4c8:	2308      	movs	r3, #8
 800f4ca:	9302      	str	r3, [sp, #8]
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	9301      	str	r3, [sp, #4]
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	9300      	str	r3, [sp, #0]
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	68f8      	ldr	r0, [r7, #12]
 800f4da:	f000 fbdf 	bl	800fc9c <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800f4de:	2300      	movs	r3, #0
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3710      	adds	r7, #16
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b088      	sub	sp, #32
 800f4ec:	af04      	add	r7, sp, #16
 800f4ee:	60f8      	str	r0, [r7, #12]
 800f4f0:	60b9      	str	r1, [r7, #8]
 800f4f2:	4611      	mov	r1, r2
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	460b      	mov	r3, r1
 800f4f8:	80fb      	strh	r3, [r7, #6]
 800f4fa:	4613      	mov	r3, r2
 800f4fc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f893 361d 	ldrb.w	r3, [r3, #1565]	@ 0x61d
 800f504:	2b00      	cmp	r3, #0
 800f506:	d001      	beq.n	800f50c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f508:	2300      	movs	r3, #0
 800f50a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f50c:	7979      	ldrb	r1, [r7, #5]
 800f50e:	7e3b      	ldrb	r3, [r7, #24]
 800f510:	9303      	str	r3, [sp, #12]
 800f512:	88fb      	ldrh	r3, [r7, #6]
 800f514:	9302      	str	r3, [sp, #8]
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	9301      	str	r3, [sp, #4]
 800f51a:	2301      	movs	r3, #1
 800f51c:	9300      	str	r3, [sp, #0]
 800f51e:	2300      	movs	r3, #0
 800f520:	2200      	movs	r2, #0
 800f522:	68f8      	ldr	r0, [r7, #12]
 800f524:	f000 fbba 	bl	800fc9c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f528:	2300      	movs	r3, #0
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	3710      	adds	r7, #16
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}

0800f532 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f532:	b580      	push	{r7, lr}
 800f534:	b088      	sub	sp, #32
 800f536:	af04      	add	r7, sp, #16
 800f538:	60f8      	str	r0, [r7, #12]
 800f53a:	60b9      	str	r1, [r7, #8]
 800f53c:	4611      	mov	r1, r2
 800f53e:	461a      	mov	r2, r3
 800f540:	460b      	mov	r3, r1
 800f542:	80fb      	strh	r3, [r7, #6]
 800f544:	4613      	mov	r3, r2
 800f546:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f548:	7979      	ldrb	r1, [r7, #5]
 800f54a:	2300      	movs	r3, #0
 800f54c:	9303      	str	r3, [sp, #12]
 800f54e:	88fb      	ldrh	r3, [r7, #6]
 800f550:	9302      	str	r3, [sp, #8]
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	9301      	str	r3, [sp, #4]
 800f556:	2301      	movs	r3, #1
 800f558:	9300      	str	r3, [sp, #0]
 800f55a:	2300      	movs	r3, #0
 800f55c:	2201      	movs	r2, #1
 800f55e:	68f8      	ldr	r0, [r7, #12]
 800f560:	f000 fb9c 	bl	800fc9c <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f564:	2300      	movs	r3, #0

}
 800f566:	4618      	mov	r0, r3
 800f568:	3710      	adds	r7, #16
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}

0800f56e <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800f56e:	b580      	push	{r7, lr}
 800f570:	b088      	sub	sp, #32
 800f572:	af04      	add	r7, sp, #16
 800f574:	60f8      	str	r0, [r7, #12]
 800f576:	60b9      	str	r1, [r7, #8]
 800f578:	4611      	mov	r1, r2
 800f57a:	461a      	mov	r2, r3
 800f57c:	460b      	mov	r3, r1
 800f57e:	71fb      	strb	r3, [r7, #7]
 800f580:	4613      	mov	r3, r2
 800f582:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f584:	79fb      	ldrb	r3, [r7, #7]
 800f586:	b29b      	uxth	r3, r3
 800f588:	79b9      	ldrb	r1, [r7, #6]
 800f58a:	2200      	movs	r2, #0
 800f58c:	9203      	str	r2, [sp, #12]
 800f58e:	9302      	str	r3, [sp, #8]
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	9301      	str	r3, [sp, #4]
 800f594:	2301      	movs	r3, #1
 800f596:	9300      	str	r3, [sp, #0]
 800f598:	2303      	movs	r3, #3
 800f59a:	2201      	movs	r2, #1
 800f59c:	68f8      	ldr	r0, [r7, #12]
 800f59e:	f000 fb7d 	bl	800fc9c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800f5a2:	2300      	movs	r3, #0
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3710      	adds	r7, #16
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}

0800f5ac <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b088      	sub	sp, #32
 800f5b0:	af04      	add	r7, sp, #16
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	60b9      	str	r1, [r7, #8]
 800f5b6:	607a      	str	r2, [r7, #4]
 800f5b8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	78f9      	ldrb	r1, [r7, #3]
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	9203      	str	r2, [sp, #12]
 800f5c4:	9302      	str	r3, [sp, #8]
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	9301      	str	r3, [sp, #4]
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	9300      	str	r3, [sp, #0]
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	68f8      	ldr	r0, [r7, #12]
 800f5d4:	f000 fb62 	bl	800fc9c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800f5d8:	2300      	movs	r3, #0
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3710      	adds	r7, #16
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}

0800f5e2 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f5e2:	b580      	push	{r7, lr}
 800f5e4:	b086      	sub	sp, #24
 800f5e6:	af04      	add	r7, sp, #16
 800f5e8:	6078      	str	r0, [r7, #4]
 800f5ea:	4608      	mov	r0, r1
 800f5ec:	4611      	mov	r1, r2
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	70fb      	strb	r3, [r7, #3]
 800f5f4:	460b      	mov	r3, r1
 800f5f6:	70bb      	strb	r3, [r7, #2]
 800f5f8:	4613      	mov	r3, r2
 800f5fa:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f5fc:	7878      	ldrb	r0, [r7, #1]
 800f5fe:	78ba      	ldrb	r2, [r7, #2]
 800f600:	78f9      	ldrb	r1, [r7, #3]
 800f602:	8b3b      	ldrh	r3, [r7, #24]
 800f604:	9302      	str	r3, [sp, #8]
 800f606:	7d3b      	ldrb	r3, [r7, #20]
 800f608:	9301      	str	r3, [sp, #4]
 800f60a:	7c3b      	ldrb	r3, [r7, #16]
 800f60c:	9300      	str	r3, [sp, #0]
 800f60e:	4603      	mov	r3, r0
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f000 faf5 	bl	800fc00 <USBH_LL_OpenPipe>

  return USBH_OK;
 800f616:	2300      	movs	r3, #0
}
 800f618:	4618      	mov	r0, r3
 800f61a:	3708      	adds	r7, #8
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}

0800f620 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b082      	sub	sp, #8
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	460b      	mov	r3, r1
 800f62a:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800f62c:	78fb      	ldrb	r3, [r7, #3]
 800f62e:	4619      	mov	r1, r3
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f000 fb14 	bl	800fc5e <USBH_LL_ClosePipe>

  return USBH_OK;
 800f636:	2300      	movs	r3, #0
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3708      	adds	r7, #8
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b084      	sub	sp, #16
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	460b      	mov	r3, r1
 800f64a:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f000 f836 	bl	800f6be <USBH_GetFreePipe>
 800f652:	4603      	mov	r3, r0
 800f654:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f656:	89fb      	ldrh	r3, [r7, #14]
 800f658:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d00a      	beq.n	800f676 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800f660:	78fb      	ldrb	r3, [r7, #3]
 800f662:	89fa      	ldrh	r2, [r7, #14]
 800f664:	f002 020f 	and.w	r2, r2, #15
 800f668:	f443 4100 	orr.w	r1, r3, #32768	@ 0x8000
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f502 7202 	add.w	r2, r2, #520	@ 0x208
 800f672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 800f676:	89fb      	ldrh	r3, [r7, #14]
 800f678:	b2db      	uxtb	r3, r3
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3710      	adds	r7, #16
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}

0800f682 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f682:	b480      	push	{r7}
 800f684:	b083      	sub	sp, #12
 800f686:	af00      	add	r7, sp, #0
 800f688:	6078      	str	r0, [r7, #4]
 800f68a:	460b      	mov	r3, r1
 800f68c:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800f68e:	78fb      	ldrb	r3, [r7, #3]
 800f690:	2b0f      	cmp	r3, #15
 800f692:	d80d      	bhi.n	800f6b0 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f694:	78fa      	ldrb	r2, [r7, #3]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f502 7202 	add.w	r2, r2, #520	@ 0x208
 800f69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6a0:	78fa      	ldrb	r2, [r7, #3]
 800f6a2:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f502 7202 	add.w	r2, r2, #520	@ 0x208
 800f6ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 800f6b0:	2300      	movs	r3, #0
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	370c      	adds	r7, #12
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr

0800f6be <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f6be:	b480      	push	{r7}
 800f6c0:	b085      	sub	sp, #20
 800f6c2:	af00      	add	r7, sp, #0
 800f6c4:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	73fb      	strb	r3, [r7, #15]
 800f6ce:	e00f      	b.n	800f6f0 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f6d0:	7bfa      	ldrb	r2, [r7, #15]
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f502 7202 	add.w	r2, r2, #520	@ 0x208
 800f6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d102      	bne.n	800f6ea <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f6e4:	7bfb      	ldrb	r3, [r7, #15]
 800f6e6:	b29b      	uxth	r3, r3
 800f6e8:	e007      	b.n	800f6fa <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800f6ea:	7bfb      	ldrb	r3, [r7, #15]
 800f6ec:	3301      	adds	r3, #1
 800f6ee:	73fb      	strb	r3, [r7, #15]
 800f6f0:	7bfb      	ldrb	r3, [r7, #15]
 800f6f2:	2b0f      	cmp	r3, #15
 800f6f4:	d9ec      	bls.n	800f6d0 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f6f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3714      	adds	r7, #20
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr

0800f706 <USBH_Clock_Config>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void USBH_Clock_Config(void)
{
 800f706:	b580      	push	{r7, lr}
 800f708:	b0b0      	sub	sp, #192	@ 0xc0
 800f70a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f70c:	463b      	mov	r3, r7
 800f70e:	22c0      	movs	r2, #192	@ 0xc0
 800f710:	2100      	movs	r1, #0
 800f712:	4618      	mov	r0, r3
 800f714:	f000 fd6f 	bl	80101f6 <memset>

    /* PLL3 for USB Clock */
  PeriphClkInitStruct.PLL3.PLL3M = 24;
 800f718:	2318      	movs	r3, #24
 800f71a:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 336;
 800f71c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800f720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800f722:	2300      	movs	r3, #0
 800f724:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800f726:	2302      	movs	r3, #2
 800f728:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 800f72a:	2302      	movs	r3, #2
 800f72c:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 7;
 800f72e:	2307      	movs	r3, #7
 800f730:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800f732:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f736:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800f738:	2300      	movs	r3, #0
 800f73a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f73c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f740:	f04f 0300 	mov.w	r3, #0
 800f744:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800f748:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800f74c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800f750:	463b      	mov	r3, r7
 800f752:	4618      	mov	r0, r3
 800f754:	f7f9 f9ca 	bl	8008aec <HAL_RCCEx_PeriphCLKConfig>
}
 800f758:	bf00      	nop
 800f75a:	37c0      	adds	r7, #192	@ 0xc0
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}

0800f760 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
	  USBH_Clock_Config();
 800f764:	f7ff ffcf 	bl	800f706 <USBH_Clock_Config>
  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800f768:	2200      	movs	r2, #0
 800f76a:	490e      	ldr	r1, [pc, #56]	@ (800f7a4 <MX_USB_HOST_Init+0x44>)
 800f76c:	480e      	ldr	r0, [pc, #56]	@ (800f7a8 <MX_USB_HOST_Init+0x48>)
 800f76e:	f7fe f91b 	bl	800d9a8 <USBH_Init>
 800f772:	4603      	mov	r3, r0
 800f774:	2b00      	cmp	r3, #0
 800f776:	d001      	beq.n	800f77c <MX_USB_HOST_Init+0x1c>
  {
    Error_Handler();
 800f778:	f7f1 fc21 	bl	8000fbe <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_AUDIO_CLASS) != USBH_OK)
 800f77c:	490b      	ldr	r1, [pc, #44]	@ (800f7ac <MX_USB_HOST_Init+0x4c>)
 800f77e:	480a      	ldr	r0, [pc, #40]	@ (800f7a8 <MX_USB_HOST_Init+0x48>)
 800f780:	f7fe f9cc 	bl	800db1c <USBH_RegisterClass>
 800f784:	4603      	mov	r3, r0
 800f786:	2b00      	cmp	r3, #0
 800f788:	d001      	beq.n	800f78e <MX_USB_HOST_Init+0x2e>
  {
    Error_Handler();
 800f78a:	f7f1 fc18 	bl	8000fbe <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800f78e:	4806      	ldr	r0, [pc, #24]	@ (800f7a8 <MX_USB_HOST_Init+0x48>)
 800f790:	f7fe fa7f 	bl	800dc92 <USBH_Start>
 800f794:	4603      	mov	r3, r0
 800f796:	2b00      	cmp	r3, #0
 800f798:	d001      	beq.n	800f79e <MX_USB_HOST_Init+0x3e>
  {
    Error_Handler();
 800f79a:	f7f1 fc10 	bl	8000fbe <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f79e:	bf00      	nop
 800f7a0:	bd80      	pop	{r7, pc}
 800f7a2:	bf00      	nop
 800f7a4:	0800f7c5 	.word	0x0800f7c5
 800f7a8:	240013ac 	.word	0x240013ac
 800f7ac:	2400004c 	.word	0x2400004c

0800f7b0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800f7b4:	4802      	ldr	r0, [pc, #8]	@ (800f7c0 <MX_USB_HOST_Process+0x10>)
 800f7b6:	f7fe fa7d 	bl	800dcb4 <USBH_Process>
}
 800f7ba:	bf00      	nop
 800f7bc:	bd80      	pop	{r7, pc}
 800f7be:	bf00      	nop
 800f7c0:	240013ac 	.word	0x240013ac

0800f7c4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f7c4:	b480      	push	{r7}
 800f7c6:	b083      	sub	sp, #12
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	460b      	mov	r3, r1
 800f7ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f7d0:	78fb      	ldrb	r3, [r7, #3]
 800f7d2:	3b01      	subs	r3, #1
 800f7d4:	2b05      	cmp	r3, #5
 800f7d6:	d81b      	bhi.n	800f810 <USBH_UserProcess+0x4c>
 800f7d8:	a201      	add	r2, pc, #4	@ (adr r2, 800f7e0 <USBH_UserProcess+0x1c>)
 800f7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7de:	bf00      	nop
 800f7e0:	0800f811 	.word	0x0800f811
 800f7e4:	0800f809 	.word	0x0800f809
 800f7e8:	0800f811 	.word	0x0800f811
 800f7ec:	0800f7f9 	.word	0x0800f7f9
 800f7f0:	0800f801 	.word	0x0800f801
 800f7f4:	0800f811 	.word	0x0800f811
  {
  case HOST_USER_CONNECTION:
    Appli_state = APPLICATION_START;
 800f7f8:	4b09      	ldr	r3, [pc, #36]	@ (800f820 <USBH_UserProcess+0x5c>)
 800f7fa:	2201      	movs	r2, #1
 800f7fc:	701a      	strb	r2, [r3, #0]
    break;
 800f7fe:	e008      	b.n	800f812 <USBH_UserProcess+0x4e>

  case HOST_USER_DISCONNECTION:
    Appli_state = APPLICATION_DISCONNECT;
 800f800:	4b07      	ldr	r3, [pc, #28]	@ (800f820 <USBH_UserProcess+0x5c>)
 800f802:	2203      	movs	r2, #3
 800f804:	701a      	strb	r2, [r3, #0]
    break;
 800f806:	e004      	b.n	800f812 <USBH_UserProcess+0x4e>

  case HOST_USER_CLASS_SELECTED:
    break;

  case HOST_USER_CLASS_ACTIVE:
    Appli_state = APPLICATION_READY;
 800f808:	4b05      	ldr	r3, [pc, #20]	@ (800f820 <USBH_UserProcess+0x5c>)
 800f80a:	2202      	movs	r2, #2
 800f80c:	701a      	strb	r2, [r3, #0]
    break;
 800f80e:	e000      	b.n	800f812 <USBH_UserProcess+0x4e>

  case HOST_USER_UNRECOVERED_ERROR:
    break;

  default:
    break;
 800f810:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f812:	bf00      	nop
 800f814:	370c      	adds	r7, #12
 800f816:	46bd      	mov	sp, r7
 800f818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81c:	4770      	bx	lr
 800f81e:	bf00      	nop
 800f820:	24001c20 	.word	0x24001c20

0800f824 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b090      	sub	sp, #64	@ 0x40
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f82c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f830:	2200      	movs	r2, #0
 800f832:	601a      	str	r2, [r3, #0]
 800f834:	605a      	str	r2, [r3, #4]
 800f836:	609a      	str	r2, [r3, #8]
 800f838:	60da      	str	r2, [r3, #12]
 800f83a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	4a62      	ldr	r2, [pc, #392]	@ (800f9cc <HAL_HCD_MspInit+0x1a8>)
 800f842:	4293      	cmp	r3, r2
 800f844:	f040 80be 	bne.w	800f9c4 <HAL_HCD_MspInit+0x1a0>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

   /* Configure USB HS GPIOs */
    __GPIOA_CLK_ENABLE();
 800f848:	4b61      	ldr	r3, [pc, #388]	@ (800f9d0 <HAL_HCD_MspInit+0x1ac>)
 800f84a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800f84e:	4a60      	ldr	r2, [pc, #384]	@ (800f9d0 <HAL_HCD_MspInit+0x1ac>)
 800f850:	f043 0301 	orr.w	r3, r3, #1
 800f854:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800f858:	4b5d      	ldr	r3, [pc, #372]	@ (800f9d0 <HAL_HCD_MspInit+0x1ac>)
 800f85a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800f85e:	f003 0301 	and.w	r3, r3, #1
 800f862:	61fb      	str	r3, [r7, #28]
 800f864:	69fb      	ldr	r3, [r7, #28]
    __GPIOB_CLK_ENABLE();
 800f866:	4b5a      	ldr	r3, [pc, #360]	@ (800f9d0 <HAL_HCD_MspInit+0x1ac>)
 800f868:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800f86c:	4a58      	ldr	r2, [pc, #352]	@ (800f9d0 <HAL_HCD_MspInit+0x1ac>)
 800f86e:	f043 0302 	orr.w	r3, r3, #2
 800f872:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800f876:	4b56      	ldr	r3, [pc, #344]	@ (800f9d0 <HAL_HCD_MspInit+0x1ac>)
 800f878:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800f87c:	f003 0302 	and.w	r3, r3, #2
 800f880:	61bb      	str	r3, [r7, #24]
 800f882:	69bb      	ldr	r3, [r7, #24]
    __GPIOC_CLK_ENABLE();
 800f884:	4b52      	ldr	r3, [pc, #328]	@ (800f9d0 <HAL_HCD_MspInit+0x1ac>)
 800f886:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800f88a:	4a51      	ldr	r2, [pc, #324]	@ (800f9d0 <HAL_HCD_MspInit+0x1ac>)
 800f88c:	f043 0304 	orr.w	r3, r3, #4
 800f890:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800f894:	4b4e      	ldr	r3, [pc, #312]	@ (800f9d0 <HAL_HCD_MspInit+0x1ac>)
 800f896:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800f89a:	f003 0304 	and.w	r3, r3, #4
 800f89e:	617b      	str	r3, [r7, #20]
 800f8a0:	697b      	ldr	r3, [r7, #20]

    /* CK */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800f8a2:	2320      	movs	r3, #32
 800f8a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8a6:	2302      	movs	r3, #2
 800f8a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f8ae:	2303      	movs	r3, #3
 800f8b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800f8b2:	230a      	movs	r3, #10
 800f8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f8b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f8ba:	4619      	mov	r1, r3
 800f8bc:	4845      	ldr	r0, [pc, #276]	@ (800f9d4 <HAL_HCD_MspInit+0x1b0>)
 800f8be:	f7f4 fec3 	bl	8004648 <HAL_GPIO_Init>

    /* D0 */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800f8c2:	2308      	movs	r3, #8
 800f8c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8c6:	2302      	movs	r3, #2
 800f8c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f8ce:	2303      	movs	r3, #3
 800f8d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800f8d2:	230a      	movs	r3, #10
 800f8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f8d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f8da:	4619      	mov	r1, r3
 800f8dc:	483d      	ldr	r0, [pc, #244]	@ (800f9d4 <HAL_HCD_MspInit+0x1b0>)
 800f8de:	f7f4 feb3 	bl	8004648 <HAL_GPIO_Init>

    /* D1 D2 D3 D4 D5 D6 D7 */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_5 |
 800f8e2:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800f8e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8e8:	2302      	movs	r3, #2
 800f8ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800f8f0:	230a      	movs	r3, #10
 800f8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f8f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	4837      	ldr	r0, [pc, #220]	@ (800f9d8 <HAL_HCD_MspInit+0x1b4>)
 800f8fc:	f7f4 fea4 	bl	8004648 <HAL_GPIO_Init>

    /* STP */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f900:	2301      	movs	r3, #1
 800f902:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f904:	2302      	movs	r3, #2
 800f906:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f908:	2300      	movs	r3, #0
 800f90a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800f90c:	230a      	movs	r3, #10
 800f90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f910:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f914:	4619      	mov	r1, r3
 800f916:	4831      	ldr	r0, [pc, #196]	@ (800f9dc <HAL_HCD_MspInit+0x1b8>)
 800f918:	f7f4 fe96 	bl	8004648 <HAL_GPIO_Init>

    /* NXT */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800f91c:	2308      	movs	r3, #8
 800f91e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f920:	2302      	movs	r3, #2
 800f922:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f924:	2300      	movs	r3, #0
 800f926:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800f928:	230a      	movs	r3, #10
 800f92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f92c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f930:	4619      	mov	r1, r3
 800f932:	482a      	ldr	r0, [pc, #168]	@ (800f9dc <HAL_HCD_MspInit+0x1b8>)
 800f934:	f7f4 fe88 	bl	8004648 <HAL_GPIO_Init>

    /* DIR */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800f938:	2304      	movs	r3, #4
 800f93a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f93c:	2302      	movs	r3, #2
 800f93e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f940:	2300      	movs	r3, #0
 800f942:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800f944:	230a      	movs	r3, #10
 800f946:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f948:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f94c:	4619      	mov	r1, r3
 800f94e:	4823      	ldr	r0, [pc, #140]	@ (800f9dc <HAL_HCD_MspInit+0x1b8>)
 800f950:	f7f4 fe7a 	bl	8004648 <HAL_GPIO_Init>


    /* Enable USB HS Clocks */
    __HAL_RCC_USB1_OTG_HS_ULPI_CLK_ENABLE();
 800f954:	4b1e      	ldr	r3, [pc, #120]	@ (800f9d0 <HAL_HCD_MspInit+0x1ac>)
 800f956:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800f95a:	4a1d      	ldr	r2, [pc, #116]	@ (800f9d0 <HAL_HCD_MspInit+0x1ac>)
 800f95c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f960:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800f964:	4b1a      	ldr	r3, [pc, #104]	@ (800f9d0 <HAL_HCD_MspInit+0x1ac>)
 800f966:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800f96a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f96e:	613b      	str	r3, [r7, #16]
 800f970:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB1_OTG_HS_CLK_ENABLE();
 800f972:	4b17      	ldr	r3, [pc, #92]	@ (800f9d0 <HAL_HCD_MspInit+0x1ac>)
 800f974:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800f978:	4a15      	ldr	r2, [pc, #84]	@ (800f9d0 <HAL_HCD_MspInit+0x1ac>)
 800f97a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800f97e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800f982:	4b13      	ldr	r3, [pc, #76]	@ (800f9d0 <HAL_HCD_MspInit+0x1ac>)
 800f984:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800f988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f98c:	60fb      	str	r3, [r7, #12]
 800f98e:	68fb      	ldr	r3, [r7, #12]

    /* Set USBHS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
 800f990:	2200      	movs	r2, #0
 800f992:	2106      	movs	r1, #6
 800f994:	204d      	movs	r0, #77	@ 0x4d
 800f996:	f7f4 fd76 	bl	8004486 <HAL_NVIC_SetPriority>

    /* Enable USBHS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800f99a:	204d      	movs	r0, #77	@ 0x4d
 800f99c:	f7f4 fd8d 	bl	80044ba <HAL_NVIC_EnableIRQ>

  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
#endif
  /* Configure POWER_SWITCH IO pin */
  BSP_IO_Init_t BSP_IO_InitStruct = {0};
 800f9a0:	f107 0320 	add.w	r3, r7, #32
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	601a      	str	r2, [r3, #0]
 800f9a8:	605a      	str	r2, [r3, #4]
 800f9aa:	609a      	str	r2, [r3, #8]

  BSP_IO_InitStruct.Pin  = OTG_FS_POWER_SWITCH_PIN;
 800f9ac:	2380      	movs	r3, #128	@ 0x80
 800f9ae:	623b      	str	r3, [r7, #32]
  BSP_IO_InitStruct.Pull = IO_NOPULL;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  BSP_IO_InitStruct.Mode = IO_MODE_OUTPUT_PP;
 800f9b4:	2304      	movs	r3, #4
 800f9b6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize the IO */
  BSP_IO_Init(0, &BSP_IO_InitStruct);
 800f9b8:	f107 0320 	add.w	r3, r7, #32
 800f9bc:	4619      	mov	r1, r3
 800f9be:	2000      	movs	r0, #0
 800f9c0:	f7f2 fe5a 	bl	8002678 <BSP_IO_Init>
  }
}
 800f9c4:	bf00      	nop
 800f9c6:	3740      	adds	r7, #64	@ 0x40
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}
 800f9cc:	40040000 	.word	0x40040000
 800f9d0:	58024400 	.word	0x58024400
 800f9d4:	58020000 	.word	0x58020000
 800f9d8:	58020400 	.word	0x58020400
 800f9dc:	58020800 	.word	0x58020800

0800f9e0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b082      	sub	sp, #8
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7fe fe8f 	bl	800e712 <USBH_LL_IncTimer>
}
 800f9f4:	bf00      	nop
 800f9f6:	3708      	adds	r7, #8
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}

0800f9fc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b082      	sub	sp, #8
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fe fecb 	bl	800e7a6 <USBH_LL_Connect>
}
 800fa10:	bf00      	nop
 800fa12:	3708      	adds	r7, #8
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7fe fed4 	bl	800e7d4 <USBH_LL_Disconnect>
}
 800fa2c:	bf00      	nop
 800fa2e:	3708      	adds	r7, #8
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}

0800fa34 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b083      	sub	sp, #12
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	70fb      	strb	r3, [r7, #3]
 800fa40:	4613      	mov	r3, r2
 800fa42:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800fa44:	bf00      	nop
 800fa46:	370c      	adds	r7, #12
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr

0800fa50 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f7fe fe81 	bl	800e766 <USBH_LL_PortEnabled>
}
 800fa64:	bf00      	nop
 800fa66:	3708      	adds	r7, #8
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}

0800fa6c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b082      	sub	sp, #8
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f7fe fe81 	bl	800e782 <USBH_LL_PortDisabled>
}
 800fa80:	bf00      	nop
 800fa82:	3708      	adds	r7, #8
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}

0800fa88 <USBH_LL_Init>:
*         Initialize the Low Level portion of the Host driver.
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef * phost)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
  hhcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
#endif

#ifdef USE_USB_HS
  /* Set the LL driver parameters */
  hhcd_USB_OTG_HS.Instance = USB1_OTG_HS;
 800fa90:	4b1d      	ldr	r3, [pc, #116]	@ (800fb08 <USBH_LL_Init+0x80>)
 800fa92:	4a1e      	ldr	r2, [pc, #120]	@ (800fb0c <USBH_LL_Init+0x84>)
 800fa94:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 11;
 800fa96:	4b1c      	ldr	r3, [pc, #112]	@ (800fb08 <USBH_LL_Init+0x80>)
 800fa98:	220b      	movs	r2, #11
 800fa9a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800fa9c:	4b1a      	ldr	r3, [pc, #104]	@ (800fb08 <USBH_LL_Init+0x80>)
 800fa9e:	2200      	movs	r2, #0
 800faa0:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800faa2:	4b19      	ldr	r3, [pc, #100]	@ (800fb08 <USBH_LL_Init+0x80>)
 800faa4:	2200      	movs	r2, #0
 800faa6:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.phy_itface = HCD_PHY_ULPI;
 800faa8:	4b17      	ldr	r3, [pc, #92]	@ (800fb08 <USBH_LL_Init+0x80>)
 800faaa:	2201      	movs	r2, #1
 800faac:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800faae:	4b16      	ldr	r3, [pc, #88]	@ (800fb08 <USBH_LL_Init+0x80>)
 800fab0:	2200      	movs	r2, #0
 800fab2:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_HIGH;
 800fab4:	4b14      	ldr	r3, [pc, #80]	@ (800fb08 <USBH_LL_Init+0x80>)
 800fab6:	2200      	movs	r2, #0
 800fab8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800faba:	4b13      	ldr	r3, [pc, #76]	@ (800fb08 <USBH_LL_Init+0x80>)
 800fabc:	2200      	movs	r2, #0
 800fabe:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 800fac0:	4b11      	ldr	r3, [pc, #68]	@ (800fb08 <USBH_LL_Init+0x80>)
 800fac2:	2201      	movs	r2, #1
 800fac4:	741a      	strb	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800fac6:	4b10      	ldr	r3, [pc, #64]	@ (800fb08 <USBH_LL_Init+0x80>)
 800fac8:	2200      	movs	r2, #0
 800faca:	731a      	strb	r2, [r3, #12]
#endif                          /* USE_USB_HS */
  /* Link the driver to the stack */
  hhcd_USB_OTG_HS.pData = phost;
 800facc:	4a0e      	ldr	r2, [pc, #56]	@ (800fb08 <USBH_LL_Init+0x80>)
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	4a0c      	ldr	r2, [pc, #48]	@ (800fb08 <USBH_LL_Init+0x80>)
 800fad8:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

  /* Initialize LL Driver */
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800fadc:	480a      	ldr	r0, [pc, #40]	@ (800fb08 <USBH_LL_Init+0x80>)
 800fade:	f7f5 f8a0 	bl	8004c22 <HAL_HCD_Init>
 800fae2:	4603      	mov	r3, r0
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d001      	beq.n	800faec <USBH_LL_Init+0x64>
  {
    Error_Handler( );
 800fae8:	f7f1 fa69 	bl	8000fbe <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800faec:	4806      	ldr	r0, [pc, #24]	@ (800fb08 <USBH_LL_Init+0x80>)
 800faee:	f7f5 fce2 	bl	80054b6 <HAL_HCD_GetCurrentFrame>
 800faf2:	4603      	mov	r3, r0
 800faf4:	4619      	mov	r1, r3
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f7fe fdfc 	bl	800e6f4 <USBH_LL_SetTimer>

  return USBH_OK;
 800fafc:	2300      	movs	r3, #0
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3708      	adds	r7, #8
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}
 800fb06:	bf00      	nop
 800fb08:	24001c24 	.word	0x24001c24
 800fb0c:	40040000 	.word	0x40040000

0800fb10 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b084      	sub	sp, #16
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8d3 386c 	ldr.w	r3, [r3, #2156]	@ 0x86c
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7f5 fc62 	bl	80053f0 <HAL_HCD_Start>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb30:	7bfb      	ldrb	r3, [r7, #15]
 800fb32:	4618      	mov	r0, r3
 800fb34:	f000 f956 	bl	800fde4 <USBH_Get_USB_Status>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3710      	adds	r7, #16
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}

0800fb46 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fb46:	b580      	push	{r7, lr}
 800fb48:	b084      	sub	sp, #16
 800fb4a:	af00      	add	r7, sp, #0
 800fb4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb52:	2300      	movs	r3, #0
 800fb54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f8d3 386c 	ldr.w	r3, [r3, #2156]	@ 0x86c
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7f5 fc6a 	bl	8005436 <HAL_HCD_Stop>
 800fb62:	4603      	mov	r3, r0
 800fb64:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb66:	7bfb      	ldrb	r3, [r7, #15]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f000 f93b 	bl	800fde4 <USBH_Get_USB_Status>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb72:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3710      	adds	r7, #16
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b084      	sub	sp, #16
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800fb84:	2301      	movs	r3, #1
 800fb86:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8d3 386c 	ldr.w	r3, [r3, #2156]	@ 0x86c
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7f5 fc9f 	bl	80054d2 <HAL_HCD_GetCurrentSpeed>
 800fb94:	4603      	mov	r3, r0
 800fb96:	2b02      	cmp	r3, #2
 800fb98:	d00c      	beq.n	800fbb4 <USBH_LL_GetSpeed+0x38>
 800fb9a:	2b02      	cmp	r3, #2
 800fb9c:	d80d      	bhi.n	800fbba <USBH_LL_GetSpeed+0x3e>
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d002      	beq.n	800fba8 <USBH_LL_GetSpeed+0x2c>
 800fba2:	2b01      	cmp	r3, #1
 800fba4:	d003      	beq.n	800fbae <USBH_LL_GetSpeed+0x32>
 800fba6:	e008      	b.n	800fbba <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	73fb      	strb	r3, [r7, #15]
    break;
 800fbac:	e008      	b.n	800fbc0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800fbae:	2301      	movs	r3, #1
 800fbb0:	73fb      	strb	r3, [r7, #15]
    break;
 800fbb2:	e005      	b.n	800fbc0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800fbb4:	2302      	movs	r3, #2
 800fbb6:	73fb      	strb	r3, [r7, #15]
    break;
 800fbb8:	e002      	b.n	800fbc0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800fbba:	2301      	movs	r3, #1
 800fbbc:	73fb      	strb	r3, [r7, #15]
    break;
 800fbbe:	bf00      	nop
  }
  return  speed;
 800fbc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	3710      	adds	r7, #16
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}

0800fbca <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800fbca:	b580      	push	{r7, lr}
 800fbcc:	b084      	sub	sp, #16
 800fbce:	af00      	add	r7, sp, #0
 800fbd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f8d3 386c 	ldr.w	r3, [r3, #2156]	@ 0x86c
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7f5 fc45 	bl	8005470 <HAL_HCD_ResetPort>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fbea:	7bfb      	ldrb	r3, [r7, #15]
 800fbec:	4618      	mov	r0, r3
 800fbee:	f000 f8f9 	bl	800fde4 <USBH_Get_USB_Status>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3710      	adds	r7, #16
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fc00:	b590      	push	{r4, r7, lr}
 800fc02:	b089      	sub	sp, #36	@ 0x24
 800fc04:	af04      	add	r7, sp, #16
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	4608      	mov	r0, r1
 800fc0a:	4611      	mov	r1, r2
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	4603      	mov	r3, r0
 800fc10:	70fb      	strb	r3, [r7, #3]
 800fc12:	460b      	mov	r3, r1
 800fc14:	70bb      	strb	r3, [r7, #2]
 800fc16:	4613      	mov	r3, r2
 800fc18:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f8d3 086c 	ldr.w	r0, [r3, #2156]	@ 0x86c
 800fc28:	787c      	ldrb	r4, [r7, #1]
 800fc2a:	78ba      	ldrb	r2, [r7, #2]
 800fc2c:	78f9      	ldrb	r1, [r7, #3]
 800fc2e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fc30:	9302      	str	r3, [sp, #8]
 800fc32:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fc36:	9301      	str	r3, [sp, #4]
 800fc38:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc3c:	9300      	str	r3, [sp, #0]
 800fc3e:	4623      	mov	r3, r4
 800fc40:	f7f5 f84c 	bl	8004cdc <HAL_HCD_HC_Init>
 800fc44:	4603      	mov	r3, r0
 800fc46:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800fc48:	7bfb      	ldrb	r3, [r7, #15]
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f000 f8ca 	bl	800fde4 <USBH_Get_USB_Status>
 800fc50:	4603      	mov	r3, r0
 800fc52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc54:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc56:	4618      	mov	r0, r3
 800fc58:	3714      	adds	r7, #20
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd90      	pop	{r4, r7, pc}

0800fc5e <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fc5e:	b580      	push	{r7, lr}
 800fc60:	b084      	sub	sp, #16
 800fc62:	af00      	add	r7, sp, #0
 800fc64:	6078      	str	r0, [r7, #4]
 800fc66:	460b      	mov	r3, r1
 800fc68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f8d3 386c 	ldr.w	r3, [r3, #2156]	@ 0x86c
 800fc78:	78fa      	ldrb	r2, [r7, #3]
 800fc7a:	4611      	mov	r1, r2
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f7f5 f8e5 	bl	8004e4c <HAL_HCD_HC_Halt>
 800fc82:	4603      	mov	r3, r0
 800fc84:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fc86:	7bfb      	ldrb	r3, [r7, #15]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f000 f8ab 	bl	800fde4 <USBH_Get_USB_Status>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc92:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3710      	adds	r7, #16
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fc9c:	b590      	push	{r4, r7, lr}
 800fc9e:	b089      	sub	sp, #36	@ 0x24
 800fca0:	af04      	add	r7, sp, #16
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	4608      	mov	r0, r1
 800fca6:	4611      	mov	r1, r2
 800fca8:	461a      	mov	r2, r3
 800fcaa:	4603      	mov	r3, r0
 800fcac:	70fb      	strb	r3, [r7, #3]
 800fcae:	460b      	mov	r3, r1
 800fcb0:	70bb      	strb	r3, [r7, #2]
 800fcb2:	4613      	mov	r3, r2
 800fcb4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f8d3 086c 	ldr.w	r0, [r3, #2156]	@ 0x86c
 800fcc4:	787c      	ldrb	r4, [r7, #1]
 800fcc6:	78ba      	ldrb	r2, [r7, #2]
 800fcc8:	78f9      	ldrb	r1, [r7, #3]
 800fcca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fcce:	9303      	str	r3, [sp, #12]
 800fcd0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fcd2:	9302      	str	r3, [sp, #8]
 800fcd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcd6:	9301      	str	r3, [sp, #4]
 800fcd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fcdc:	9300      	str	r3, [sp, #0]
 800fcde:	4623      	mov	r3, r4
 800fce0:	f7f5 f8d8 	bl	8004e94 <HAL_HCD_HC_SubmitRequest>
 800fce4:	4603      	mov	r3, r0
 800fce6:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800fce8:	7bfb      	ldrb	r3, [r7, #15]
 800fcea:	4618      	mov	r0, r3
 800fcec:	f000 f87a 	bl	800fde4 <USBH_Get_USB_Status>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3714      	adds	r7, #20
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd90      	pop	{r4, r7, pc}

0800fcfe <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fcfe:	b580      	push	{r7, lr}
 800fd00:	b082      	sub	sp, #8
 800fd02:	af00      	add	r7, sp, #0
 800fd04:	6078      	str	r0, [r7, #4]
 800fd06:	460b      	mov	r3, r1
 800fd08:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8d3 386c 	ldr.w	r3, [r3, #2156]	@ 0x86c
 800fd10:	78fa      	ldrb	r2, [r7, #3]
 800fd12:	4611      	mov	r1, r2
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7f5 fbb9 	bl	800548c <HAL_HCD_HC_GetURBState>
 800fd1a:	4603      	mov	r3, r0
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	3708      	adds	r7, #8
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}

0800fd24 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	460b      	mov	r3, r1
 800fd2e:	70fb      	strb	r3, [r7, #3]

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  if (phost->id == HOST_HS)
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f893 3868 	ldrb.w	r3, [r3, #2152]	@ 0x868
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d10d      	bne.n	800fd56 <USBH_LL_DriverVBUS+0x32>
  {
    if (state == TRUE)
 800fd3a:	78fb      	ldrb	r3, [r7, #3]
 800fd3c:	2b01      	cmp	r3, #1
 800fd3e:	d105      	bne.n	800fd4c <USBH_LL_DriverVBUS+0x28>
    {
      /* Drive high Charge pump */
      /* Add IOE driver control */
      /* USER CODE BEGIN DRIVE_HIGH_CHARGE_FOR_HS */
      BSP_IO_WritePin(0, OTG_FS_POWER_SWITCH_PIN, IO_PIN_SET);
 800fd40:	2201      	movs	r2, #1
 800fd42:	2180      	movs	r1, #128	@ 0x80
 800fd44:	2000      	movs	r0, #0
 800fd46:	f7f2 fcf7 	bl	8002738 <BSP_IO_WritePin>
 800fd4a:	e004      	b.n	800fd56 <USBH_LL_DriverVBUS+0x32>
    else
    {
      /* Drive low Charge pump */
      /* Add IOE driver control */
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_HS */
      BSP_IO_WritePin(0, OTG_FS_POWER_SWITCH_PIN, IO_PIN_RESET);
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	2180      	movs	r1, #128	@ 0x80
 800fd50:	2000      	movs	r0, #0
 800fd52:	f7f2 fcf1 	bl	8002738 <BSP_IO_WritePin>
      /* USER CODE END DRIVE_LOW_CHARGE_FOR_HS */
    }
  }
  HAL_Delay(200);
 800fd56:	20c8      	movs	r0, #200	@ 0xc8
 800fd58:	f7f4 fa96 	bl	8004288 <HAL_Delay>
  return USBH_OK;
 800fd5c:	2300      	movs	r3, #0
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3708      	adds	r7, #8
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}

0800fd66 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800fd66:	b480      	push	{r7}
 800fd68:	b085      	sub	sp, #20
 800fd6a:	af00      	add	r7, sp, #0
 800fd6c:	6078      	str	r0, [r7, #4]
 800fd6e:	460b      	mov	r3, r1
 800fd70:	70fb      	strb	r3, [r7, #3]
 800fd72:	4613      	mov	r3, r2
 800fd74:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f8d3 386c 	ldr.w	r3, [r3, #2156]	@ 0x86c
 800fd7c:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800fd7e:	78fa      	ldrb	r2, [r7, #3]
 800fd80:	68f9      	ldr	r1, [r7, #12]
 800fd82:	4613      	mov	r3, r2
 800fd84:	011b      	lsls	r3, r3, #4
 800fd86:	1a9b      	subs	r3, r3, r2
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	440b      	add	r3, r1
 800fd8c:	3317      	adds	r3, #23
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d00a      	beq.n	800fdaa <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800fd94:	78fa      	ldrb	r2, [r7, #3]
 800fd96:	68f9      	ldr	r1, [r7, #12]
 800fd98:	4613      	mov	r3, r2
 800fd9a:	011b      	lsls	r3, r3, #4
 800fd9c:	1a9b      	subs	r3, r3, r2
 800fd9e:	009b      	lsls	r3, r3, #2
 800fda0:	440b      	add	r3, r1
 800fda2:	333c      	adds	r3, #60	@ 0x3c
 800fda4:	78ba      	ldrb	r2, [r7, #2]
 800fda6:	701a      	strb	r2, [r3, #0]
 800fda8:	e009      	b.n	800fdbe <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fdaa:	78fa      	ldrb	r2, [r7, #3]
 800fdac:	68f9      	ldr	r1, [r7, #12]
 800fdae:	4613      	mov	r3, r2
 800fdb0:	011b      	lsls	r3, r3, #4
 800fdb2:	1a9b      	subs	r3, r3, r2
 800fdb4:	009b      	lsls	r3, r3, #2
 800fdb6:	440b      	add	r3, r1
 800fdb8:	333d      	adds	r3, #61	@ 0x3d
 800fdba:	78ba      	ldrb	r2, [r7, #2]
 800fdbc:	701a      	strb	r2, [r3, #0]
  }
  return USBH_OK;
 800fdbe:	2300      	movs	r3, #0
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3714      	adds	r7, #20
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdca:	4770      	bx	lr

0800fdcc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b082      	sub	sp, #8
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f7f4 fa57 	bl	8004288 <HAL_Delay>
}
 800fdda:	bf00      	nop
 800fddc:	3708      	adds	r7, #8
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
	...

0800fde4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fde4:	b480      	push	{r7}
 800fde6:	b085      	sub	sp, #20
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	4603      	mov	r3, r0
 800fdec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fdf2:	79fb      	ldrb	r3, [r7, #7]
 800fdf4:	2b03      	cmp	r3, #3
 800fdf6:	d817      	bhi.n	800fe28 <USBH_Get_USB_Status+0x44>
 800fdf8:	a201      	add	r2, pc, #4	@ (adr r2, 800fe00 <USBH_Get_USB_Status+0x1c>)
 800fdfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdfe:	bf00      	nop
 800fe00:	0800fe11 	.word	0x0800fe11
 800fe04:	0800fe17 	.word	0x0800fe17
 800fe08:	0800fe1d 	.word	0x0800fe1d
 800fe0c:	0800fe23 	.word	0x0800fe23
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fe10:	2300      	movs	r3, #0
 800fe12:	73fb      	strb	r3, [r7, #15]
    break;
 800fe14:	e00b      	b.n	800fe2e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fe16:	2302      	movs	r3, #2
 800fe18:	73fb      	strb	r3, [r7, #15]
    break;
 800fe1a:	e008      	b.n	800fe2e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	73fb      	strb	r3, [r7, #15]
    break;
 800fe20:	e005      	b.n	800fe2e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fe22:	2302      	movs	r3, #2
 800fe24:	73fb      	strb	r3, [r7, #15]
    break;
 800fe26:	e002      	b.n	800fe2e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800fe28:	2302      	movs	r3, #2
 800fe2a:	73fb      	strb	r3, [r7, #15]
    break;
 800fe2c:	bf00      	nop
  }
  return usb_status;
 800fe2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	3714      	adds	r7, #20
 800fe34:	46bd      	mov	sp, r7
 800fe36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3a:	4770      	bx	lr

0800fe3c <malloc>:
 800fe3c:	4b02      	ldr	r3, [pc, #8]	@ (800fe48 <malloc+0xc>)
 800fe3e:	4601      	mov	r1, r0
 800fe40:	6818      	ldr	r0, [r3, #0]
 800fe42:	f000 b82d 	b.w	800fea0 <_malloc_r>
 800fe46:	bf00      	nop
 800fe48:	24000078 	.word	0x24000078

0800fe4c <free>:
 800fe4c:	4b02      	ldr	r3, [pc, #8]	@ (800fe58 <free+0xc>)
 800fe4e:	4601      	mov	r1, r0
 800fe50:	6818      	ldr	r0, [r3, #0]
 800fe52:	f000 ba6b 	b.w	801032c <_free_r>
 800fe56:	bf00      	nop
 800fe58:	24000078 	.word	0x24000078

0800fe5c <sbrk_aligned>:
 800fe5c:	b570      	push	{r4, r5, r6, lr}
 800fe5e:	4e0f      	ldr	r6, [pc, #60]	@ (800fe9c <sbrk_aligned+0x40>)
 800fe60:	460c      	mov	r4, r1
 800fe62:	6831      	ldr	r1, [r6, #0]
 800fe64:	4605      	mov	r5, r0
 800fe66:	b911      	cbnz	r1, 800fe6e <sbrk_aligned+0x12>
 800fe68:	f000 fa02 	bl	8010270 <_sbrk_r>
 800fe6c:	6030      	str	r0, [r6, #0]
 800fe6e:	4621      	mov	r1, r4
 800fe70:	4628      	mov	r0, r5
 800fe72:	f000 f9fd 	bl	8010270 <_sbrk_r>
 800fe76:	1c43      	adds	r3, r0, #1
 800fe78:	d103      	bne.n	800fe82 <sbrk_aligned+0x26>
 800fe7a:	f04f 34ff 	mov.w	r4, #4294967295
 800fe7e:	4620      	mov	r0, r4
 800fe80:	bd70      	pop	{r4, r5, r6, pc}
 800fe82:	1cc4      	adds	r4, r0, #3
 800fe84:	f024 0403 	bic.w	r4, r4, #3
 800fe88:	42a0      	cmp	r0, r4
 800fe8a:	d0f8      	beq.n	800fe7e <sbrk_aligned+0x22>
 800fe8c:	1a21      	subs	r1, r4, r0
 800fe8e:	4628      	mov	r0, r5
 800fe90:	f000 f9ee 	bl	8010270 <_sbrk_r>
 800fe94:	3001      	adds	r0, #1
 800fe96:	d1f2      	bne.n	800fe7e <sbrk_aligned+0x22>
 800fe98:	e7ef      	b.n	800fe7a <sbrk_aligned+0x1e>
 800fe9a:	bf00      	nop
 800fe9c:	24002004 	.word	0x24002004

0800fea0 <_malloc_r>:
 800fea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fea4:	1ccd      	adds	r5, r1, #3
 800fea6:	f025 0503 	bic.w	r5, r5, #3
 800feaa:	3508      	adds	r5, #8
 800feac:	2d0c      	cmp	r5, #12
 800feae:	bf38      	it	cc
 800feb0:	250c      	movcc	r5, #12
 800feb2:	2d00      	cmp	r5, #0
 800feb4:	4606      	mov	r6, r0
 800feb6:	db01      	blt.n	800febc <_malloc_r+0x1c>
 800feb8:	42a9      	cmp	r1, r5
 800feba:	d904      	bls.n	800fec6 <_malloc_r+0x26>
 800febc:	230c      	movs	r3, #12
 800febe:	6033      	str	r3, [r6, #0]
 800fec0:	2000      	movs	r0, #0
 800fec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fec6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ff9c <_malloc_r+0xfc>
 800feca:	f000 f869 	bl	800ffa0 <__malloc_lock>
 800fece:	f8d8 3000 	ldr.w	r3, [r8]
 800fed2:	461c      	mov	r4, r3
 800fed4:	bb44      	cbnz	r4, 800ff28 <_malloc_r+0x88>
 800fed6:	4629      	mov	r1, r5
 800fed8:	4630      	mov	r0, r6
 800feda:	f7ff ffbf 	bl	800fe5c <sbrk_aligned>
 800fede:	1c43      	adds	r3, r0, #1
 800fee0:	4604      	mov	r4, r0
 800fee2:	d158      	bne.n	800ff96 <_malloc_r+0xf6>
 800fee4:	f8d8 4000 	ldr.w	r4, [r8]
 800fee8:	4627      	mov	r7, r4
 800feea:	2f00      	cmp	r7, #0
 800feec:	d143      	bne.n	800ff76 <_malloc_r+0xd6>
 800feee:	2c00      	cmp	r4, #0
 800fef0:	d04b      	beq.n	800ff8a <_malloc_r+0xea>
 800fef2:	6823      	ldr	r3, [r4, #0]
 800fef4:	4639      	mov	r1, r7
 800fef6:	4630      	mov	r0, r6
 800fef8:	eb04 0903 	add.w	r9, r4, r3
 800fefc:	f000 f9b8 	bl	8010270 <_sbrk_r>
 800ff00:	4581      	cmp	r9, r0
 800ff02:	d142      	bne.n	800ff8a <_malloc_r+0xea>
 800ff04:	6821      	ldr	r1, [r4, #0]
 800ff06:	1a6d      	subs	r5, r5, r1
 800ff08:	4629      	mov	r1, r5
 800ff0a:	4630      	mov	r0, r6
 800ff0c:	f7ff ffa6 	bl	800fe5c <sbrk_aligned>
 800ff10:	3001      	adds	r0, #1
 800ff12:	d03a      	beq.n	800ff8a <_malloc_r+0xea>
 800ff14:	6823      	ldr	r3, [r4, #0]
 800ff16:	442b      	add	r3, r5
 800ff18:	6023      	str	r3, [r4, #0]
 800ff1a:	f8d8 3000 	ldr.w	r3, [r8]
 800ff1e:	685a      	ldr	r2, [r3, #4]
 800ff20:	bb62      	cbnz	r2, 800ff7c <_malloc_r+0xdc>
 800ff22:	f8c8 7000 	str.w	r7, [r8]
 800ff26:	e00f      	b.n	800ff48 <_malloc_r+0xa8>
 800ff28:	6822      	ldr	r2, [r4, #0]
 800ff2a:	1b52      	subs	r2, r2, r5
 800ff2c:	d420      	bmi.n	800ff70 <_malloc_r+0xd0>
 800ff2e:	2a0b      	cmp	r2, #11
 800ff30:	d917      	bls.n	800ff62 <_malloc_r+0xc2>
 800ff32:	1961      	adds	r1, r4, r5
 800ff34:	42a3      	cmp	r3, r4
 800ff36:	6025      	str	r5, [r4, #0]
 800ff38:	bf18      	it	ne
 800ff3a:	6059      	strne	r1, [r3, #4]
 800ff3c:	6863      	ldr	r3, [r4, #4]
 800ff3e:	bf08      	it	eq
 800ff40:	f8c8 1000 	streq.w	r1, [r8]
 800ff44:	5162      	str	r2, [r4, r5]
 800ff46:	604b      	str	r3, [r1, #4]
 800ff48:	4630      	mov	r0, r6
 800ff4a:	f000 f82f 	bl	800ffac <__malloc_unlock>
 800ff4e:	f104 000b 	add.w	r0, r4, #11
 800ff52:	1d23      	adds	r3, r4, #4
 800ff54:	f020 0007 	bic.w	r0, r0, #7
 800ff58:	1ac2      	subs	r2, r0, r3
 800ff5a:	bf1c      	itt	ne
 800ff5c:	1a1b      	subne	r3, r3, r0
 800ff5e:	50a3      	strne	r3, [r4, r2]
 800ff60:	e7af      	b.n	800fec2 <_malloc_r+0x22>
 800ff62:	6862      	ldr	r2, [r4, #4]
 800ff64:	42a3      	cmp	r3, r4
 800ff66:	bf0c      	ite	eq
 800ff68:	f8c8 2000 	streq.w	r2, [r8]
 800ff6c:	605a      	strne	r2, [r3, #4]
 800ff6e:	e7eb      	b.n	800ff48 <_malloc_r+0xa8>
 800ff70:	4623      	mov	r3, r4
 800ff72:	6864      	ldr	r4, [r4, #4]
 800ff74:	e7ae      	b.n	800fed4 <_malloc_r+0x34>
 800ff76:	463c      	mov	r4, r7
 800ff78:	687f      	ldr	r7, [r7, #4]
 800ff7a:	e7b6      	b.n	800feea <_malloc_r+0x4a>
 800ff7c:	461a      	mov	r2, r3
 800ff7e:	685b      	ldr	r3, [r3, #4]
 800ff80:	42a3      	cmp	r3, r4
 800ff82:	d1fb      	bne.n	800ff7c <_malloc_r+0xdc>
 800ff84:	2300      	movs	r3, #0
 800ff86:	6053      	str	r3, [r2, #4]
 800ff88:	e7de      	b.n	800ff48 <_malloc_r+0xa8>
 800ff8a:	230c      	movs	r3, #12
 800ff8c:	6033      	str	r3, [r6, #0]
 800ff8e:	4630      	mov	r0, r6
 800ff90:	f000 f80c 	bl	800ffac <__malloc_unlock>
 800ff94:	e794      	b.n	800fec0 <_malloc_r+0x20>
 800ff96:	6005      	str	r5, [r0, #0]
 800ff98:	e7d6      	b.n	800ff48 <_malloc_r+0xa8>
 800ff9a:	bf00      	nop
 800ff9c:	24002008 	.word	0x24002008

0800ffa0 <__malloc_lock>:
 800ffa0:	4801      	ldr	r0, [pc, #4]	@ (800ffa8 <__malloc_lock+0x8>)
 800ffa2:	f000 b9b2 	b.w	801030a <__retarget_lock_acquire_recursive>
 800ffa6:	bf00      	nop
 800ffa8:	2400214c 	.word	0x2400214c

0800ffac <__malloc_unlock>:
 800ffac:	4801      	ldr	r0, [pc, #4]	@ (800ffb4 <__malloc_unlock+0x8>)
 800ffae:	f000 b9ad 	b.w	801030c <__retarget_lock_release_recursive>
 800ffb2:	bf00      	nop
 800ffb4:	2400214c 	.word	0x2400214c

0800ffb8 <std>:
 800ffb8:	2300      	movs	r3, #0
 800ffba:	b510      	push	{r4, lr}
 800ffbc:	4604      	mov	r4, r0
 800ffbe:	e9c0 3300 	strd	r3, r3, [r0]
 800ffc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ffc6:	6083      	str	r3, [r0, #8]
 800ffc8:	8181      	strh	r1, [r0, #12]
 800ffca:	6643      	str	r3, [r0, #100]	@ 0x64
 800ffcc:	81c2      	strh	r2, [r0, #14]
 800ffce:	6183      	str	r3, [r0, #24]
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	2208      	movs	r2, #8
 800ffd4:	305c      	adds	r0, #92	@ 0x5c
 800ffd6:	f000 f90e 	bl	80101f6 <memset>
 800ffda:	4b0d      	ldr	r3, [pc, #52]	@ (8010010 <std+0x58>)
 800ffdc:	6263      	str	r3, [r4, #36]	@ 0x24
 800ffde:	4b0d      	ldr	r3, [pc, #52]	@ (8010014 <std+0x5c>)
 800ffe0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ffe2:	4b0d      	ldr	r3, [pc, #52]	@ (8010018 <std+0x60>)
 800ffe4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ffe6:	4b0d      	ldr	r3, [pc, #52]	@ (801001c <std+0x64>)
 800ffe8:	6323      	str	r3, [r4, #48]	@ 0x30
 800ffea:	4b0d      	ldr	r3, [pc, #52]	@ (8010020 <std+0x68>)
 800ffec:	6224      	str	r4, [r4, #32]
 800ffee:	429c      	cmp	r4, r3
 800fff0:	d006      	beq.n	8010000 <std+0x48>
 800fff2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fff6:	4294      	cmp	r4, r2
 800fff8:	d002      	beq.n	8010000 <std+0x48>
 800fffa:	33d0      	adds	r3, #208	@ 0xd0
 800fffc:	429c      	cmp	r4, r3
 800fffe:	d105      	bne.n	801000c <std+0x54>
 8010000:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010008:	f000 b97e 	b.w	8010308 <__retarget_lock_init_recursive>
 801000c:	bd10      	pop	{r4, pc}
 801000e:	bf00      	nop
 8010010:	08010171 	.word	0x08010171
 8010014:	08010193 	.word	0x08010193
 8010018:	080101cb 	.word	0x080101cb
 801001c:	080101ef 	.word	0x080101ef
 8010020:	2400200c 	.word	0x2400200c

08010024 <stdio_exit_handler>:
 8010024:	4a02      	ldr	r2, [pc, #8]	@ (8010030 <stdio_exit_handler+0xc>)
 8010026:	4903      	ldr	r1, [pc, #12]	@ (8010034 <stdio_exit_handler+0x10>)
 8010028:	4803      	ldr	r0, [pc, #12]	@ (8010038 <stdio_exit_handler+0x14>)
 801002a:	f000 b869 	b.w	8010100 <_fwalk_sglue>
 801002e:	bf00      	nop
 8010030:	2400006c 	.word	0x2400006c
 8010034:	08010a65 	.word	0x08010a65
 8010038:	2400007c 	.word	0x2400007c

0801003c <cleanup_stdio>:
 801003c:	6841      	ldr	r1, [r0, #4]
 801003e:	4b0c      	ldr	r3, [pc, #48]	@ (8010070 <cleanup_stdio+0x34>)
 8010040:	4299      	cmp	r1, r3
 8010042:	b510      	push	{r4, lr}
 8010044:	4604      	mov	r4, r0
 8010046:	d001      	beq.n	801004c <cleanup_stdio+0x10>
 8010048:	f000 fd0c 	bl	8010a64 <_fflush_r>
 801004c:	68a1      	ldr	r1, [r4, #8]
 801004e:	4b09      	ldr	r3, [pc, #36]	@ (8010074 <cleanup_stdio+0x38>)
 8010050:	4299      	cmp	r1, r3
 8010052:	d002      	beq.n	801005a <cleanup_stdio+0x1e>
 8010054:	4620      	mov	r0, r4
 8010056:	f000 fd05 	bl	8010a64 <_fflush_r>
 801005a:	68e1      	ldr	r1, [r4, #12]
 801005c:	4b06      	ldr	r3, [pc, #24]	@ (8010078 <cleanup_stdio+0x3c>)
 801005e:	4299      	cmp	r1, r3
 8010060:	d004      	beq.n	801006c <cleanup_stdio+0x30>
 8010062:	4620      	mov	r0, r4
 8010064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010068:	f000 bcfc 	b.w	8010a64 <_fflush_r>
 801006c:	bd10      	pop	{r4, pc}
 801006e:	bf00      	nop
 8010070:	2400200c 	.word	0x2400200c
 8010074:	24002074 	.word	0x24002074
 8010078:	240020dc 	.word	0x240020dc

0801007c <global_stdio_init.part.0>:
 801007c:	b510      	push	{r4, lr}
 801007e:	4b0b      	ldr	r3, [pc, #44]	@ (80100ac <global_stdio_init.part.0+0x30>)
 8010080:	4c0b      	ldr	r4, [pc, #44]	@ (80100b0 <global_stdio_init.part.0+0x34>)
 8010082:	4a0c      	ldr	r2, [pc, #48]	@ (80100b4 <global_stdio_init.part.0+0x38>)
 8010084:	601a      	str	r2, [r3, #0]
 8010086:	4620      	mov	r0, r4
 8010088:	2200      	movs	r2, #0
 801008a:	2104      	movs	r1, #4
 801008c:	f7ff ff94 	bl	800ffb8 <std>
 8010090:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010094:	2201      	movs	r2, #1
 8010096:	2109      	movs	r1, #9
 8010098:	f7ff ff8e 	bl	800ffb8 <std>
 801009c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80100a0:	2202      	movs	r2, #2
 80100a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100a6:	2112      	movs	r1, #18
 80100a8:	f7ff bf86 	b.w	800ffb8 <std>
 80100ac:	24002144 	.word	0x24002144
 80100b0:	2400200c 	.word	0x2400200c
 80100b4:	08010025 	.word	0x08010025

080100b8 <__sfp_lock_acquire>:
 80100b8:	4801      	ldr	r0, [pc, #4]	@ (80100c0 <__sfp_lock_acquire+0x8>)
 80100ba:	f000 b926 	b.w	801030a <__retarget_lock_acquire_recursive>
 80100be:	bf00      	nop
 80100c0:	2400214d 	.word	0x2400214d

080100c4 <__sfp_lock_release>:
 80100c4:	4801      	ldr	r0, [pc, #4]	@ (80100cc <__sfp_lock_release+0x8>)
 80100c6:	f000 b921 	b.w	801030c <__retarget_lock_release_recursive>
 80100ca:	bf00      	nop
 80100cc:	2400214d 	.word	0x2400214d

080100d0 <__sinit>:
 80100d0:	b510      	push	{r4, lr}
 80100d2:	4604      	mov	r4, r0
 80100d4:	f7ff fff0 	bl	80100b8 <__sfp_lock_acquire>
 80100d8:	6a23      	ldr	r3, [r4, #32]
 80100da:	b11b      	cbz	r3, 80100e4 <__sinit+0x14>
 80100dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100e0:	f7ff bff0 	b.w	80100c4 <__sfp_lock_release>
 80100e4:	4b04      	ldr	r3, [pc, #16]	@ (80100f8 <__sinit+0x28>)
 80100e6:	6223      	str	r3, [r4, #32]
 80100e8:	4b04      	ldr	r3, [pc, #16]	@ (80100fc <__sinit+0x2c>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d1f5      	bne.n	80100dc <__sinit+0xc>
 80100f0:	f7ff ffc4 	bl	801007c <global_stdio_init.part.0>
 80100f4:	e7f2      	b.n	80100dc <__sinit+0xc>
 80100f6:	bf00      	nop
 80100f8:	0801003d 	.word	0x0801003d
 80100fc:	24002144 	.word	0x24002144

08010100 <_fwalk_sglue>:
 8010100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010104:	4607      	mov	r7, r0
 8010106:	4688      	mov	r8, r1
 8010108:	4614      	mov	r4, r2
 801010a:	2600      	movs	r6, #0
 801010c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010110:	f1b9 0901 	subs.w	r9, r9, #1
 8010114:	d505      	bpl.n	8010122 <_fwalk_sglue+0x22>
 8010116:	6824      	ldr	r4, [r4, #0]
 8010118:	2c00      	cmp	r4, #0
 801011a:	d1f7      	bne.n	801010c <_fwalk_sglue+0xc>
 801011c:	4630      	mov	r0, r6
 801011e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010122:	89ab      	ldrh	r3, [r5, #12]
 8010124:	2b01      	cmp	r3, #1
 8010126:	d907      	bls.n	8010138 <_fwalk_sglue+0x38>
 8010128:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801012c:	3301      	adds	r3, #1
 801012e:	d003      	beq.n	8010138 <_fwalk_sglue+0x38>
 8010130:	4629      	mov	r1, r5
 8010132:	4638      	mov	r0, r7
 8010134:	47c0      	blx	r8
 8010136:	4306      	orrs	r6, r0
 8010138:	3568      	adds	r5, #104	@ 0x68
 801013a:	e7e9      	b.n	8010110 <_fwalk_sglue+0x10>

0801013c <iprintf>:
 801013c:	b40f      	push	{r0, r1, r2, r3}
 801013e:	b507      	push	{r0, r1, r2, lr}
 8010140:	4906      	ldr	r1, [pc, #24]	@ (801015c <iprintf+0x20>)
 8010142:	ab04      	add	r3, sp, #16
 8010144:	6808      	ldr	r0, [r1, #0]
 8010146:	f853 2b04 	ldr.w	r2, [r3], #4
 801014a:	6881      	ldr	r1, [r0, #8]
 801014c:	9301      	str	r3, [sp, #4]
 801014e:	f000 f961 	bl	8010414 <_vfiprintf_r>
 8010152:	b003      	add	sp, #12
 8010154:	f85d eb04 	ldr.w	lr, [sp], #4
 8010158:	b004      	add	sp, #16
 801015a:	4770      	bx	lr
 801015c:	24000078 	.word	0x24000078

08010160 <putchar>:
 8010160:	4b02      	ldr	r3, [pc, #8]	@ (801016c <putchar+0xc>)
 8010162:	4601      	mov	r1, r0
 8010164:	6818      	ldr	r0, [r3, #0]
 8010166:	6882      	ldr	r2, [r0, #8]
 8010168:	f000 bca4 	b.w	8010ab4 <_putc_r>
 801016c:	24000078 	.word	0x24000078

08010170 <__sread>:
 8010170:	b510      	push	{r4, lr}
 8010172:	460c      	mov	r4, r1
 8010174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010178:	f000 f868 	bl	801024c <_read_r>
 801017c:	2800      	cmp	r0, #0
 801017e:	bfab      	itete	ge
 8010180:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010182:	89a3      	ldrhlt	r3, [r4, #12]
 8010184:	181b      	addge	r3, r3, r0
 8010186:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801018a:	bfac      	ite	ge
 801018c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801018e:	81a3      	strhlt	r3, [r4, #12]
 8010190:	bd10      	pop	{r4, pc}

08010192 <__swrite>:
 8010192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010196:	461f      	mov	r7, r3
 8010198:	898b      	ldrh	r3, [r1, #12]
 801019a:	05db      	lsls	r3, r3, #23
 801019c:	4605      	mov	r5, r0
 801019e:	460c      	mov	r4, r1
 80101a0:	4616      	mov	r6, r2
 80101a2:	d505      	bpl.n	80101b0 <__swrite+0x1e>
 80101a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101a8:	2302      	movs	r3, #2
 80101aa:	2200      	movs	r2, #0
 80101ac:	f000 f83c 	bl	8010228 <_lseek_r>
 80101b0:	89a3      	ldrh	r3, [r4, #12]
 80101b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80101b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80101ba:	81a3      	strh	r3, [r4, #12]
 80101bc:	4632      	mov	r2, r6
 80101be:	463b      	mov	r3, r7
 80101c0:	4628      	mov	r0, r5
 80101c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101c6:	f000 b863 	b.w	8010290 <_write_r>

080101ca <__sseek>:
 80101ca:	b510      	push	{r4, lr}
 80101cc:	460c      	mov	r4, r1
 80101ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101d2:	f000 f829 	bl	8010228 <_lseek_r>
 80101d6:	1c43      	adds	r3, r0, #1
 80101d8:	89a3      	ldrh	r3, [r4, #12]
 80101da:	bf15      	itete	ne
 80101dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80101de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80101e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80101e6:	81a3      	strheq	r3, [r4, #12]
 80101e8:	bf18      	it	ne
 80101ea:	81a3      	strhne	r3, [r4, #12]
 80101ec:	bd10      	pop	{r4, pc}

080101ee <__sclose>:
 80101ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101f2:	f000 b809 	b.w	8010208 <_close_r>

080101f6 <memset>:
 80101f6:	4402      	add	r2, r0
 80101f8:	4603      	mov	r3, r0
 80101fa:	4293      	cmp	r3, r2
 80101fc:	d100      	bne.n	8010200 <memset+0xa>
 80101fe:	4770      	bx	lr
 8010200:	f803 1b01 	strb.w	r1, [r3], #1
 8010204:	e7f9      	b.n	80101fa <memset+0x4>
	...

08010208 <_close_r>:
 8010208:	b538      	push	{r3, r4, r5, lr}
 801020a:	4d06      	ldr	r5, [pc, #24]	@ (8010224 <_close_r+0x1c>)
 801020c:	2300      	movs	r3, #0
 801020e:	4604      	mov	r4, r0
 8010210:	4608      	mov	r0, r1
 8010212:	602b      	str	r3, [r5, #0]
 8010214:	f7f2 fcfe 	bl	8002c14 <_close>
 8010218:	1c43      	adds	r3, r0, #1
 801021a:	d102      	bne.n	8010222 <_close_r+0x1a>
 801021c:	682b      	ldr	r3, [r5, #0]
 801021e:	b103      	cbz	r3, 8010222 <_close_r+0x1a>
 8010220:	6023      	str	r3, [r4, #0]
 8010222:	bd38      	pop	{r3, r4, r5, pc}
 8010224:	24002148 	.word	0x24002148

08010228 <_lseek_r>:
 8010228:	b538      	push	{r3, r4, r5, lr}
 801022a:	4d07      	ldr	r5, [pc, #28]	@ (8010248 <_lseek_r+0x20>)
 801022c:	4604      	mov	r4, r0
 801022e:	4608      	mov	r0, r1
 8010230:	4611      	mov	r1, r2
 8010232:	2200      	movs	r2, #0
 8010234:	602a      	str	r2, [r5, #0]
 8010236:	461a      	mov	r2, r3
 8010238:	f7f2 fd13 	bl	8002c62 <_lseek>
 801023c:	1c43      	adds	r3, r0, #1
 801023e:	d102      	bne.n	8010246 <_lseek_r+0x1e>
 8010240:	682b      	ldr	r3, [r5, #0]
 8010242:	b103      	cbz	r3, 8010246 <_lseek_r+0x1e>
 8010244:	6023      	str	r3, [r4, #0]
 8010246:	bd38      	pop	{r3, r4, r5, pc}
 8010248:	24002148 	.word	0x24002148

0801024c <_read_r>:
 801024c:	b538      	push	{r3, r4, r5, lr}
 801024e:	4d07      	ldr	r5, [pc, #28]	@ (801026c <_read_r+0x20>)
 8010250:	4604      	mov	r4, r0
 8010252:	4608      	mov	r0, r1
 8010254:	4611      	mov	r1, r2
 8010256:	2200      	movs	r2, #0
 8010258:	602a      	str	r2, [r5, #0]
 801025a:	461a      	mov	r2, r3
 801025c:	f7f2 fc88 	bl	8002b70 <_read>
 8010260:	1c43      	adds	r3, r0, #1
 8010262:	d102      	bne.n	801026a <_read_r+0x1e>
 8010264:	682b      	ldr	r3, [r5, #0]
 8010266:	b103      	cbz	r3, 801026a <_read_r+0x1e>
 8010268:	6023      	str	r3, [r4, #0]
 801026a:	bd38      	pop	{r3, r4, r5, pc}
 801026c:	24002148 	.word	0x24002148

08010270 <_sbrk_r>:
 8010270:	b538      	push	{r3, r4, r5, lr}
 8010272:	4d06      	ldr	r5, [pc, #24]	@ (801028c <_sbrk_r+0x1c>)
 8010274:	2300      	movs	r3, #0
 8010276:	4604      	mov	r4, r0
 8010278:	4608      	mov	r0, r1
 801027a:	602b      	str	r3, [r5, #0]
 801027c:	f7f2 fcfe 	bl	8002c7c <_sbrk>
 8010280:	1c43      	adds	r3, r0, #1
 8010282:	d102      	bne.n	801028a <_sbrk_r+0x1a>
 8010284:	682b      	ldr	r3, [r5, #0]
 8010286:	b103      	cbz	r3, 801028a <_sbrk_r+0x1a>
 8010288:	6023      	str	r3, [r4, #0]
 801028a:	bd38      	pop	{r3, r4, r5, pc}
 801028c:	24002148 	.word	0x24002148

08010290 <_write_r>:
 8010290:	b538      	push	{r3, r4, r5, lr}
 8010292:	4d07      	ldr	r5, [pc, #28]	@ (80102b0 <_write_r+0x20>)
 8010294:	4604      	mov	r4, r0
 8010296:	4608      	mov	r0, r1
 8010298:	4611      	mov	r1, r2
 801029a:	2200      	movs	r2, #0
 801029c:	602a      	str	r2, [r5, #0]
 801029e:	461a      	mov	r2, r3
 80102a0:	f7f2 fc83 	bl	8002baa <_write>
 80102a4:	1c43      	adds	r3, r0, #1
 80102a6:	d102      	bne.n	80102ae <_write_r+0x1e>
 80102a8:	682b      	ldr	r3, [r5, #0]
 80102aa:	b103      	cbz	r3, 80102ae <_write_r+0x1e>
 80102ac:	6023      	str	r3, [r4, #0]
 80102ae:	bd38      	pop	{r3, r4, r5, pc}
 80102b0:	24002148 	.word	0x24002148

080102b4 <__errno>:
 80102b4:	4b01      	ldr	r3, [pc, #4]	@ (80102bc <__errno+0x8>)
 80102b6:	6818      	ldr	r0, [r3, #0]
 80102b8:	4770      	bx	lr
 80102ba:	bf00      	nop
 80102bc:	24000078 	.word	0x24000078

080102c0 <__libc_init_array>:
 80102c0:	b570      	push	{r4, r5, r6, lr}
 80102c2:	4d0d      	ldr	r5, [pc, #52]	@ (80102f8 <__libc_init_array+0x38>)
 80102c4:	4c0d      	ldr	r4, [pc, #52]	@ (80102fc <__libc_init_array+0x3c>)
 80102c6:	1b64      	subs	r4, r4, r5
 80102c8:	10a4      	asrs	r4, r4, #2
 80102ca:	2600      	movs	r6, #0
 80102cc:	42a6      	cmp	r6, r4
 80102ce:	d109      	bne.n	80102e4 <__libc_init_array+0x24>
 80102d0:	4d0b      	ldr	r5, [pc, #44]	@ (8010300 <__libc_init_array+0x40>)
 80102d2:	4c0c      	ldr	r4, [pc, #48]	@ (8010304 <__libc_init_array+0x44>)
 80102d4:	f000 fe1a 	bl	8010f0c <_init>
 80102d8:	1b64      	subs	r4, r4, r5
 80102da:	10a4      	asrs	r4, r4, #2
 80102dc:	2600      	movs	r6, #0
 80102de:	42a6      	cmp	r6, r4
 80102e0:	d105      	bne.n	80102ee <__libc_init_array+0x2e>
 80102e2:	bd70      	pop	{r4, r5, r6, pc}
 80102e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80102e8:	4798      	blx	r3
 80102ea:	3601      	adds	r6, #1
 80102ec:	e7ee      	b.n	80102cc <__libc_init_array+0xc>
 80102ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80102f2:	4798      	blx	r3
 80102f4:	3601      	adds	r6, #1
 80102f6:	e7f2      	b.n	80102de <__libc_init_array+0x1e>
 80102f8:	08011740 	.word	0x08011740
 80102fc:	08011740 	.word	0x08011740
 8010300:	08011740 	.word	0x08011740
 8010304:	08011744 	.word	0x08011744

08010308 <__retarget_lock_init_recursive>:
 8010308:	4770      	bx	lr

0801030a <__retarget_lock_acquire_recursive>:
 801030a:	4770      	bx	lr

0801030c <__retarget_lock_release_recursive>:
 801030c:	4770      	bx	lr

0801030e <memcpy>:
 801030e:	440a      	add	r2, r1
 8010310:	4291      	cmp	r1, r2
 8010312:	f100 33ff 	add.w	r3, r0, #4294967295
 8010316:	d100      	bne.n	801031a <memcpy+0xc>
 8010318:	4770      	bx	lr
 801031a:	b510      	push	{r4, lr}
 801031c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010320:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010324:	4291      	cmp	r1, r2
 8010326:	d1f9      	bne.n	801031c <memcpy+0xe>
 8010328:	bd10      	pop	{r4, pc}
	...

0801032c <_free_r>:
 801032c:	b538      	push	{r3, r4, r5, lr}
 801032e:	4605      	mov	r5, r0
 8010330:	2900      	cmp	r1, #0
 8010332:	d041      	beq.n	80103b8 <_free_r+0x8c>
 8010334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010338:	1f0c      	subs	r4, r1, #4
 801033a:	2b00      	cmp	r3, #0
 801033c:	bfb8      	it	lt
 801033e:	18e4      	addlt	r4, r4, r3
 8010340:	f7ff fe2e 	bl	800ffa0 <__malloc_lock>
 8010344:	4a1d      	ldr	r2, [pc, #116]	@ (80103bc <_free_r+0x90>)
 8010346:	6813      	ldr	r3, [r2, #0]
 8010348:	b933      	cbnz	r3, 8010358 <_free_r+0x2c>
 801034a:	6063      	str	r3, [r4, #4]
 801034c:	6014      	str	r4, [r2, #0]
 801034e:	4628      	mov	r0, r5
 8010350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010354:	f7ff be2a 	b.w	800ffac <__malloc_unlock>
 8010358:	42a3      	cmp	r3, r4
 801035a:	d908      	bls.n	801036e <_free_r+0x42>
 801035c:	6820      	ldr	r0, [r4, #0]
 801035e:	1821      	adds	r1, r4, r0
 8010360:	428b      	cmp	r3, r1
 8010362:	bf01      	itttt	eq
 8010364:	6819      	ldreq	r1, [r3, #0]
 8010366:	685b      	ldreq	r3, [r3, #4]
 8010368:	1809      	addeq	r1, r1, r0
 801036a:	6021      	streq	r1, [r4, #0]
 801036c:	e7ed      	b.n	801034a <_free_r+0x1e>
 801036e:	461a      	mov	r2, r3
 8010370:	685b      	ldr	r3, [r3, #4]
 8010372:	b10b      	cbz	r3, 8010378 <_free_r+0x4c>
 8010374:	42a3      	cmp	r3, r4
 8010376:	d9fa      	bls.n	801036e <_free_r+0x42>
 8010378:	6811      	ldr	r1, [r2, #0]
 801037a:	1850      	adds	r0, r2, r1
 801037c:	42a0      	cmp	r0, r4
 801037e:	d10b      	bne.n	8010398 <_free_r+0x6c>
 8010380:	6820      	ldr	r0, [r4, #0]
 8010382:	4401      	add	r1, r0
 8010384:	1850      	adds	r0, r2, r1
 8010386:	4283      	cmp	r3, r0
 8010388:	6011      	str	r1, [r2, #0]
 801038a:	d1e0      	bne.n	801034e <_free_r+0x22>
 801038c:	6818      	ldr	r0, [r3, #0]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	6053      	str	r3, [r2, #4]
 8010392:	4408      	add	r0, r1
 8010394:	6010      	str	r0, [r2, #0]
 8010396:	e7da      	b.n	801034e <_free_r+0x22>
 8010398:	d902      	bls.n	80103a0 <_free_r+0x74>
 801039a:	230c      	movs	r3, #12
 801039c:	602b      	str	r3, [r5, #0]
 801039e:	e7d6      	b.n	801034e <_free_r+0x22>
 80103a0:	6820      	ldr	r0, [r4, #0]
 80103a2:	1821      	adds	r1, r4, r0
 80103a4:	428b      	cmp	r3, r1
 80103a6:	bf04      	itt	eq
 80103a8:	6819      	ldreq	r1, [r3, #0]
 80103aa:	685b      	ldreq	r3, [r3, #4]
 80103ac:	6063      	str	r3, [r4, #4]
 80103ae:	bf04      	itt	eq
 80103b0:	1809      	addeq	r1, r1, r0
 80103b2:	6021      	streq	r1, [r4, #0]
 80103b4:	6054      	str	r4, [r2, #4]
 80103b6:	e7ca      	b.n	801034e <_free_r+0x22>
 80103b8:	bd38      	pop	{r3, r4, r5, pc}
 80103ba:	bf00      	nop
 80103bc:	24002008 	.word	0x24002008

080103c0 <__sfputc_r>:
 80103c0:	6893      	ldr	r3, [r2, #8]
 80103c2:	3b01      	subs	r3, #1
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	b410      	push	{r4}
 80103c8:	6093      	str	r3, [r2, #8]
 80103ca:	da08      	bge.n	80103de <__sfputc_r+0x1e>
 80103cc:	6994      	ldr	r4, [r2, #24]
 80103ce:	42a3      	cmp	r3, r4
 80103d0:	db01      	blt.n	80103d6 <__sfputc_r+0x16>
 80103d2:	290a      	cmp	r1, #10
 80103d4:	d103      	bne.n	80103de <__sfputc_r+0x1e>
 80103d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103da:	f000 bb9f 	b.w	8010b1c <__swbuf_r>
 80103de:	6813      	ldr	r3, [r2, #0]
 80103e0:	1c58      	adds	r0, r3, #1
 80103e2:	6010      	str	r0, [r2, #0]
 80103e4:	7019      	strb	r1, [r3, #0]
 80103e6:	4608      	mov	r0, r1
 80103e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103ec:	4770      	bx	lr

080103ee <__sfputs_r>:
 80103ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103f0:	4606      	mov	r6, r0
 80103f2:	460f      	mov	r7, r1
 80103f4:	4614      	mov	r4, r2
 80103f6:	18d5      	adds	r5, r2, r3
 80103f8:	42ac      	cmp	r4, r5
 80103fa:	d101      	bne.n	8010400 <__sfputs_r+0x12>
 80103fc:	2000      	movs	r0, #0
 80103fe:	e007      	b.n	8010410 <__sfputs_r+0x22>
 8010400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010404:	463a      	mov	r2, r7
 8010406:	4630      	mov	r0, r6
 8010408:	f7ff ffda 	bl	80103c0 <__sfputc_r>
 801040c:	1c43      	adds	r3, r0, #1
 801040e:	d1f3      	bne.n	80103f8 <__sfputs_r+0xa>
 8010410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010414 <_vfiprintf_r>:
 8010414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010418:	460d      	mov	r5, r1
 801041a:	b09d      	sub	sp, #116	@ 0x74
 801041c:	4614      	mov	r4, r2
 801041e:	4698      	mov	r8, r3
 8010420:	4606      	mov	r6, r0
 8010422:	b118      	cbz	r0, 801042c <_vfiprintf_r+0x18>
 8010424:	6a03      	ldr	r3, [r0, #32]
 8010426:	b90b      	cbnz	r3, 801042c <_vfiprintf_r+0x18>
 8010428:	f7ff fe52 	bl	80100d0 <__sinit>
 801042c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801042e:	07d9      	lsls	r1, r3, #31
 8010430:	d405      	bmi.n	801043e <_vfiprintf_r+0x2a>
 8010432:	89ab      	ldrh	r3, [r5, #12]
 8010434:	059a      	lsls	r2, r3, #22
 8010436:	d402      	bmi.n	801043e <_vfiprintf_r+0x2a>
 8010438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801043a:	f7ff ff66 	bl	801030a <__retarget_lock_acquire_recursive>
 801043e:	89ab      	ldrh	r3, [r5, #12]
 8010440:	071b      	lsls	r3, r3, #28
 8010442:	d501      	bpl.n	8010448 <_vfiprintf_r+0x34>
 8010444:	692b      	ldr	r3, [r5, #16]
 8010446:	b99b      	cbnz	r3, 8010470 <_vfiprintf_r+0x5c>
 8010448:	4629      	mov	r1, r5
 801044a:	4630      	mov	r0, r6
 801044c:	f000 fba4 	bl	8010b98 <__swsetup_r>
 8010450:	b170      	cbz	r0, 8010470 <_vfiprintf_r+0x5c>
 8010452:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010454:	07dc      	lsls	r4, r3, #31
 8010456:	d504      	bpl.n	8010462 <_vfiprintf_r+0x4e>
 8010458:	f04f 30ff 	mov.w	r0, #4294967295
 801045c:	b01d      	add	sp, #116	@ 0x74
 801045e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010462:	89ab      	ldrh	r3, [r5, #12]
 8010464:	0598      	lsls	r0, r3, #22
 8010466:	d4f7      	bmi.n	8010458 <_vfiprintf_r+0x44>
 8010468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801046a:	f7ff ff4f 	bl	801030c <__retarget_lock_release_recursive>
 801046e:	e7f3      	b.n	8010458 <_vfiprintf_r+0x44>
 8010470:	2300      	movs	r3, #0
 8010472:	9309      	str	r3, [sp, #36]	@ 0x24
 8010474:	2320      	movs	r3, #32
 8010476:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801047a:	f8cd 800c 	str.w	r8, [sp, #12]
 801047e:	2330      	movs	r3, #48	@ 0x30
 8010480:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010630 <_vfiprintf_r+0x21c>
 8010484:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010488:	f04f 0901 	mov.w	r9, #1
 801048c:	4623      	mov	r3, r4
 801048e:	469a      	mov	sl, r3
 8010490:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010494:	b10a      	cbz	r2, 801049a <_vfiprintf_r+0x86>
 8010496:	2a25      	cmp	r2, #37	@ 0x25
 8010498:	d1f9      	bne.n	801048e <_vfiprintf_r+0x7a>
 801049a:	ebba 0b04 	subs.w	fp, sl, r4
 801049e:	d00b      	beq.n	80104b8 <_vfiprintf_r+0xa4>
 80104a0:	465b      	mov	r3, fp
 80104a2:	4622      	mov	r2, r4
 80104a4:	4629      	mov	r1, r5
 80104a6:	4630      	mov	r0, r6
 80104a8:	f7ff ffa1 	bl	80103ee <__sfputs_r>
 80104ac:	3001      	adds	r0, #1
 80104ae:	f000 80a7 	beq.w	8010600 <_vfiprintf_r+0x1ec>
 80104b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104b4:	445a      	add	r2, fp
 80104b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80104b8:	f89a 3000 	ldrb.w	r3, [sl]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	f000 809f 	beq.w	8010600 <_vfiprintf_r+0x1ec>
 80104c2:	2300      	movs	r3, #0
 80104c4:	f04f 32ff 	mov.w	r2, #4294967295
 80104c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104cc:	f10a 0a01 	add.w	sl, sl, #1
 80104d0:	9304      	str	r3, [sp, #16]
 80104d2:	9307      	str	r3, [sp, #28]
 80104d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80104d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80104da:	4654      	mov	r4, sl
 80104dc:	2205      	movs	r2, #5
 80104de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104e2:	4853      	ldr	r0, [pc, #332]	@ (8010630 <_vfiprintf_r+0x21c>)
 80104e4:	f7ef ff04 	bl	80002f0 <memchr>
 80104e8:	9a04      	ldr	r2, [sp, #16]
 80104ea:	b9d8      	cbnz	r0, 8010524 <_vfiprintf_r+0x110>
 80104ec:	06d1      	lsls	r1, r2, #27
 80104ee:	bf44      	itt	mi
 80104f0:	2320      	movmi	r3, #32
 80104f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80104f6:	0713      	lsls	r3, r2, #28
 80104f8:	bf44      	itt	mi
 80104fa:	232b      	movmi	r3, #43	@ 0x2b
 80104fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010500:	f89a 3000 	ldrb.w	r3, [sl]
 8010504:	2b2a      	cmp	r3, #42	@ 0x2a
 8010506:	d015      	beq.n	8010534 <_vfiprintf_r+0x120>
 8010508:	9a07      	ldr	r2, [sp, #28]
 801050a:	4654      	mov	r4, sl
 801050c:	2000      	movs	r0, #0
 801050e:	f04f 0c0a 	mov.w	ip, #10
 8010512:	4621      	mov	r1, r4
 8010514:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010518:	3b30      	subs	r3, #48	@ 0x30
 801051a:	2b09      	cmp	r3, #9
 801051c:	d94b      	bls.n	80105b6 <_vfiprintf_r+0x1a2>
 801051e:	b1b0      	cbz	r0, 801054e <_vfiprintf_r+0x13a>
 8010520:	9207      	str	r2, [sp, #28]
 8010522:	e014      	b.n	801054e <_vfiprintf_r+0x13a>
 8010524:	eba0 0308 	sub.w	r3, r0, r8
 8010528:	fa09 f303 	lsl.w	r3, r9, r3
 801052c:	4313      	orrs	r3, r2
 801052e:	9304      	str	r3, [sp, #16]
 8010530:	46a2      	mov	sl, r4
 8010532:	e7d2      	b.n	80104da <_vfiprintf_r+0xc6>
 8010534:	9b03      	ldr	r3, [sp, #12]
 8010536:	1d19      	adds	r1, r3, #4
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	9103      	str	r1, [sp, #12]
 801053c:	2b00      	cmp	r3, #0
 801053e:	bfbb      	ittet	lt
 8010540:	425b      	neglt	r3, r3
 8010542:	f042 0202 	orrlt.w	r2, r2, #2
 8010546:	9307      	strge	r3, [sp, #28]
 8010548:	9307      	strlt	r3, [sp, #28]
 801054a:	bfb8      	it	lt
 801054c:	9204      	strlt	r2, [sp, #16]
 801054e:	7823      	ldrb	r3, [r4, #0]
 8010550:	2b2e      	cmp	r3, #46	@ 0x2e
 8010552:	d10a      	bne.n	801056a <_vfiprintf_r+0x156>
 8010554:	7863      	ldrb	r3, [r4, #1]
 8010556:	2b2a      	cmp	r3, #42	@ 0x2a
 8010558:	d132      	bne.n	80105c0 <_vfiprintf_r+0x1ac>
 801055a:	9b03      	ldr	r3, [sp, #12]
 801055c:	1d1a      	adds	r2, r3, #4
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	9203      	str	r2, [sp, #12]
 8010562:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010566:	3402      	adds	r4, #2
 8010568:	9305      	str	r3, [sp, #20]
 801056a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010640 <_vfiprintf_r+0x22c>
 801056e:	7821      	ldrb	r1, [r4, #0]
 8010570:	2203      	movs	r2, #3
 8010572:	4650      	mov	r0, sl
 8010574:	f7ef febc 	bl	80002f0 <memchr>
 8010578:	b138      	cbz	r0, 801058a <_vfiprintf_r+0x176>
 801057a:	9b04      	ldr	r3, [sp, #16]
 801057c:	eba0 000a 	sub.w	r0, r0, sl
 8010580:	2240      	movs	r2, #64	@ 0x40
 8010582:	4082      	lsls	r2, r0
 8010584:	4313      	orrs	r3, r2
 8010586:	3401      	adds	r4, #1
 8010588:	9304      	str	r3, [sp, #16]
 801058a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801058e:	4829      	ldr	r0, [pc, #164]	@ (8010634 <_vfiprintf_r+0x220>)
 8010590:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010594:	2206      	movs	r2, #6
 8010596:	f7ef feab 	bl	80002f0 <memchr>
 801059a:	2800      	cmp	r0, #0
 801059c:	d03f      	beq.n	801061e <_vfiprintf_r+0x20a>
 801059e:	4b26      	ldr	r3, [pc, #152]	@ (8010638 <_vfiprintf_r+0x224>)
 80105a0:	bb1b      	cbnz	r3, 80105ea <_vfiprintf_r+0x1d6>
 80105a2:	9b03      	ldr	r3, [sp, #12]
 80105a4:	3307      	adds	r3, #7
 80105a6:	f023 0307 	bic.w	r3, r3, #7
 80105aa:	3308      	adds	r3, #8
 80105ac:	9303      	str	r3, [sp, #12]
 80105ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105b0:	443b      	add	r3, r7
 80105b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80105b4:	e76a      	b.n	801048c <_vfiprintf_r+0x78>
 80105b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80105ba:	460c      	mov	r4, r1
 80105bc:	2001      	movs	r0, #1
 80105be:	e7a8      	b.n	8010512 <_vfiprintf_r+0xfe>
 80105c0:	2300      	movs	r3, #0
 80105c2:	3401      	adds	r4, #1
 80105c4:	9305      	str	r3, [sp, #20]
 80105c6:	4619      	mov	r1, r3
 80105c8:	f04f 0c0a 	mov.w	ip, #10
 80105cc:	4620      	mov	r0, r4
 80105ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105d2:	3a30      	subs	r2, #48	@ 0x30
 80105d4:	2a09      	cmp	r2, #9
 80105d6:	d903      	bls.n	80105e0 <_vfiprintf_r+0x1cc>
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d0c6      	beq.n	801056a <_vfiprintf_r+0x156>
 80105dc:	9105      	str	r1, [sp, #20]
 80105de:	e7c4      	b.n	801056a <_vfiprintf_r+0x156>
 80105e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80105e4:	4604      	mov	r4, r0
 80105e6:	2301      	movs	r3, #1
 80105e8:	e7f0      	b.n	80105cc <_vfiprintf_r+0x1b8>
 80105ea:	ab03      	add	r3, sp, #12
 80105ec:	9300      	str	r3, [sp, #0]
 80105ee:	462a      	mov	r2, r5
 80105f0:	4b12      	ldr	r3, [pc, #72]	@ (801063c <_vfiprintf_r+0x228>)
 80105f2:	a904      	add	r1, sp, #16
 80105f4:	4630      	mov	r0, r6
 80105f6:	f3af 8000 	nop.w
 80105fa:	4607      	mov	r7, r0
 80105fc:	1c78      	adds	r0, r7, #1
 80105fe:	d1d6      	bne.n	80105ae <_vfiprintf_r+0x19a>
 8010600:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010602:	07d9      	lsls	r1, r3, #31
 8010604:	d405      	bmi.n	8010612 <_vfiprintf_r+0x1fe>
 8010606:	89ab      	ldrh	r3, [r5, #12]
 8010608:	059a      	lsls	r2, r3, #22
 801060a:	d402      	bmi.n	8010612 <_vfiprintf_r+0x1fe>
 801060c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801060e:	f7ff fe7d 	bl	801030c <__retarget_lock_release_recursive>
 8010612:	89ab      	ldrh	r3, [r5, #12]
 8010614:	065b      	lsls	r3, r3, #25
 8010616:	f53f af1f 	bmi.w	8010458 <_vfiprintf_r+0x44>
 801061a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801061c:	e71e      	b.n	801045c <_vfiprintf_r+0x48>
 801061e:	ab03      	add	r3, sp, #12
 8010620:	9300      	str	r3, [sp, #0]
 8010622:	462a      	mov	r2, r5
 8010624:	4b05      	ldr	r3, [pc, #20]	@ (801063c <_vfiprintf_r+0x228>)
 8010626:	a904      	add	r1, sp, #16
 8010628:	4630      	mov	r0, r6
 801062a:	f000 f879 	bl	8010720 <_printf_i>
 801062e:	e7e4      	b.n	80105fa <_vfiprintf_r+0x1e6>
 8010630:	080115c4 	.word	0x080115c4
 8010634:	080115ce 	.word	0x080115ce
 8010638:	00000000 	.word	0x00000000
 801063c:	080103ef 	.word	0x080103ef
 8010640:	080115ca 	.word	0x080115ca

08010644 <_printf_common>:
 8010644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010648:	4616      	mov	r6, r2
 801064a:	4698      	mov	r8, r3
 801064c:	688a      	ldr	r2, [r1, #8]
 801064e:	690b      	ldr	r3, [r1, #16]
 8010650:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010654:	4293      	cmp	r3, r2
 8010656:	bfb8      	it	lt
 8010658:	4613      	movlt	r3, r2
 801065a:	6033      	str	r3, [r6, #0]
 801065c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010660:	4607      	mov	r7, r0
 8010662:	460c      	mov	r4, r1
 8010664:	b10a      	cbz	r2, 801066a <_printf_common+0x26>
 8010666:	3301      	adds	r3, #1
 8010668:	6033      	str	r3, [r6, #0]
 801066a:	6823      	ldr	r3, [r4, #0]
 801066c:	0699      	lsls	r1, r3, #26
 801066e:	bf42      	ittt	mi
 8010670:	6833      	ldrmi	r3, [r6, #0]
 8010672:	3302      	addmi	r3, #2
 8010674:	6033      	strmi	r3, [r6, #0]
 8010676:	6825      	ldr	r5, [r4, #0]
 8010678:	f015 0506 	ands.w	r5, r5, #6
 801067c:	d106      	bne.n	801068c <_printf_common+0x48>
 801067e:	f104 0a19 	add.w	sl, r4, #25
 8010682:	68e3      	ldr	r3, [r4, #12]
 8010684:	6832      	ldr	r2, [r6, #0]
 8010686:	1a9b      	subs	r3, r3, r2
 8010688:	42ab      	cmp	r3, r5
 801068a:	dc26      	bgt.n	80106da <_printf_common+0x96>
 801068c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010690:	6822      	ldr	r2, [r4, #0]
 8010692:	3b00      	subs	r3, #0
 8010694:	bf18      	it	ne
 8010696:	2301      	movne	r3, #1
 8010698:	0692      	lsls	r2, r2, #26
 801069a:	d42b      	bmi.n	80106f4 <_printf_common+0xb0>
 801069c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80106a0:	4641      	mov	r1, r8
 80106a2:	4638      	mov	r0, r7
 80106a4:	47c8      	blx	r9
 80106a6:	3001      	adds	r0, #1
 80106a8:	d01e      	beq.n	80106e8 <_printf_common+0xa4>
 80106aa:	6823      	ldr	r3, [r4, #0]
 80106ac:	6922      	ldr	r2, [r4, #16]
 80106ae:	f003 0306 	and.w	r3, r3, #6
 80106b2:	2b04      	cmp	r3, #4
 80106b4:	bf02      	ittt	eq
 80106b6:	68e5      	ldreq	r5, [r4, #12]
 80106b8:	6833      	ldreq	r3, [r6, #0]
 80106ba:	1aed      	subeq	r5, r5, r3
 80106bc:	68a3      	ldr	r3, [r4, #8]
 80106be:	bf0c      	ite	eq
 80106c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80106c4:	2500      	movne	r5, #0
 80106c6:	4293      	cmp	r3, r2
 80106c8:	bfc4      	itt	gt
 80106ca:	1a9b      	subgt	r3, r3, r2
 80106cc:	18ed      	addgt	r5, r5, r3
 80106ce:	2600      	movs	r6, #0
 80106d0:	341a      	adds	r4, #26
 80106d2:	42b5      	cmp	r5, r6
 80106d4:	d11a      	bne.n	801070c <_printf_common+0xc8>
 80106d6:	2000      	movs	r0, #0
 80106d8:	e008      	b.n	80106ec <_printf_common+0xa8>
 80106da:	2301      	movs	r3, #1
 80106dc:	4652      	mov	r2, sl
 80106de:	4641      	mov	r1, r8
 80106e0:	4638      	mov	r0, r7
 80106e2:	47c8      	blx	r9
 80106e4:	3001      	adds	r0, #1
 80106e6:	d103      	bne.n	80106f0 <_printf_common+0xac>
 80106e8:	f04f 30ff 	mov.w	r0, #4294967295
 80106ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106f0:	3501      	adds	r5, #1
 80106f2:	e7c6      	b.n	8010682 <_printf_common+0x3e>
 80106f4:	18e1      	adds	r1, r4, r3
 80106f6:	1c5a      	adds	r2, r3, #1
 80106f8:	2030      	movs	r0, #48	@ 0x30
 80106fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80106fe:	4422      	add	r2, r4
 8010700:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010704:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010708:	3302      	adds	r3, #2
 801070a:	e7c7      	b.n	801069c <_printf_common+0x58>
 801070c:	2301      	movs	r3, #1
 801070e:	4622      	mov	r2, r4
 8010710:	4641      	mov	r1, r8
 8010712:	4638      	mov	r0, r7
 8010714:	47c8      	blx	r9
 8010716:	3001      	adds	r0, #1
 8010718:	d0e6      	beq.n	80106e8 <_printf_common+0xa4>
 801071a:	3601      	adds	r6, #1
 801071c:	e7d9      	b.n	80106d2 <_printf_common+0x8e>
	...

08010720 <_printf_i>:
 8010720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010724:	7e0f      	ldrb	r7, [r1, #24]
 8010726:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010728:	2f78      	cmp	r7, #120	@ 0x78
 801072a:	4691      	mov	r9, r2
 801072c:	4680      	mov	r8, r0
 801072e:	460c      	mov	r4, r1
 8010730:	469a      	mov	sl, r3
 8010732:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010736:	d807      	bhi.n	8010748 <_printf_i+0x28>
 8010738:	2f62      	cmp	r7, #98	@ 0x62
 801073a:	d80a      	bhi.n	8010752 <_printf_i+0x32>
 801073c:	2f00      	cmp	r7, #0
 801073e:	f000 80d1 	beq.w	80108e4 <_printf_i+0x1c4>
 8010742:	2f58      	cmp	r7, #88	@ 0x58
 8010744:	f000 80b8 	beq.w	80108b8 <_printf_i+0x198>
 8010748:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801074c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010750:	e03a      	b.n	80107c8 <_printf_i+0xa8>
 8010752:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010756:	2b15      	cmp	r3, #21
 8010758:	d8f6      	bhi.n	8010748 <_printf_i+0x28>
 801075a:	a101      	add	r1, pc, #4	@ (adr r1, 8010760 <_printf_i+0x40>)
 801075c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010760:	080107b9 	.word	0x080107b9
 8010764:	080107cd 	.word	0x080107cd
 8010768:	08010749 	.word	0x08010749
 801076c:	08010749 	.word	0x08010749
 8010770:	08010749 	.word	0x08010749
 8010774:	08010749 	.word	0x08010749
 8010778:	080107cd 	.word	0x080107cd
 801077c:	08010749 	.word	0x08010749
 8010780:	08010749 	.word	0x08010749
 8010784:	08010749 	.word	0x08010749
 8010788:	08010749 	.word	0x08010749
 801078c:	080108cb 	.word	0x080108cb
 8010790:	080107f7 	.word	0x080107f7
 8010794:	08010885 	.word	0x08010885
 8010798:	08010749 	.word	0x08010749
 801079c:	08010749 	.word	0x08010749
 80107a0:	080108ed 	.word	0x080108ed
 80107a4:	08010749 	.word	0x08010749
 80107a8:	080107f7 	.word	0x080107f7
 80107ac:	08010749 	.word	0x08010749
 80107b0:	08010749 	.word	0x08010749
 80107b4:	0801088d 	.word	0x0801088d
 80107b8:	6833      	ldr	r3, [r6, #0]
 80107ba:	1d1a      	adds	r2, r3, #4
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	6032      	str	r2, [r6, #0]
 80107c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80107c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80107c8:	2301      	movs	r3, #1
 80107ca:	e09c      	b.n	8010906 <_printf_i+0x1e6>
 80107cc:	6833      	ldr	r3, [r6, #0]
 80107ce:	6820      	ldr	r0, [r4, #0]
 80107d0:	1d19      	adds	r1, r3, #4
 80107d2:	6031      	str	r1, [r6, #0]
 80107d4:	0606      	lsls	r6, r0, #24
 80107d6:	d501      	bpl.n	80107dc <_printf_i+0xbc>
 80107d8:	681d      	ldr	r5, [r3, #0]
 80107da:	e003      	b.n	80107e4 <_printf_i+0xc4>
 80107dc:	0645      	lsls	r5, r0, #25
 80107de:	d5fb      	bpl.n	80107d8 <_printf_i+0xb8>
 80107e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80107e4:	2d00      	cmp	r5, #0
 80107e6:	da03      	bge.n	80107f0 <_printf_i+0xd0>
 80107e8:	232d      	movs	r3, #45	@ 0x2d
 80107ea:	426d      	negs	r5, r5
 80107ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80107f0:	4858      	ldr	r0, [pc, #352]	@ (8010954 <_printf_i+0x234>)
 80107f2:	230a      	movs	r3, #10
 80107f4:	e011      	b.n	801081a <_printf_i+0xfa>
 80107f6:	6821      	ldr	r1, [r4, #0]
 80107f8:	6833      	ldr	r3, [r6, #0]
 80107fa:	0608      	lsls	r0, r1, #24
 80107fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8010800:	d402      	bmi.n	8010808 <_printf_i+0xe8>
 8010802:	0649      	lsls	r1, r1, #25
 8010804:	bf48      	it	mi
 8010806:	b2ad      	uxthmi	r5, r5
 8010808:	2f6f      	cmp	r7, #111	@ 0x6f
 801080a:	4852      	ldr	r0, [pc, #328]	@ (8010954 <_printf_i+0x234>)
 801080c:	6033      	str	r3, [r6, #0]
 801080e:	bf14      	ite	ne
 8010810:	230a      	movne	r3, #10
 8010812:	2308      	moveq	r3, #8
 8010814:	2100      	movs	r1, #0
 8010816:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801081a:	6866      	ldr	r6, [r4, #4]
 801081c:	60a6      	str	r6, [r4, #8]
 801081e:	2e00      	cmp	r6, #0
 8010820:	db05      	blt.n	801082e <_printf_i+0x10e>
 8010822:	6821      	ldr	r1, [r4, #0]
 8010824:	432e      	orrs	r6, r5
 8010826:	f021 0104 	bic.w	r1, r1, #4
 801082a:	6021      	str	r1, [r4, #0]
 801082c:	d04b      	beq.n	80108c6 <_printf_i+0x1a6>
 801082e:	4616      	mov	r6, r2
 8010830:	fbb5 f1f3 	udiv	r1, r5, r3
 8010834:	fb03 5711 	mls	r7, r3, r1, r5
 8010838:	5dc7      	ldrb	r7, [r0, r7]
 801083a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801083e:	462f      	mov	r7, r5
 8010840:	42bb      	cmp	r3, r7
 8010842:	460d      	mov	r5, r1
 8010844:	d9f4      	bls.n	8010830 <_printf_i+0x110>
 8010846:	2b08      	cmp	r3, #8
 8010848:	d10b      	bne.n	8010862 <_printf_i+0x142>
 801084a:	6823      	ldr	r3, [r4, #0]
 801084c:	07df      	lsls	r7, r3, #31
 801084e:	d508      	bpl.n	8010862 <_printf_i+0x142>
 8010850:	6923      	ldr	r3, [r4, #16]
 8010852:	6861      	ldr	r1, [r4, #4]
 8010854:	4299      	cmp	r1, r3
 8010856:	bfde      	ittt	le
 8010858:	2330      	movle	r3, #48	@ 0x30
 801085a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801085e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010862:	1b92      	subs	r2, r2, r6
 8010864:	6122      	str	r2, [r4, #16]
 8010866:	f8cd a000 	str.w	sl, [sp]
 801086a:	464b      	mov	r3, r9
 801086c:	aa03      	add	r2, sp, #12
 801086e:	4621      	mov	r1, r4
 8010870:	4640      	mov	r0, r8
 8010872:	f7ff fee7 	bl	8010644 <_printf_common>
 8010876:	3001      	adds	r0, #1
 8010878:	d14a      	bne.n	8010910 <_printf_i+0x1f0>
 801087a:	f04f 30ff 	mov.w	r0, #4294967295
 801087e:	b004      	add	sp, #16
 8010880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010884:	6823      	ldr	r3, [r4, #0]
 8010886:	f043 0320 	orr.w	r3, r3, #32
 801088a:	6023      	str	r3, [r4, #0]
 801088c:	4832      	ldr	r0, [pc, #200]	@ (8010958 <_printf_i+0x238>)
 801088e:	2778      	movs	r7, #120	@ 0x78
 8010890:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010894:	6823      	ldr	r3, [r4, #0]
 8010896:	6831      	ldr	r1, [r6, #0]
 8010898:	061f      	lsls	r7, r3, #24
 801089a:	f851 5b04 	ldr.w	r5, [r1], #4
 801089e:	d402      	bmi.n	80108a6 <_printf_i+0x186>
 80108a0:	065f      	lsls	r7, r3, #25
 80108a2:	bf48      	it	mi
 80108a4:	b2ad      	uxthmi	r5, r5
 80108a6:	6031      	str	r1, [r6, #0]
 80108a8:	07d9      	lsls	r1, r3, #31
 80108aa:	bf44      	itt	mi
 80108ac:	f043 0320 	orrmi.w	r3, r3, #32
 80108b0:	6023      	strmi	r3, [r4, #0]
 80108b2:	b11d      	cbz	r5, 80108bc <_printf_i+0x19c>
 80108b4:	2310      	movs	r3, #16
 80108b6:	e7ad      	b.n	8010814 <_printf_i+0xf4>
 80108b8:	4826      	ldr	r0, [pc, #152]	@ (8010954 <_printf_i+0x234>)
 80108ba:	e7e9      	b.n	8010890 <_printf_i+0x170>
 80108bc:	6823      	ldr	r3, [r4, #0]
 80108be:	f023 0320 	bic.w	r3, r3, #32
 80108c2:	6023      	str	r3, [r4, #0]
 80108c4:	e7f6      	b.n	80108b4 <_printf_i+0x194>
 80108c6:	4616      	mov	r6, r2
 80108c8:	e7bd      	b.n	8010846 <_printf_i+0x126>
 80108ca:	6833      	ldr	r3, [r6, #0]
 80108cc:	6825      	ldr	r5, [r4, #0]
 80108ce:	6961      	ldr	r1, [r4, #20]
 80108d0:	1d18      	adds	r0, r3, #4
 80108d2:	6030      	str	r0, [r6, #0]
 80108d4:	062e      	lsls	r6, r5, #24
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	d501      	bpl.n	80108de <_printf_i+0x1be>
 80108da:	6019      	str	r1, [r3, #0]
 80108dc:	e002      	b.n	80108e4 <_printf_i+0x1c4>
 80108de:	0668      	lsls	r0, r5, #25
 80108e0:	d5fb      	bpl.n	80108da <_printf_i+0x1ba>
 80108e2:	8019      	strh	r1, [r3, #0]
 80108e4:	2300      	movs	r3, #0
 80108e6:	6123      	str	r3, [r4, #16]
 80108e8:	4616      	mov	r6, r2
 80108ea:	e7bc      	b.n	8010866 <_printf_i+0x146>
 80108ec:	6833      	ldr	r3, [r6, #0]
 80108ee:	1d1a      	adds	r2, r3, #4
 80108f0:	6032      	str	r2, [r6, #0]
 80108f2:	681e      	ldr	r6, [r3, #0]
 80108f4:	6862      	ldr	r2, [r4, #4]
 80108f6:	2100      	movs	r1, #0
 80108f8:	4630      	mov	r0, r6
 80108fa:	f7ef fcf9 	bl	80002f0 <memchr>
 80108fe:	b108      	cbz	r0, 8010904 <_printf_i+0x1e4>
 8010900:	1b80      	subs	r0, r0, r6
 8010902:	6060      	str	r0, [r4, #4]
 8010904:	6863      	ldr	r3, [r4, #4]
 8010906:	6123      	str	r3, [r4, #16]
 8010908:	2300      	movs	r3, #0
 801090a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801090e:	e7aa      	b.n	8010866 <_printf_i+0x146>
 8010910:	6923      	ldr	r3, [r4, #16]
 8010912:	4632      	mov	r2, r6
 8010914:	4649      	mov	r1, r9
 8010916:	4640      	mov	r0, r8
 8010918:	47d0      	blx	sl
 801091a:	3001      	adds	r0, #1
 801091c:	d0ad      	beq.n	801087a <_printf_i+0x15a>
 801091e:	6823      	ldr	r3, [r4, #0]
 8010920:	079b      	lsls	r3, r3, #30
 8010922:	d413      	bmi.n	801094c <_printf_i+0x22c>
 8010924:	68e0      	ldr	r0, [r4, #12]
 8010926:	9b03      	ldr	r3, [sp, #12]
 8010928:	4298      	cmp	r0, r3
 801092a:	bfb8      	it	lt
 801092c:	4618      	movlt	r0, r3
 801092e:	e7a6      	b.n	801087e <_printf_i+0x15e>
 8010930:	2301      	movs	r3, #1
 8010932:	4632      	mov	r2, r6
 8010934:	4649      	mov	r1, r9
 8010936:	4640      	mov	r0, r8
 8010938:	47d0      	blx	sl
 801093a:	3001      	adds	r0, #1
 801093c:	d09d      	beq.n	801087a <_printf_i+0x15a>
 801093e:	3501      	adds	r5, #1
 8010940:	68e3      	ldr	r3, [r4, #12]
 8010942:	9903      	ldr	r1, [sp, #12]
 8010944:	1a5b      	subs	r3, r3, r1
 8010946:	42ab      	cmp	r3, r5
 8010948:	dcf2      	bgt.n	8010930 <_printf_i+0x210>
 801094a:	e7eb      	b.n	8010924 <_printf_i+0x204>
 801094c:	2500      	movs	r5, #0
 801094e:	f104 0619 	add.w	r6, r4, #25
 8010952:	e7f5      	b.n	8010940 <_printf_i+0x220>
 8010954:	080115d5 	.word	0x080115d5
 8010958:	080115e6 	.word	0x080115e6

0801095c <__sflush_r>:
 801095c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010964:	0716      	lsls	r6, r2, #28
 8010966:	4605      	mov	r5, r0
 8010968:	460c      	mov	r4, r1
 801096a:	d454      	bmi.n	8010a16 <__sflush_r+0xba>
 801096c:	684b      	ldr	r3, [r1, #4]
 801096e:	2b00      	cmp	r3, #0
 8010970:	dc02      	bgt.n	8010978 <__sflush_r+0x1c>
 8010972:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010974:	2b00      	cmp	r3, #0
 8010976:	dd48      	ble.n	8010a0a <__sflush_r+0xae>
 8010978:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801097a:	2e00      	cmp	r6, #0
 801097c:	d045      	beq.n	8010a0a <__sflush_r+0xae>
 801097e:	2300      	movs	r3, #0
 8010980:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010984:	682f      	ldr	r7, [r5, #0]
 8010986:	6a21      	ldr	r1, [r4, #32]
 8010988:	602b      	str	r3, [r5, #0]
 801098a:	d030      	beq.n	80109ee <__sflush_r+0x92>
 801098c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801098e:	89a3      	ldrh	r3, [r4, #12]
 8010990:	0759      	lsls	r1, r3, #29
 8010992:	d505      	bpl.n	80109a0 <__sflush_r+0x44>
 8010994:	6863      	ldr	r3, [r4, #4]
 8010996:	1ad2      	subs	r2, r2, r3
 8010998:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801099a:	b10b      	cbz	r3, 80109a0 <__sflush_r+0x44>
 801099c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801099e:	1ad2      	subs	r2, r2, r3
 80109a0:	2300      	movs	r3, #0
 80109a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80109a4:	6a21      	ldr	r1, [r4, #32]
 80109a6:	4628      	mov	r0, r5
 80109a8:	47b0      	blx	r6
 80109aa:	1c43      	adds	r3, r0, #1
 80109ac:	89a3      	ldrh	r3, [r4, #12]
 80109ae:	d106      	bne.n	80109be <__sflush_r+0x62>
 80109b0:	6829      	ldr	r1, [r5, #0]
 80109b2:	291d      	cmp	r1, #29
 80109b4:	d82b      	bhi.n	8010a0e <__sflush_r+0xb2>
 80109b6:	4a2a      	ldr	r2, [pc, #168]	@ (8010a60 <__sflush_r+0x104>)
 80109b8:	40ca      	lsrs	r2, r1
 80109ba:	07d6      	lsls	r6, r2, #31
 80109bc:	d527      	bpl.n	8010a0e <__sflush_r+0xb2>
 80109be:	2200      	movs	r2, #0
 80109c0:	6062      	str	r2, [r4, #4]
 80109c2:	04d9      	lsls	r1, r3, #19
 80109c4:	6922      	ldr	r2, [r4, #16]
 80109c6:	6022      	str	r2, [r4, #0]
 80109c8:	d504      	bpl.n	80109d4 <__sflush_r+0x78>
 80109ca:	1c42      	adds	r2, r0, #1
 80109cc:	d101      	bne.n	80109d2 <__sflush_r+0x76>
 80109ce:	682b      	ldr	r3, [r5, #0]
 80109d0:	b903      	cbnz	r3, 80109d4 <__sflush_r+0x78>
 80109d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80109d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80109d6:	602f      	str	r7, [r5, #0]
 80109d8:	b1b9      	cbz	r1, 8010a0a <__sflush_r+0xae>
 80109da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80109de:	4299      	cmp	r1, r3
 80109e0:	d002      	beq.n	80109e8 <__sflush_r+0x8c>
 80109e2:	4628      	mov	r0, r5
 80109e4:	f7ff fca2 	bl	801032c <_free_r>
 80109e8:	2300      	movs	r3, #0
 80109ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80109ec:	e00d      	b.n	8010a0a <__sflush_r+0xae>
 80109ee:	2301      	movs	r3, #1
 80109f0:	4628      	mov	r0, r5
 80109f2:	47b0      	blx	r6
 80109f4:	4602      	mov	r2, r0
 80109f6:	1c50      	adds	r0, r2, #1
 80109f8:	d1c9      	bne.n	801098e <__sflush_r+0x32>
 80109fa:	682b      	ldr	r3, [r5, #0]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d0c6      	beq.n	801098e <__sflush_r+0x32>
 8010a00:	2b1d      	cmp	r3, #29
 8010a02:	d001      	beq.n	8010a08 <__sflush_r+0xac>
 8010a04:	2b16      	cmp	r3, #22
 8010a06:	d11e      	bne.n	8010a46 <__sflush_r+0xea>
 8010a08:	602f      	str	r7, [r5, #0]
 8010a0a:	2000      	movs	r0, #0
 8010a0c:	e022      	b.n	8010a54 <__sflush_r+0xf8>
 8010a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a12:	b21b      	sxth	r3, r3
 8010a14:	e01b      	b.n	8010a4e <__sflush_r+0xf2>
 8010a16:	690f      	ldr	r7, [r1, #16]
 8010a18:	2f00      	cmp	r7, #0
 8010a1a:	d0f6      	beq.n	8010a0a <__sflush_r+0xae>
 8010a1c:	0793      	lsls	r3, r2, #30
 8010a1e:	680e      	ldr	r6, [r1, #0]
 8010a20:	bf08      	it	eq
 8010a22:	694b      	ldreq	r3, [r1, #20]
 8010a24:	600f      	str	r7, [r1, #0]
 8010a26:	bf18      	it	ne
 8010a28:	2300      	movne	r3, #0
 8010a2a:	eba6 0807 	sub.w	r8, r6, r7
 8010a2e:	608b      	str	r3, [r1, #8]
 8010a30:	f1b8 0f00 	cmp.w	r8, #0
 8010a34:	dde9      	ble.n	8010a0a <__sflush_r+0xae>
 8010a36:	6a21      	ldr	r1, [r4, #32]
 8010a38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010a3a:	4643      	mov	r3, r8
 8010a3c:	463a      	mov	r2, r7
 8010a3e:	4628      	mov	r0, r5
 8010a40:	47b0      	blx	r6
 8010a42:	2800      	cmp	r0, #0
 8010a44:	dc08      	bgt.n	8010a58 <__sflush_r+0xfc>
 8010a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a4e:	81a3      	strh	r3, [r4, #12]
 8010a50:	f04f 30ff 	mov.w	r0, #4294967295
 8010a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a58:	4407      	add	r7, r0
 8010a5a:	eba8 0800 	sub.w	r8, r8, r0
 8010a5e:	e7e7      	b.n	8010a30 <__sflush_r+0xd4>
 8010a60:	20400001 	.word	0x20400001

08010a64 <_fflush_r>:
 8010a64:	b538      	push	{r3, r4, r5, lr}
 8010a66:	690b      	ldr	r3, [r1, #16]
 8010a68:	4605      	mov	r5, r0
 8010a6a:	460c      	mov	r4, r1
 8010a6c:	b913      	cbnz	r3, 8010a74 <_fflush_r+0x10>
 8010a6e:	2500      	movs	r5, #0
 8010a70:	4628      	mov	r0, r5
 8010a72:	bd38      	pop	{r3, r4, r5, pc}
 8010a74:	b118      	cbz	r0, 8010a7e <_fflush_r+0x1a>
 8010a76:	6a03      	ldr	r3, [r0, #32]
 8010a78:	b90b      	cbnz	r3, 8010a7e <_fflush_r+0x1a>
 8010a7a:	f7ff fb29 	bl	80100d0 <__sinit>
 8010a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d0f3      	beq.n	8010a6e <_fflush_r+0xa>
 8010a86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010a88:	07d0      	lsls	r0, r2, #31
 8010a8a:	d404      	bmi.n	8010a96 <_fflush_r+0x32>
 8010a8c:	0599      	lsls	r1, r3, #22
 8010a8e:	d402      	bmi.n	8010a96 <_fflush_r+0x32>
 8010a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010a92:	f7ff fc3a 	bl	801030a <__retarget_lock_acquire_recursive>
 8010a96:	4628      	mov	r0, r5
 8010a98:	4621      	mov	r1, r4
 8010a9a:	f7ff ff5f 	bl	801095c <__sflush_r>
 8010a9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010aa0:	07da      	lsls	r2, r3, #31
 8010aa2:	4605      	mov	r5, r0
 8010aa4:	d4e4      	bmi.n	8010a70 <_fflush_r+0xc>
 8010aa6:	89a3      	ldrh	r3, [r4, #12]
 8010aa8:	059b      	lsls	r3, r3, #22
 8010aaa:	d4e1      	bmi.n	8010a70 <_fflush_r+0xc>
 8010aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010aae:	f7ff fc2d 	bl	801030c <__retarget_lock_release_recursive>
 8010ab2:	e7dd      	b.n	8010a70 <_fflush_r+0xc>

08010ab4 <_putc_r>:
 8010ab4:	b570      	push	{r4, r5, r6, lr}
 8010ab6:	460d      	mov	r5, r1
 8010ab8:	4614      	mov	r4, r2
 8010aba:	4606      	mov	r6, r0
 8010abc:	b118      	cbz	r0, 8010ac6 <_putc_r+0x12>
 8010abe:	6a03      	ldr	r3, [r0, #32]
 8010ac0:	b90b      	cbnz	r3, 8010ac6 <_putc_r+0x12>
 8010ac2:	f7ff fb05 	bl	80100d0 <__sinit>
 8010ac6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010ac8:	07d8      	lsls	r0, r3, #31
 8010aca:	d405      	bmi.n	8010ad8 <_putc_r+0x24>
 8010acc:	89a3      	ldrh	r3, [r4, #12]
 8010ace:	0599      	lsls	r1, r3, #22
 8010ad0:	d402      	bmi.n	8010ad8 <_putc_r+0x24>
 8010ad2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ad4:	f7ff fc19 	bl	801030a <__retarget_lock_acquire_recursive>
 8010ad8:	68a3      	ldr	r3, [r4, #8]
 8010ada:	3b01      	subs	r3, #1
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	60a3      	str	r3, [r4, #8]
 8010ae0:	da05      	bge.n	8010aee <_putc_r+0x3a>
 8010ae2:	69a2      	ldr	r2, [r4, #24]
 8010ae4:	4293      	cmp	r3, r2
 8010ae6:	db12      	blt.n	8010b0e <_putc_r+0x5a>
 8010ae8:	b2eb      	uxtb	r3, r5
 8010aea:	2b0a      	cmp	r3, #10
 8010aec:	d00f      	beq.n	8010b0e <_putc_r+0x5a>
 8010aee:	6823      	ldr	r3, [r4, #0]
 8010af0:	1c5a      	adds	r2, r3, #1
 8010af2:	6022      	str	r2, [r4, #0]
 8010af4:	701d      	strb	r5, [r3, #0]
 8010af6:	b2ed      	uxtb	r5, r5
 8010af8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010afa:	07da      	lsls	r2, r3, #31
 8010afc:	d405      	bmi.n	8010b0a <_putc_r+0x56>
 8010afe:	89a3      	ldrh	r3, [r4, #12]
 8010b00:	059b      	lsls	r3, r3, #22
 8010b02:	d402      	bmi.n	8010b0a <_putc_r+0x56>
 8010b04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010b06:	f7ff fc01 	bl	801030c <__retarget_lock_release_recursive>
 8010b0a:	4628      	mov	r0, r5
 8010b0c:	bd70      	pop	{r4, r5, r6, pc}
 8010b0e:	4629      	mov	r1, r5
 8010b10:	4622      	mov	r2, r4
 8010b12:	4630      	mov	r0, r6
 8010b14:	f000 f802 	bl	8010b1c <__swbuf_r>
 8010b18:	4605      	mov	r5, r0
 8010b1a:	e7ed      	b.n	8010af8 <_putc_r+0x44>

08010b1c <__swbuf_r>:
 8010b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b1e:	460e      	mov	r6, r1
 8010b20:	4614      	mov	r4, r2
 8010b22:	4605      	mov	r5, r0
 8010b24:	b118      	cbz	r0, 8010b2e <__swbuf_r+0x12>
 8010b26:	6a03      	ldr	r3, [r0, #32]
 8010b28:	b90b      	cbnz	r3, 8010b2e <__swbuf_r+0x12>
 8010b2a:	f7ff fad1 	bl	80100d0 <__sinit>
 8010b2e:	69a3      	ldr	r3, [r4, #24]
 8010b30:	60a3      	str	r3, [r4, #8]
 8010b32:	89a3      	ldrh	r3, [r4, #12]
 8010b34:	071a      	lsls	r2, r3, #28
 8010b36:	d501      	bpl.n	8010b3c <__swbuf_r+0x20>
 8010b38:	6923      	ldr	r3, [r4, #16]
 8010b3a:	b943      	cbnz	r3, 8010b4e <__swbuf_r+0x32>
 8010b3c:	4621      	mov	r1, r4
 8010b3e:	4628      	mov	r0, r5
 8010b40:	f000 f82a 	bl	8010b98 <__swsetup_r>
 8010b44:	b118      	cbz	r0, 8010b4e <__swbuf_r+0x32>
 8010b46:	f04f 37ff 	mov.w	r7, #4294967295
 8010b4a:	4638      	mov	r0, r7
 8010b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b4e:	6823      	ldr	r3, [r4, #0]
 8010b50:	6922      	ldr	r2, [r4, #16]
 8010b52:	1a98      	subs	r0, r3, r2
 8010b54:	6963      	ldr	r3, [r4, #20]
 8010b56:	b2f6      	uxtb	r6, r6
 8010b58:	4283      	cmp	r3, r0
 8010b5a:	4637      	mov	r7, r6
 8010b5c:	dc05      	bgt.n	8010b6a <__swbuf_r+0x4e>
 8010b5e:	4621      	mov	r1, r4
 8010b60:	4628      	mov	r0, r5
 8010b62:	f7ff ff7f 	bl	8010a64 <_fflush_r>
 8010b66:	2800      	cmp	r0, #0
 8010b68:	d1ed      	bne.n	8010b46 <__swbuf_r+0x2a>
 8010b6a:	68a3      	ldr	r3, [r4, #8]
 8010b6c:	3b01      	subs	r3, #1
 8010b6e:	60a3      	str	r3, [r4, #8]
 8010b70:	6823      	ldr	r3, [r4, #0]
 8010b72:	1c5a      	adds	r2, r3, #1
 8010b74:	6022      	str	r2, [r4, #0]
 8010b76:	701e      	strb	r6, [r3, #0]
 8010b78:	6962      	ldr	r2, [r4, #20]
 8010b7a:	1c43      	adds	r3, r0, #1
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	d004      	beq.n	8010b8a <__swbuf_r+0x6e>
 8010b80:	89a3      	ldrh	r3, [r4, #12]
 8010b82:	07db      	lsls	r3, r3, #31
 8010b84:	d5e1      	bpl.n	8010b4a <__swbuf_r+0x2e>
 8010b86:	2e0a      	cmp	r6, #10
 8010b88:	d1df      	bne.n	8010b4a <__swbuf_r+0x2e>
 8010b8a:	4621      	mov	r1, r4
 8010b8c:	4628      	mov	r0, r5
 8010b8e:	f7ff ff69 	bl	8010a64 <_fflush_r>
 8010b92:	2800      	cmp	r0, #0
 8010b94:	d0d9      	beq.n	8010b4a <__swbuf_r+0x2e>
 8010b96:	e7d6      	b.n	8010b46 <__swbuf_r+0x2a>

08010b98 <__swsetup_r>:
 8010b98:	b538      	push	{r3, r4, r5, lr}
 8010b9a:	4b29      	ldr	r3, [pc, #164]	@ (8010c40 <__swsetup_r+0xa8>)
 8010b9c:	4605      	mov	r5, r0
 8010b9e:	6818      	ldr	r0, [r3, #0]
 8010ba0:	460c      	mov	r4, r1
 8010ba2:	b118      	cbz	r0, 8010bac <__swsetup_r+0x14>
 8010ba4:	6a03      	ldr	r3, [r0, #32]
 8010ba6:	b90b      	cbnz	r3, 8010bac <__swsetup_r+0x14>
 8010ba8:	f7ff fa92 	bl	80100d0 <__sinit>
 8010bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bb0:	0719      	lsls	r1, r3, #28
 8010bb2:	d422      	bmi.n	8010bfa <__swsetup_r+0x62>
 8010bb4:	06da      	lsls	r2, r3, #27
 8010bb6:	d407      	bmi.n	8010bc8 <__swsetup_r+0x30>
 8010bb8:	2209      	movs	r2, #9
 8010bba:	602a      	str	r2, [r5, #0]
 8010bbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010bc0:	81a3      	strh	r3, [r4, #12]
 8010bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8010bc6:	e033      	b.n	8010c30 <__swsetup_r+0x98>
 8010bc8:	0758      	lsls	r0, r3, #29
 8010bca:	d512      	bpl.n	8010bf2 <__swsetup_r+0x5a>
 8010bcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010bce:	b141      	cbz	r1, 8010be2 <__swsetup_r+0x4a>
 8010bd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010bd4:	4299      	cmp	r1, r3
 8010bd6:	d002      	beq.n	8010bde <__swsetup_r+0x46>
 8010bd8:	4628      	mov	r0, r5
 8010bda:	f7ff fba7 	bl	801032c <_free_r>
 8010bde:	2300      	movs	r3, #0
 8010be0:	6363      	str	r3, [r4, #52]	@ 0x34
 8010be2:	89a3      	ldrh	r3, [r4, #12]
 8010be4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010be8:	81a3      	strh	r3, [r4, #12]
 8010bea:	2300      	movs	r3, #0
 8010bec:	6063      	str	r3, [r4, #4]
 8010bee:	6923      	ldr	r3, [r4, #16]
 8010bf0:	6023      	str	r3, [r4, #0]
 8010bf2:	89a3      	ldrh	r3, [r4, #12]
 8010bf4:	f043 0308 	orr.w	r3, r3, #8
 8010bf8:	81a3      	strh	r3, [r4, #12]
 8010bfa:	6923      	ldr	r3, [r4, #16]
 8010bfc:	b94b      	cbnz	r3, 8010c12 <__swsetup_r+0x7a>
 8010bfe:	89a3      	ldrh	r3, [r4, #12]
 8010c00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010c08:	d003      	beq.n	8010c12 <__swsetup_r+0x7a>
 8010c0a:	4621      	mov	r1, r4
 8010c0c:	4628      	mov	r0, r5
 8010c0e:	f000 f83f 	bl	8010c90 <__smakebuf_r>
 8010c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c16:	f013 0201 	ands.w	r2, r3, #1
 8010c1a:	d00a      	beq.n	8010c32 <__swsetup_r+0x9a>
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	60a2      	str	r2, [r4, #8]
 8010c20:	6962      	ldr	r2, [r4, #20]
 8010c22:	4252      	negs	r2, r2
 8010c24:	61a2      	str	r2, [r4, #24]
 8010c26:	6922      	ldr	r2, [r4, #16]
 8010c28:	b942      	cbnz	r2, 8010c3c <__swsetup_r+0xa4>
 8010c2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010c2e:	d1c5      	bne.n	8010bbc <__swsetup_r+0x24>
 8010c30:	bd38      	pop	{r3, r4, r5, pc}
 8010c32:	0799      	lsls	r1, r3, #30
 8010c34:	bf58      	it	pl
 8010c36:	6962      	ldrpl	r2, [r4, #20]
 8010c38:	60a2      	str	r2, [r4, #8]
 8010c3a:	e7f4      	b.n	8010c26 <__swsetup_r+0x8e>
 8010c3c:	2000      	movs	r0, #0
 8010c3e:	e7f7      	b.n	8010c30 <__swsetup_r+0x98>
 8010c40:	24000078 	.word	0x24000078

08010c44 <__swhatbuf_r>:
 8010c44:	b570      	push	{r4, r5, r6, lr}
 8010c46:	460c      	mov	r4, r1
 8010c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c4c:	2900      	cmp	r1, #0
 8010c4e:	b096      	sub	sp, #88	@ 0x58
 8010c50:	4615      	mov	r5, r2
 8010c52:	461e      	mov	r6, r3
 8010c54:	da0d      	bge.n	8010c72 <__swhatbuf_r+0x2e>
 8010c56:	89a3      	ldrh	r3, [r4, #12]
 8010c58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010c5c:	f04f 0100 	mov.w	r1, #0
 8010c60:	bf14      	ite	ne
 8010c62:	2340      	movne	r3, #64	@ 0x40
 8010c64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010c68:	2000      	movs	r0, #0
 8010c6a:	6031      	str	r1, [r6, #0]
 8010c6c:	602b      	str	r3, [r5, #0]
 8010c6e:	b016      	add	sp, #88	@ 0x58
 8010c70:	bd70      	pop	{r4, r5, r6, pc}
 8010c72:	466a      	mov	r2, sp
 8010c74:	f000 f848 	bl	8010d08 <_fstat_r>
 8010c78:	2800      	cmp	r0, #0
 8010c7a:	dbec      	blt.n	8010c56 <__swhatbuf_r+0x12>
 8010c7c:	9901      	ldr	r1, [sp, #4]
 8010c7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010c82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010c86:	4259      	negs	r1, r3
 8010c88:	4159      	adcs	r1, r3
 8010c8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c8e:	e7eb      	b.n	8010c68 <__swhatbuf_r+0x24>

08010c90 <__smakebuf_r>:
 8010c90:	898b      	ldrh	r3, [r1, #12]
 8010c92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c94:	079d      	lsls	r5, r3, #30
 8010c96:	4606      	mov	r6, r0
 8010c98:	460c      	mov	r4, r1
 8010c9a:	d507      	bpl.n	8010cac <__smakebuf_r+0x1c>
 8010c9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010ca0:	6023      	str	r3, [r4, #0]
 8010ca2:	6123      	str	r3, [r4, #16]
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	6163      	str	r3, [r4, #20]
 8010ca8:	b003      	add	sp, #12
 8010caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cac:	ab01      	add	r3, sp, #4
 8010cae:	466a      	mov	r2, sp
 8010cb0:	f7ff ffc8 	bl	8010c44 <__swhatbuf_r>
 8010cb4:	9f00      	ldr	r7, [sp, #0]
 8010cb6:	4605      	mov	r5, r0
 8010cb8:	4639      	mov	r1, r7
 8010cba:	4630      	mov	r0, r6
 8010cbc:	f7ff f8f0 	bl	800fea0 <_malloc_r>
 8010cc0:	b948      	cbnz	r0, 8010cd6 <__smakebuf_r+0x46>
 8010cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cc6:	059a      	lsls	r2, r3, #22
 8010cc8:	d4ee      	bmi.n	8010ca8 <__smakebuf_r+0x18>
 8010cca:	f023 0303 	bic.w	r3, r3, #3
 8010cce:	f043 0302 	orr.w	r3, r3, #2
 8010cd2:	81a3      	strh	r3, [r4, #12]
 8010cd4:	e7e2      	b.n	8010c9c <__smakebuf_r+0xc>
 8010cd6:	89a3      	ldrh	r3, [r4, #12]
 8010cd8:	6020      	str	r0, [r4, #0]
 8010cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010cde:	81a3      	strh	r3, [r4, #12]
 8010ce0:	9b01      	ldr	r3, [sp, #4]
 8010ce2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010ce6:	b15b      	cbz	r3, 8010d00 <__smakebuf_r+0x70>
 8010ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cec:	4630      	mov	r0, r6
 8010cee:	f000 f81d 	bl	8010d2c <_isatty_r>
 8010cf2:	b128      	cbz	r0, 8010d00 <__smakebuf_r+0x70>
 8010cf4:	89a3      	ldrh	r3, [r4, #12]
 8010cf6:	f023 0303 	bic.w	r3, r3, #3
 8010cfa:	f043 0301 	orr.w	r3, r3, #1
 8010cfe:	81a3      	strh	r3, [r4, #12]
 8010d00:	89a3      	ldrh	r3, [r4, #12]
 8010d02:	431d      	orrs	r5, r3
 8010d04:	81a5      	strh	r5, [r4, #12]
 8010d06:	e7cf      	b.n	8010ca8 <__smakebuf_r+0x18>

08010d08 <_fstat_r>:
 8010d08:	b538      	push	{r3, r4, r5, lr}
 8010d0a:	4d07      	ldr	r5, [pc, #28]	@ (8010d28 <_fstat_r+0x20>)
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	4604      	mov	r4, r0
 8010d10:	4608      	mov	r0, r1
 8010d12:	4611      	mov	r1, r2
 8010d14:	602b      	str	r3, [r5, #0]
 8010d16:	f7f1 ff89 	bl	8002c2c <_fstat>
 8010d1a:	1c43      	adds	r3, r0, #1
 8010d1c:	d102      	bne.n	8010d24 <_fstat_r+0x1c>
 8010d1e:	682b      	ldr	r3, [r5, #0]
 8010d20:	b103      	cbz	r3, 8010d24 <_fstat_r+0x1c>
 8010d22:	6023      	str	r3, [r4, #0]
 8010d24:	bd38      	pop	{r3, r4, r5, pc}
 8010d26:	bf00      	nop
 8010d28:	24002148 	.word	0x24002148

08010d2c <_isatty_r>:
 8010d2c:	b538      	push	{r3, r4, r5, lr}
 8010d2e:	4d06      	ldr	r5, [pc, #24]	@ (8010d48 <_isatty_r+0x1c>)
 8010d30:	2300      	movs	r3, #0
 8010d32:	4604      	mov	r4, r0
 8010d34:	4608      	mov	r0, r1
 8010d36:	602b      	str	r3, [r5, #0]
 8010d38:	f7f1 ff88 	bl	8002c4c <_isatty>
 8010d3c:	1c43      	adds	r3, r0, #1
 8010d3e:	d102      	bne.n	8010d46 <_isatty_r+0x1a>
 8010d40:	682b      	ldr	r3, [r5, #0]
 8010d42:	b103      	cbz	r3, 8010d46 <_isatty_r+0x1a>
 8010d44:	6023      	str	r3, [r4, #0]
 8010d46:	bd38      	pop	{r3, r4, r5, pc}
 8010d48:	24002148 	.word	0x24002148

08010d4c <sinf_poly>:
 8010d4c:	07cb      	lsls	r3, r1, #31
 8010d4e:	d412      	bmi.n	8010d76 <sinf_poly+0x2a>
 8010d50:	ee21 5b00 	vmul.f64	d5, d1, d0
 8010d54:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8010d58:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8010d5c:	eea6 7b01 	vfma.f64	d7, d6, d1
 8010d60:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8010d64:	ee21 1b05 	vmul.f64	d1, d1, d5
 8010d68:	eea6 0b05 	vfma.f64	d0, d6, d5
 8010d6c:	eea7 0b01 	vfma.f64	d0, d7, d1
 8010d70:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010d74:	4770      	bx	lr
 8010d76:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8010d7a:	ee21 5b01 	vmul.f64	d5, d1, d1
 8010d7e:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8010d82:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8010d86:	eea1 7b06 	vfma.f64	d7, d1, d6
 8010d8a:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8010d8e:	eea1 0b06 	vfma.f64	d0, d1, d6
 8010d92:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8010d96:	ee21 1b05 	vmul.f64	d1, d1, d5
 8010d9a:	eea5 0b06 	vfma.f64	d0, d5, d6
 8010d9e:	e7e5      	b.n	8010d6c <sinf_poly+0x20>

08010da0 <sinf>:
 8010da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010da2:	ee10 4a10 	vmov	r4, s0
 8010da6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8010daa:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8010dae:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8010db2:	eef0 7a40 	vmov.f32	s15, s0
 8010db6:	d218      	bcs.n	8010dea <sinf+0x4a>
 8010db8:	ee26 1b06 	vmul.f64	d1, d6, d6
 8010dbc:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8010dc0:	d20a      	bcs.n	8010dd8 <sinf+0x38>
 8010dc2:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8010dc6:	d103      	bne.n	8010dd0 <sinf+0x30>
 8010dc8:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8010dcc:	ed8d 1a01 	vstr	s2, [sp, #4]
 8010dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8010dd4:	b003      	add	sp, #12
 8010dd6:	bd30      	pop	{r4, r5, pc}
 8010dd8:	483b      	ldr	r0, [pc, #236]	@ (8010ec8 <sinf+0x128>)
 8010dda:	eeb0 0b46 	vmov.f64	d0, d6
 8010dde:	2100      	movs	r1, #0
 8010de0:	b003      	add	sp, #12
 8010de2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010de6:	f7ff bfb1 	b.w	8010d4c <sinf_poly>
 8010dea:	f240 422e 	movw	r2, #1070	@ 0x42e
 8010dee:	4293      	cmp	r3, r2
 8010df0:	d824      	bhi.n	8010e3c <sinf+0x9c>
 8010df2:	4b35      	ldr	r3, [pc, #212]	@ (8010ec8 <sinf+0x128>)
 8010df4:	ed93 7b08 	vldr	d7, [r3, #32]
 8010df8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010dfc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010e00:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8010e04:	ee17 1a90 	vmov	r1, s15
 8010e08:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8010e0c:	1609      	asrs	r1, r1, #24
 8010e0e:	ee07 1a90 	vmov	s15, r1
 8010e12:	f001 0203 	and.w	r2, r1, #3
 8010e16:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010e1a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8010e1e:	ed92 0b00 	vldr	d0, [r2]
 8010e22:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8010e26:	f011 0f02 	tst.w	r1, #2
 8010e2a:	eea5 6b47 	vfms.f64	d6, d5, d7
 8010e2e:	bf08      	it	eq
 8010e30:	4618      	moveq	r0, r3
 8010e32:	ee26 1b06 	vmul.f64	d1, d6, d6
 8010e36:	ee20 0b06 	vmul.f64	d0, d0, d6
 8010e3a:	e7d1      	b.n	8010de0 <sinf+0x40>
 8010e3c:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8010e40:	d237      	bcs.n	8010eb2 <sinf+0x112>
 8010e42:	4922      	ldr	r1, [pc, #136]	@ (8010ecc <sinf+0x12c>)
 8010e44:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8010e48:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8010e4c:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8010e50:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8010e54:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8010e58:	6a10      	ldr	r0, [r2, #32]
 8010e5a:	6912      	ldr	r2, [r2, #16]
 8010e5c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010e60:	40ab      	lsls	r3, r5
 8010e62:	fba0 5003 	umull	r5, r0, r0, r3
 8010e66:	4359      	muls	r1, r3
 8010e68:	fbe3 0102 	umlal	r0, r1, r3, r2
 8010e6c:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8010e70:	0f9d      	lsrs	r5, r3, #30
 8010e72:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8010e76:	1ac9      	subs	r1, r1, r3
 8010e78:	f7ef fc18 	bl	80006ac <__aeabi_l2d>
 8010e7c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8010e80:	4b11      	ldr	r3, [pc, #68]	@ (8010ec8 <sinf+0x128>)
 8010e82:	f004 0203 	and.w	r2, r4, #3
 8010e86:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010e8a:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8010ec0 <sinf+0x120>
 8010e8e:	ed92 0b00 	vldr	d0, [r2]
 8010e92:	ec41 0b17 	vmov	d7, r0, r1
 8010e96:	f014 0f02 	tst.w	r4, #2
 8010e9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e9e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8010ea2:	4629      	mov	r1, r5
 8010ea4:	bf08      	it	eq
 8010ea6:	4618      	moveq	r0, r3
 8010ea8:	ee27 1b07 	vmul.f64	d1, d7, d7
 8010eac:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010eb0:	e796      	b.n	8010de0 <sinf+0x40>
 8010eb2:	b003      	add	sp, #12
 8010eb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010eb8:	f000 b818 	b.w	8010eec <__math_invalidf>
 8010ebc:	f3af 8000 	nop.w
 8010ec0:	54442d18 	.word	0x54442d18
 8010ec4:	3c1921fb 	.word	0x3c1921fb
 8010ec8:	08011658 	.word	0x08011658
 8010ecc:	080115f8 	.word	0x080115f8

08010ed0 <with_errnof>:
 8010ed0:	b510      	push	{r4, lr}
 8010ed2:	ed2d 8b02 	vpush	{d8}
 8010ed6:	eeb0 8a40 	vmov.f32	s16, s0
 8010eda:	4604      	mov	r4, r0
 8010edc:	f7ff f9ea 	bl	80102b4 <__errno>
 8010ee0:	eeb0 0a48 	vmov.f32	s0, s16
 8010ee4:	ecbd 8b02 	vpop	{d8}
 8010ee8:	6004      	str	r4, [r0, #0]
 8010eea:	bd10      	pop	{r4, pc}

08010eec <__math_invalidf>:
 8010eec:	eef0 7a40 	vmov.f32	s15, s0
 8010ef0:	ee30 7a40 	vsub.f32	s14, s0, s0
 8010ef4:	eef4 7a67 	vcmp.f32	s15, s15
 8010ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010efc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8010f00:	d602      	bvs.n	8010f08 <__math_invalidf+0x1c>
 8010f02:	2021      	movs	r0, #33	@ 0x21
 8010f04:	f7ff bfe4 	b.w	8010ed0 <with_errnof>
 8010f08:	4770      	bx	lr
	...

08010f0c <_init>:
 8010f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f0e:	bf00      	nop
 8010f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f12:	bc08      	pop	{r3}
 8010f14:	469e      	mov	lr, r3
 8010f16:	4770      	bx	lr

08010f18 <_fini>:
 8010f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f1a:	bf00      	nop
 8010f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f1e:	bc08      	pop	{r3}
 8010f20:	469e      	mov	lr, r3
 8010f22:	4770      	bx	lr
